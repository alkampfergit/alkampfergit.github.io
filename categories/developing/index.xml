<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>developing on Codewrecks</title><link>https://www.codewrecks.com/categories/developing/</link><description>Recent content in developing on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Sep 2023 15:45:18 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/developing/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging Production Issues with Dump Files and Visual Studio</title><link>https://www.codewrecks.com/post/visualstudio/debugging-a-minidump/</link><pubDate>Tue, 19 Sep 2023 15:45:18 +0200</pubDate><guid>https://www.codewrecks.com/post/visualstudio/debugging-a-minidump/</guid><description>Sometimes, you may encounter a problem in a production environment, such as a service that suddenly starts consuming a significant amount of RAM and CPU. In the past, I&amp;rsquo;ve seen people attempt to install Visual Studio on a production server to debug the issue directly, instead of relying on logs or other techniques. However, there&amp;rsquo;s a better approach: creating a dump file of the problematic process from the Task Manager. You can just right-click the process on Task Manager and request a MiniDump.</description></item><item><title>How to run x86 Unit Test in a .NET core application</title><link>https://www.codewrecks.com/post/visualstudio/dotnetcore-run-test-x86/</link><pubDate>Wed, 06 May 2020 21:45:18 +0200</pubDate><guid>https://www.codewrecks.com/post/visualstudio/dotnetcore-run-test-x86/</guid><description>We have a standard .NET standard solution with some projects and some Unit Tests, everything runs perfectly until we have the need to force compilation of one of the project in x86. This can be done with RuntimeIdentifier tag in project file.
&amp;lt;Project Sdk=&amp;#34;Microsoft.NET.Sdk&amp;#34;&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt; &amp;lt;RuntimeIdentifier&amp;gt;win-x86&amp;lt;/RuntimeIdentifier&amp;gt; &amp;lt;/PropertyGroup&amp;gt; After this modification tests started to fail with an error that is clearly directly related to the change in runtime, but was highly unexpected.</description></item></channel></rss>