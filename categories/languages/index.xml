<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Languages on Codewrecks</title><link>https://www.codewrecks.com/categories/languages/</link><description>Recent content in Languages on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 22 Nov 2008 05:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/languages/index.xml" rel="self" type="application/rss+xml"/><item><title>Extend BindingList with filter functionality</title><link>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</link><pubDate>Sat, 22 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</guid><description>&lt;p>If you still work with windows forms and cannot move all of your projects to WPF, you probably gets annoyed by the limitation of the standard BindingList&amp;lt;T&amp;gt; included in the framework. In an &lt;a href="http://www.codewrecks.com/blog/index.php/2007/10/12/bindinglistfind-and-notimplementedexception/">old post&lt;/a> I showed how can you create a specialized BindingList&amp;lt;T&amp;gt; to support generic Find() thanks to reflection, but this is not enough.&lt;/p>
&lt;p>Another annoying limitation is that BindingList does not support IBindingListView. For those that does not knows this interface, it is the one used by the windows forms binding engine to support filtering and advanced sorting. I think that filtering is a real basic functionality needed by the binding engine, and in fact WPF support for filtering, sorting and grouping, make these operations really a breeze. But BindingList does not offers such a functionality.&lt;/p></description></item><item><title>Story of a stupid bug difference between struct and class</title><link>https://www.codewrecks.com/post/old/2008/06/stupid-bug-difference-between-struct-and-class/</link><pubDate>Tue, 24 Jun 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/stupid-bug-difference-between-struct-and-class/</guid><description>&lt;p>I’ve incurred in a very stupid bug this afternoon, I run test on a new version of a component and I see that a lot of exceptions are raised about violating unique constraint of a simple strongly typed dataset I use to log information in database.&lt;/p>
&lt;p>After a brief look at the code I found that I create new guid with the instruction *new Guid(),*I was really surprised because I really know that new guid should be created with Guid.NewGuid(). This is indeed caused by the fact that Guid() is a structure and not a class. The following test demonstrate this fact&lt;/p></description></item><item><title>A generic IComparerT that works with reflection</title><link>https://www.codewrecks.com/post/old/2007/07/a-generic-icomparer-that-works-with-reflection/</link><pubDate>Mon, 02 Jul 2007 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/07/a-generic-icomparer-that-works-with-reflection/</guid><description>&lt;p>Today I was speaking with a colleague about creating a generic IComparer&amp;lt;T&amp;gt; that is able to compare two object based on a property discovered through reflection. Such object will be very useful to sort or find object inside collection of objects when you work with a domain model. In a domain we usually have a lot of objects such as customer, order, and so on, and it happens to have an homogeneous collection of objects in memory that needs to be sorted. Implementing an IComparer object for each combination of property and type is really boring so it useful to create a class capable to compare object based on reflection. A first implementation of the IComparer&amp;lt;T&amp;gt;::Compare() method could be the following&lt;/p></description></item><item><title>C anonymous delegates and template pattern</title><link>https://www.codewrecks.com/post/old/2007/06/c-anonymous-delegates-and-template-pattern-2/</link><pubDate>Tue, 05 Jun 2007 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/06/c-anonymous-delegates-and-template-pattern-2/</guid><description>&lt;p>Yesterday I blogged on a slightly modified version of Ayende code posted &lt;a href="http://ayende.com/Blog/archive/2007/05/27/Reflections-on-the-Naked-CLR.aspx">here&lt;/a>, this makes me reflect on template pattern of the GOF. Template pattern is one of the most useful pattern, and is used when you have a common block of code that is to be repeated in may part with a little customization. In the GOF the intent of the pattern is&lt;/p>
&lt;p>&lt;em>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.&lt;/em>&lt;/p></description></item><item><title>The old plain C language</title><link>https://www.codewrecks.com/post/old/2007/05/the-old-plain-c-language/</link><pubDate>Sun, 27 May 2007 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/the-old-plain-c-language/</guid><description>&lt;p>A friend of mine is taking a basic course in computer programming, and actually he is studying the basic of C language. Yesterday he told me that he must do a very simple exercise that will print on screen a triangle like this&lt;br>
XXXXXXXXXX&lt;br>
XXXXXXXXX&lt;br>
XXXXXXXX&lt;br>
And so on. He asked me if I could review his solution before he give his program to the teacher, because he is moving from the old house to a new house and actually he do not have access to a computer to try his solution. This morning I decided to refresh my knowledge of C solving this simple exercise, I must admit that I love C/C++&amp;hellip;I cannot explain but they are really fascinating languages (I love assembly language too)&lt;/p></description></item><item><title>Difference between C and VB simple add</title><link>https://www.codewrecks.com/post/old/2007/05/difference-between-c-and-vb-simple-add/</link><pubDate>Sat, 26 May 2007 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/difference-between-c-and-vb-simple-add/</guid><description>&lt;p>Sometimes differences between C# and VB could be subtle, for example consider these very simple two snippets of code, what they will print?&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vb" data-lang="vb">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Sub&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span>() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>Result &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">“&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Sum(&lt;span style="color:#66d9ef">Integer&lt;/span>.MaxValue, 1)) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EndSub 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PublicFunction Sum(&lt;span style="color:#66d9ef">ByVal&lt;/span> a AsInteger, &lt;span style="color:#66d9ef">ByVal&lt;/span> b AsInteger) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EndFunction&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main(&lt;span style="color:#66d9ef">string&lt;/span>[] args) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>Result &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">“&lt;/span> + Sum(Int32.MaxValue, &lt;span style="color:#ae81ff">1&lt;/span>)); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Int32 Sum(Int32 a, Int32 b) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> a + b; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The first snipped written in VB throws a System.OverflowException, because the result of the operation cannot be stored into an integer value. The behavior of C# can be more surprising because it print &lt;strong>Result is -2147483648&lt;/strong> showing a result that is clearly wrong. This example shows that VB and C# have very different semantic even for basic operation. But what is the reason for such a different behavior? If we look at MSIL code we can see that VB compiler produces this code&lt;/p></description></item><item><title>Casting in Visual Basic NET</title><link>https://www.codewrecks.com/post/old/2007/05/casting-in-visual-basic-net/</link><pubDate>Tue, 15 May 2007 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/casting-in-visual-basic-net/</guid><description>&lt;p>In all type safe languages there is the concept of “casting”, an operation used to specify to the compiler that a variable of a certain Type has to be considered of different Type. Visual Basic has three operators to do a cast: &lt;em>DirectCast, CType&lt;/em>and &lt;em>TryCast&lt;/em>, each one behaving in a different way from the other. To understand the subtle differences from these three operators lets present a simple example.&lt;/p>
&lt;p>PrivateSub DirectCastExample(ByVal obj AsObject)&lt;br>
Console.WriteLine(“string lenght={0}”, DirectCast(obj, String).Length)&lt;br>
EndSub&lt;/p></description></item><item><title>Syntax vs Semantic</title><link>https://www.codewrecks.com/post/old/2007/05/syntax-vs-semantic/</link><pubDate>Sat, 12 May 2007 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/syntax-vs-semantic/</guid><description>&lt;p>Yesterday I was reading a &lt;a href="http://blogs.ugidotnet.org/duz/archive/2007/05/11/77956.aspx">post&lt;/a> of a friend of mine. In this post my friend complains that these two snippet of code produces very different result.&lt;/p>
&lt;p>‘VB code: returns 1.2&lt;br>
Public Function TestDiv() As Double&lt;br>
Dim a As Int32 = 12&lt;br>
Dim b As Int32 = 10&lt;br>
Return a / b&lt;br>
End Function&lt;br>
//C# code: returns 1&lt;br>
public static Double TestDiv() {&lt;br>
Int32 a = 12;&lt;br>
Int32 b = 10;&lt;br>
return a / b;&lt;br>
}&lt;/p></description></item></channel></rss>