<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LINQ on Codewrecks</title><link>https://www.codewrecks.com/categories/linq/</link><description>Recent content in LINQ on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 23 Mar 2012 21:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/linq/index.xml" rel="self" type="application/rss+xml"/><item><title>Order by a property expressed as string in a LINQ Query</title><link>https://www.codewrecks.com/post/old/2012/03/order-by-a-property-expressed-as-string-in-a-linq-query/</link><pubDate>Fri, 23 Mar 2012 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/order-by-a-property-expressed-as-string-in-a-linq-query/</guid><description>This is one of the most common question you got when you show LINQ to Entities or LINQ to Nhibernate to people that are not used to LINQ: How can I order by a property if I have the name of the property expressed as String? I’ve blogged in the past how you can do dynamic sorting and pagination in Entity Framework, but that solution uses ESQL, a dialect to query EF that is similar to NHibernate HQL language.</description></item><item><title>Generic wrapper for LINQ to Tree</title><link>https://www.codewrecks.com/post/old/2011/04/generic-wrapper-for-linq-to-tree/</link><pubDate>Tue, 05 Apr 2011 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/generic-wrapper-for-linq-to-tree/</guid><description>In this post I dealt with a simple extension function to flatten a tree and in one of the comment Robert shared an interesting link that deal with the creation of a wrapper structure to use LINQ style function on tree structure. That article is really interesting, but the adopted solution requires to create a wrapper for every structure you need to iterate into and I decided to spend a couple of minutes to verify how difficult is writing a generic solution.</description></item><item><title>Create a tree flatten function to support LINQ queries</title><link>https://www.codewrecks.com/post/old/2011/03/create-a-tree-flatten-function-with-linq/</link><pubDate>Thu, 31 Mar 2011 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/create-a-tree-flatten-function-with-linq/</guid><description>Quite often I deal with tree structures where each node can contains a set of children nodes. When is time to cycle through all the nodes, to execute some logic, you need to write a standard recursive function, an operation that is quite boring and repetitive. The question is, is it possible to write a LINQ function called Flatten() that permits you to flatten down a tree of arbitrary depth down to an IEnumerable&amp;lt;T&amp;gt;?</description></item><item><title>Linq distinct with lambda</title><link>https://www.codewrecks.com/post/old/2011/01/linq-distinct-with-lambda/</link><pubDate>Tue, 18 Jan 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/01/linq-distinct-with-lambda/</guid><description>Linq Distinct function accepts an IEqualityComparer&amp;lt;T&amp;gt; used to compare values of the IEnumerable to remove equal objects to implement the Distinct() function. Sometimes it is more useful to specify a simple Func&amp;lt;T, T, Boolean&amp;gt;, a simple predicate that will implement the concept of Equality between elements. To support such a scenario you can write this simple Extension method.
1 2 3 4 5 6 public static IEnumerable&amp;lt;T&amp;gt; Distinct&amp;lt;T&amp;gt;( this IEnumerable&amp;lt;T&amp;gt; source, Func&amp;lt;T, T, Boolean&amp;gt; comparer) { return new DistinctByLambda&amp;lt;T&amp;gt;(comparer, source); } All the work is done by the DistinctByLambda class, that accepts a reference to the original IEnumerable sequence of elements and the predicate to verify for equality.</description></item><item><title>Linq provider via IEnumerable</title><link>https://www.codewrecks.com/post/old/2009/11/linq-provider-via-ienumerable/</link><pubDate>Fri, 20 Nov 2009 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/linq-provider-via-ienumerable/</guid><description>If you ever tried to implement a linq provider, you know that this is not a simple task. This is true for a full linq provider, but sometimes we need only a basic support, and in these situations there is probably a simpler approach.
Suppose you need to give LINQ support to find user in Active Directory via LDAP, you need to make query for the various properties of the User object, and you need also to make change to some of these properties and propagate those changes back in the AD.</description></item><item><title>Expression tree to the rescue</title><link>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</link><pubDate>Mon, 27 Jul 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</guid><description>I have a little validation library that must support localized error messages, it uses a simple techniques, when you set an error message for a specific validator, if you do not want localization you can simply pass a single string, but if you want message to be localized, you specified two strings, one is the name of the resource that contains the message and the other is the key of the message.</description></item><item><title>Entity Framework first steps</title><link>https://www.codewrecks.com/post/old/2009/01/entity-framework-first-steps/</link><pubDate>Thu, 08 Jan 2009 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/entity-framework-first-steps/</guid><description>For those used to ORM like NHibernate, the approach to Entity Framework is quite simple, but I’ve noticed that for people that never heard of ORM in general, EF tends to create some confusion.
I see people that make confusion between LINQ and EF, LINQ is the Language Integrated Query, it can be used to query objects in memory, XML, NHibernate and of course EF, but is not the only way to query EF.</description></item><item><title>Extend BindingList with filter functionality</title><link>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</link><pubDate>Sat, 22 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</guid><description>If you still work with windows forms and cannot move all of your projects to WPF, you probably gets annoyed by the limitation of the standard BindingList&amp;lt;T&amp;gt; included in the framework. In an old post I showed how can you create a specialized BindingList&amp;lt;T&amp;gt; to support generic Find() thanks to reflection, but this is not enough.
Another annoying limitation is that BindingList does not support IBindingListView. For those that does not knows this interface, it is the one used by the windows forms binding engine to support filtering and advanced sorting.</description></item><item><title>Dynamic Linq expression generator</title><link>https://www.codewrecks.com/post/old/2008/11/dynamic-linq-expression-generator/</link><pubDate>Wed, 19 Nov 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/dynamic-linq-expression-generator/</guid><description>Some time ago I read this post that speaks about dynamic query library. I downloaded the code sample, it is interesting, but is bound to Linq to Sql, now I need an implementation of a Dynamic Linq Query generator. Since I already worked in the past with expression parser and I have some generic Infix to postfix converter in a three hours of work I was able to put everything in a project and now I can write</description></item><item><title>Validate HTML input with Linq2XML</title><link>https://www.codewrecks.com/post/old/2008/11/validate-html-input-with-linq2xml/</link><pubDate>Mon, 17 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/validate-html-input-with-linq2xml/</guid><description>Suppose you have a very simple page where user can add comments to an issue, user can enter plain text and also they can use th HTML tag &amp;lt;b&amp;gt; to render in bold some text. In the example code you can see a very simple implementation (default.aspx). It use a xml file for back end storage (so you can run the example without a database) and in Default.aspx all the text that was entered by the user was stored in a CData section of the XML STorage file.</description></item><item><title>Faster invoke method of unknown objects with Expression tree part2</title><link>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</link><pubDate>Mon, 06 Oct 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</guid><description>In the last post I described a technique that uses Expression Tree to invoke dynamically methods of objects of types unknown at compile time. You can use this technique to build the ExpressionTreeReflection class.
You can now write code like this
1 2 3 4 5 6 7 8 private static readonly Type suType = Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;); private static readonly Object suInstance = Activator.CreateInstance(Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;)); [Test] public void TestFuncNoArgInt32() { Func&amp;lt;Object, Int32&amp;gt; func = ExpressionTreeReflection.</description></item><item><title>Mix Linq2XML and XPath take the best from both</title><link>https://www.codewrecks.com/post/old/2008/09/mix-linq2xml-and-xpath-take-the-best-from-both/</link><pubDate>Fri, 05 Sep 2008 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/mix-linq2xml-and-xpath-take-the-best-from-both/</guid><description>I must admit that LINQ 2 Xml impressed me very much, I’m actually using it to modify docx documents with the OpenXml sdk. While Linq 2 xml is really useful to makes query and find nodes in xml, I found it rather clumsy in my unit test code. Ex.
I’m writing a test that must verify if my table class correctly generate the header. In openXml format the header is simply created with a w:tblHeader node in the first w:tr (the first row) element of a table.</description></item><item><title>LINQ2XMl and namespaces</title><link>https://www.codewrecks.com/post/old/2008/09/linq2xml-and-namespaces/</link><pubDate>Mon, 01 Sep 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/linq2xml-and-namespaces/</guid><description>In Xml namespace are used extensively to distinguish between tag names, you can use namespaces directly with XElement class thanks to the XNamespace class, here is an example.
1 2 3 4 5 XNamespace ns = XNamespace.Get(&amp;#34;http://www.nablasoft.com/mynamespace&amp;#34;); XElement element = new XElement(ns + &amp;#34;root&amp;#34;, new XElement(ns + &amp;#34;Element&amp;#34;), new XElement(&amp;#34;AnotherElement&amp;#34;)); Console.WriteLine(element.ToString()); This code works but the output is quite clumsy.
1 2 3 4 &amp;lt;root xmlns=&amp;#34;http://www.</description></item><item><title>Lambda Lover 8211 argument parser</title><link>https://www.codewrecks.com/post/old/2008/08/lambda-lover-argument-parser/</link><pubDate>Wed, 20 Aug 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/lambda-lover-argument-parser/</guid><description>There are a lot of situations where LINQ and Lambda expressions can make your code simpler to write and also simpler to read. Today I stumble across an extension of a really old project. This project pass one parameter to a function, and this parameter is a list of comma separated BlockName. Despite the business meaning of a BlockName, I need an extension that permits also to add specific parameters to the block name, so we decided to use a syntax like:</description></item><item><title>LINQ SingleOrDefault and NullObject</title><link>https://www.codewrecks.com/post/old/2008/08/linq-singleordefault-and-nullobject/</link><pubDate>Wed, 20 Aug 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-singleordefault-and-nullobject/</guid><description>Suppose you have this simple class (has no business meaning is valid only as example)
1 2 3 4 5 6 7 8 9 10 public class MyObject { public static MyObject NullValue = new MyObject() { Value = -100, Name = String.Empty }; public Int32 Value { get; set; } public String Name { get; set; } public string Greet() { return &amp;#34;Hey!! My value is &amp;#34; + Value; } } It is a simple class with two properties and a method Greet().</description></item><item><title>LINQ and extending it with cross product</title><link>https://www.codewrecks.com/post/old/2008/08/linq-and-extending-it-with-cross-product/</link><pubDate>Wed, 13 Aug 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-and-extending-it-with-cross-product/</guid><description>Linq to object is really useful in a lot of places around my daily code. This afternoon I have to setup some routine to do crossproduct of some objects. With the term cross product I mean having two set, one made by elements of type X and the other made by elements of type Y, all that I need is creating a new set that contains an element of type Z from every combination of these two set.</description></item><item><title>LINQ ForEach for IEnumerableltTgt</title><link>https://www.codewrecks.com/post/old/2008/08/linq-foreach-for-ienumerablet/</link><pubDate>Wed, 13 Aug 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-foreach-for-ienumerablet/</guid><description>It seems to me strange that LINQ does not define an extension method ForEach to apply some Action&amp;lt;T&amp;gt; on an IEnumerable&amp;lt;T&amp;gt;. Array and List both have ForEach() method, and IEnumerable really miss it a lot, but fortunately implementing it is a matter of few lines of code.
1 2 3 4 5 6 7 public static IEnumerable&amp;lt;T&amp;gt; ForEach&amp;lt;T&amp;gt;( this IEnumerable&amp;lt;T&amp;gt; source, Action&amp;lt;T&amp;gt; act) { foreach (T element in source) act(element); return source; } I decided to make the ForEach&amp;lt;T&amp;gt; return the original list, so I can use with chaining in fluent interface, but you can also make it return void, thus restricting its use only at the end of a linq chain.</description></item><item><title>Get great amount of data with T-SQL for xml</title><link>https://www.codewrecks.com/post/old/2008/05/get-great-amount-of-data-with-t-sql-for-xml/</link><pubDate>Thu, 08 May 2008 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/get-great-amount-of-data-with-t-sql-for-xml/</guid><description>I’m creating some big xml files to test performance of linq to xml to make some PoC. I use simply the ForXml to extract data from Customer and Orders table of northwind database, The first Xml is 517 Kb, but I need really bigger file.
The trick is simple I created another table called insertHelper that contain a single column, and I filled with numbers from 1 to 100:</description></item><item><title>Linq to SQl Deferred or not</title><link>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-deferred-or-not/</link><pubDate>Wed, 23 Apr 2008 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-deferred-or-not/</guid><description>One of the most peculiar characteristic of Linq is Deferred execution, here is an example.
1 2 3 4 5 6 7 8 9 10 11 IEnumerable&amp;lt;Customer&amp;gt; result = from c in context.Customers where c.ContactName.StartsWith(&amp;#34;Maria&amp;#34;) select c; foreach (Customer c in result) { Console.WriteLine(&amp;#34;Id = {0} ContactName = {1}&amp;#34;, c.Id, c.ContactName); } ExecuteStatementInDb(&amp;#34;UPDATE Customers Set ContactName = &amp;#39;Modified&amp;#39; where CustomerId = &amp;#39;ALFKI&amp;#39;&amp;#34;); foreach (Customer c in result) { Console.WriteLine(&amp;#34;Id = {0} ContactName = {1}&amp;#34;, c.</description></item><item><title>LINQ Manage the DataContext</title><link>https://www.codewrecks.com/post/old/2008/04/linq-manage-the-datacontext/</link><pubDate>Tue, 22 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-manage-the-datacontext/</guid><description>One of the most important stuff, when dealing with an orm, is to manage the lifecycle of the Context, call it Session in NHibernate or DataContext in Linq, the problem is the same. One of the most obvious solution is to store the Context in CallContext of System.Runtime.Remoting.Messaging object. This object permits to store object related to the current flow of execution, it is similar to store objects in thread local storage, but is not the same, it is in fact used to manage HttpContext in asp.</description></item><item><title>LINQ to Sql retrieving Entities with stored or custom SQL</title><link>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-retrieving-entities-with-stored-or-custom-sql/</link><pubDate>Sat, 19 Apr 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-retrieving-entities-with-stored-or-custom-sql/</guid><description>During Heroes launch in Ancona (Italy) one of my friend ask me if there is the possibility in LINQ to SQL to map a stored procedure to a method of an object and then have that method return Mapped Entities.
Let’s give an asnwer to this question. The first thing to notice is that the DataContext is able to do this, you can for example creates a stored called GetGoldCustomer on northwind database, having this stored accept an integer parameter called @ordercount, and returns all field from customer for customer that had more than @ordercount orders.</description></item><item><title>Entity Framework and Eager Load</title><link>https://www.codewrecks.com/post/old/2008/04/entity-framework-and-eager-load/</link><pubDate>Wed, 16 Apr 2008 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/entity-framework-and-eager-load/</guid><description>If you want to Eager Load a relation in entity framework, you can use the Include() method in LINQ to Entities, but the include is useful even With EntitySQl and object services, but the syntax is something that violates the principle of least surprise for me.
I started with:
1 2 3 4 ObjectQuery&amp;lt;Department&amp;gt; query = conn.CreateQuery&amp;lt;Department&amp;gt;( &amp;#34;Select value d from Department AS d where d.Name = @name&amp;#34;); query.Parameters.Add(new ObjectParameter(&amp;#34;name&amp;#34;, &amp;#34;Economics&amp;#34;)); query.</description></item><item><title>Expression Tree Visualizer</title><link>https://www.codewrecks.com/post/old/2008/04/expression-tree-visualizer/</link><pubDate>Thu, 10 Apr 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/expression-tree-visualizer/</guid><description>Microsoft created for you an expression tree visualizer, it is contained into the C# Samples pack and it is very useful. The only thing that I do not like very much is that it give you too much information, and it is quite confused to really understand how the expression is formed. To address the problem I created another visualizer based on my expression tree dumper I made last month. You can install both visualizer as you can see from this picture</description></item></channel></rss>