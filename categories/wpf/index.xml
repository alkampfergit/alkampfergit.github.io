<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WPF on Codewrecks</title><link>https://www.codewrecks.com/categories/wpf/</link><description>Recent content in WPF on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 29 Apr 2014 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/wpf/index.xml" rel="self" type="application/rss+xml"/><item><title>Sorting a WPF ListView in Grid Mode</title><link>https://www.codewrecks.com/post/old/2014/04/sorting-a-wpf-listview-in-grid-mode/</link><pubDate>Tue, 29 Apr 2014 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/04/sorting-a-wpf-listview-in-grid-mode/</guid><description>&lt;p>There is &lt;strong>an&lt;/strong> &lt;a href="http://msdn.microsoft.com/en-us/library/ms745786.aspx">&lt;strong>article on MSDN&lt;/strong>&lt;/a> &lt;strong>that demonstrates how to enable sorting column for a ListView used with Grid layout&lt;/strong>. The solution presented there works perfectly, but &lt;strong>I do not want to put code behind my windows, because I work with MVVM approach&lt;/strong>. The solution is wrapping everything in a behavior, so I took the code from original MSDN example and I wrapped inside a behavior.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ListViewGridSortableBehavior&lt;/span> : Behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> OnAttached()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (AssociatedObject != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AssociatedObject.AddHandler(GridViewColumnHeader.ClickEvent, &lt;span style="color:#66d9ef">new&lt;/span> RoutedEventHandler(GridHeaderClickEventHandler));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">base&lt;/span>.OnAttached();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GridViewColumnHeader _lastHeaderClicked = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListSortDirection _lastDirection = ListSortDirection.Ascending;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> GridHeaderClickEventHandler(&lt;span style="color:#66d9ef">object&lt;/span> sender, RoutedEventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GridViewColumnHeader headerClicked =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.OriginalSource &lt;span style="color:#66d9ef">as&lt;/span> GridViewColumnHeader;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ListSortDirection direction;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (headerClicked != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (headerClicked.Role != GridViewColumnHeaderRole.Padding)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (headerClicked != _lastHeaderClicked)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction = ListSortDirection.Ascending;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_lastDirection == ListSortDirection.Ascending)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction = ListSortDirection.Descending;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction = ListSortDirection.Ascending;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_lastHeaderClicked != &lt;span style="color:#66d9ef">null&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortDownVisibility(_lastHeaderClicked, Visibility.Collapsed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortUpVisibility(_lastHeaderClicked, Visibility.Collapsed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//string header = headerClicked.Column.Header as string;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String sortString = GetSortHeaderString(headerClicked);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (String.IsNullOrEmpty(sortString)) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sort(sortString, direction);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (direction == ListSortDirection.Ascending)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortDownVisibility(headerClicked, Visibility.Collapsed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortUpVisibility(headerClicked, Visibility.Visible);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortDownVisibility(headerClicked, Visibility.Visible);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetSortUpVisibility(headerClicked, Visibility.Collapsed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Remove arrow from previously sorted header &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_lastHeaderClicked != &lt;span style="color:#66d9ef">null&lt;/span> &amp;amp;amp;&amp;amp;amp; _lastHeaderClicked != headerClicked)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _lastHeaderClicked.Column.HeaderTemplate = &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _lastHeaderClicked = headerClicked;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _lastDirection = direction;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Sort(&lt;span style="color:#66d9ef">string&lt;/span> sortBy, ListSortDirection direction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ICollectionView dataView =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CollectionViewSource.GetDefaultView(AssociatedObject.ItemsSource);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataView.SortDescriptions.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SortDescription sd = &lt;span style="color:#66d9ef">new&lt;/span> SortDescription(sortBy, direction);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataView.SortDescriptions.Add(sd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataView.Refresh();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> DependencyProperty SortHeaderStringProperty =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DependencyProperty.RegisterAttached
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SortHeaderString&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(String),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(GridViewColumnHeader),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> UIPropertyMetadata(String.Empty)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String GetSortHeaderString(DependencyObject obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (String)obj.GetValue(SortHeaderStringProperty);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> SetSortHeaderString(DependencyObject obj, String &lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.SetValue(SortHeaderStringProperty, &lt;span style="color:#66d9ef">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> DependencyProperty SortDownVisibilityProperty =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DependencyProperty.RegisterAttached
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SortDownVisibility&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(Visibility),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(GridViewColumnHeader),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> UIPropertyMetadata(Visibility.Collapsed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Visibility GetSortDownVisibility(DependencyObject obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (Visibility)obj.GetValue(SortDownVisibilityProperty);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> SetSortDownVisibility(DependencyObject obj, Visibility &lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.SetValue(SortDownVisibilityProperty, &lt;span style="color:#66d9ef">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> DependencyProperty SortUpVisibilityProperty =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DependencyProperty.RegisterAttached
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SortUpVisibility&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(Visibility),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typeof&lt;/span>(GridViewColumnHeader),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> UIPropertyMetadata(Visibility.Collapsed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Visibility GetSortUpVisibility(DependencyObject obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (Visibility)obj.GetValue(SortUpVisibilityProperty);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> SetSortUpVisibility(DependencyObject obj, Visibility &lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> obj.SetValue(SortUpVisibilityProperty, &lt;span style="color:#66d9ef">value&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The code is really simple, I just add and handler to the ClickEvent of the GridViewColumnHeader for the ListView and then used the code from MSDN example to do the sorting. I’ve added also a couple of Dependency Properties called SortDownVisibility and SortUpVisibility that determines the visibility of graphical indicator of the current sorting. &lt;strong>I also added a property called SortHeaderString that will contains the name of the property that should be used to sort.&lt;/strong> Thanks to this simple code I can simply enable sorting in XAML.&lt;/p></description></item><item><title>Change appearance of a control if the windows is maximized in WPF</title><link>https://www.codewrecks.com/post/old/2014/01/change-appearance-of-a-control-if-the-windows-is-maximized-in-wpf/</link><pubDate>Wed, 29 Jan 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/change-appearance-of-a-control-if-the-windows-is-maximized-in-wpf/</guid><description>&lt;p>Yesterday I was presented with an interesting question:&lt;/p>
&lt;p>&lt;em>How can I design a user control that change appearance when the windows containing it is maximized?&lt;/em>&lt;/p>
&lt;p>Thanks to WPF binding and Triggers the solution is simple, suppose you want to &lt;strong>create a border control that change thickness when the windows that contains this User Control is maximized&lt;/strong> , here is the code.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border&lt;/span> &lt;span style="color:#a6e22e">BorderBrush=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Black&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Left&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;124,54,0,0&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Top&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Width=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Border.Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style&lt;/span> &lt;span style="color:#a6e22e">TargetType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Border&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BorderThickness&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Style.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTrigger&lt;/span> &lt;span style="color:#a6e22e">Binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Path=WindowState}&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Maximized&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Setter&lt;/span> &lt;span style="color:#a6e22e">Property=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;BorderThickness&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTrigger&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style.Triggers&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border.Style&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Border&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The solution is using a simple style that determines the value for the BorderThickness property of the Border Control. The key part is that &lt;strong>I did not set an explicit value for BorderThickness in declaration of the control, but only in the style.&lt;/strong> This is necessary because value set at control level has higher priority than the style. The real power of WPF binding permits you to &lt;strong>bind to RelativeSource with FindAncestor where Type is a Window&lt;/strong>. That specific binding is really useful in a UserControl, because you cannot know any property name of containers, but it &lt;strong>is easy to find the first ancestor of type Window&lt;/strong>. Then you can simply create the trigger with this specific binding and change the property BorderThickness of the Border to 10 when the windows containing the user control gets maximized.&lt;/p></description></item><item><title>Open a windows in a specific monitor in full screen mode in a WPF application</title><link>https://www.codewrecks.com/post/old/2013/01/open-a-window-in-fullscreen-on-a-specific-monitor-in-wpf/</link><pubDate>Sat, 05 Jan 2013 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/01/open-a-window-in-fullscreen-on-a-specific-monitor-in-wpf/</guid><description>&lt;p>If you have a Multi Monitor setup in Windows and you want to open a WPF window in &lt;strong>fullscreen in a specific monitor you have no native option&lt;/strong> , but it is quite simple to obtain such functionality. First of all you need to reference Winform assembly, because you need winform code to identify information for screens setup in the current system.&lt;/p>
&lt;p>In my requirements I need to store the position of every view at the time of last usage, so I can restore its position when the user will open it a second time and I need to support fullscreen and multi-monitor setup.&lt;/p></description></item><item><title>Wpf Design Time Data part 3</title><link>https://www.codewrecks.com/post/old/2012/11/wpf-design-time-data-part-3/</link><pubDate>Fri, 30 Nov 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/11/wpf-design-time-data-part-3/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/10/22/wpf-design-time-data/">Wpf Design Time Data – An introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/11/07/wpf-and-design-time-data-part-2use-a-concrete-class-2/">Wpf and Design data, Use a concrete class&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you followed the suggestion of my first couple of posts &lt;em>you should have a dedicated Design Time view model for each real View Model in your application so you can effectively use Design Time Data&lt;/em>. You should be aware that &lt;strong>Design Time data can be directly manipulated by the designer&lt;/strong>. In property windows you can see all properties of the Windows object (remember to select the windows), so you can locate the DataContext property and expand it to view its content.&lt;/p></description></item><item><title>Survive binding of DataGrid in WPF</title><link>https://www.codewrecks.com/post/old/2012/11/survive-binding-of-datagrid-in-wpf/</link><pubDate>Fri, 23 Nov 2012 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/11/survive-binding-of-datagrid-in-wpf/</guid><description>&lt;p>DataGrid is one of the most annoying control in WPF because it sometimes has really different behaviors from other controls. The very first problem is that &lt;strong>inside DataGridColumns the DataContext is not what you expect&lt;/strong>. Suppose you have this simple scenario in MVVM: &lt;em>an ObservableCollection of Objects, each one has IsSelected property and you want to bind that property to a DataGridCheckBox column with a CheckBox in the header that permits you to Select all and Unselect all&lt;/em>.&lt;/p></description></item><item><title>Wpf And design time data part 2-Use a concrete class</title><link>https://www.codewrecks.com/post/old/2012/11/wpf-and-design-time-data-part-2use-a-concrete-class-2/</link><pubDate>Wed, 07 Nov 2012 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/11/wpf-and-design-time-data-part-2use-a-concrete-class-2/</guid><description>&lt;p>The approach to Design Time data &lt;a href="http://www.codewrecks.com/blog/index.php/2012/10/22/wpf-design-time-data/">shown in previous post&lt;/a> is really quick and useful for simple View Models, but in complex application it starts to have some drawback. One of the main problem is remembering the exact syntax to declare object in XAML; when View Models became complex you start to have ObservableCollection of sub ViewModel type, and maintaining design time data can become problematic. The other drawback is that &lt;strong>if you rename a property of the viewmodel and you forget to change corresponding design time data, it definition will become invalid&lt;/strong>.&lt;/p></description></item><item><title>SyncronizationContextCurrent is not null still not be able to access UI Controls in WPF</title><link>https://www.codewrecks.com/post/old/2012/10/syncronizationcontext-current-is-not-null-still-not-be-able-to-access-ui-controls-in-wpf/</link><pubDate>Mon, 29 Oct 2012 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/10/syncronizationcontext-current-is-not-null-still-not-be-able-to-access-ui-controls-in-wpf/</guid><description>&lt;p>As you probably already know, &lt;strong>you can access WPF controls only from a UI Thread and when I use MVVM each PropertyChanged message check for the need to execute on the UiThread to avoid cross-thread problems&lt;/strong>. Instead of using the Dispatcher in each property changed sometimes you can find code that does a little optimization like this one.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (SynchronizationContext.Current != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SynchronizationContext.Current.Send(&lt;span style="color:#66d9ef">delegate&lt;/span> { OnPropertyChanged(propertyName); }, &lt;span style="color:#66d9ef">null&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The above code simply &lt;strong>check if the Current synchronization Context is not null, if this condition is true, we are in a UI Thread&lt;/strong> so we can simply raise the OnPropertyChanged event directly in this thread (with the &lt;a href="http://msdn.microsoft.com/en-us/library/vstudio/system.threading.synchronizationcontext.send%28v=vs.100%29.aspx">Send&lt;/a> method), because it is associated with a UI and we have no need to use the Dispatcher. The else branch was omitted, but actually is a simple use of a saved instance of the UI Dispatcher to raise the property changed event on the WPF ui thread.&lt;/p></description></item><item><title>Wpf Design Time Data</title><link>https://www.codewrecks.com/post/old/2012/10/wpf-design-time-data/</link><pubDate>Mon, 22 Oct 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/10/wpf-design-time-data/</guid><description>&lt;p>A really cool aspect of WPF is the &lt;strong>ability to use DesignTimeData,&lt;/strong> a feature that added with MVVM pattern gives a unique DesignTime capabilities to programmer and designers. To use Design Time Data you can simply add a new xaml file and use the Build Action DesignData as visible in &lt;strong>Figure 1&lt;/strong> &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2012/10/image3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2012/10/image_thumb3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2012/10/image_thumb3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>A xaml file with the Build Action of type DesignData.&lt;/em>&lt;/p>
&lt;p>Now you can simply instantiate your ViewModel inside the code of Design Dat; in a simple LogViewer I have a ViewModel called RawLoggerViewModel that has various properties and I can simply instantiate it in DesignData file, because after all a XAML file is nothing than a serialized object XML representation&lt;/p></description></item><item><title>Browser control prevent a link to open in a new page</title><link>https://www.codewrecks.com/post/old/2012/10/browser-control-prevent-a-link-to-open-in-a-new-page/</link><pubDate>Wed, 17 Oct 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/10/browser-control-prevent-a-link-to-open-in-a-new-page/</guid><description>&lt;p>Working with BrowserControl in.NET can be annoying, especially because it is a really complex control and it is a real browser inside your application. As an example &lt;strong>one of the most common problem is how to prevent a page to open links in a new window&lt;/strong>. Lot of sites have anchor tags with attribute &lt;em>Target=”_blank”, that opens the link on a new tab&lt;/em>, leaving the original tab with the original content (es. forum, blog search result, etc).&lt;/p></description></item><item><title>FlowDocumentScrollViewer and horizontal stretch</title><link>https://www.codewrecks.com/post/old/2012/07/flowdocumentscrollviewer-and-horizontal-stretch/</link><pubDate>Tue, 24 Jul 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/flowdocumentscrollviewer-and-horizontal-stretch/</guid><description>&lt;p>Quite often when you use &lt;strong>FlowDocumentScrollViewer it does not use all horizontal space, even if the container is large enough&lt;/strong>. Here is the declaration of my FlowDocumentScrollViewer&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;FlowDocumentScrollViewer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Background=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalScrollBarVisibility=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hidden&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stretch&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HorizontalContentAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stretch&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Height=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;100&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Document=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Converter={converter:HtmlToDocumentConverter}}&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span> &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see I’ve set both HorizontalAlignment and HorizontalContentAlignment to Stretch, the document is inside a Grid with yellow background and here is what I see during run and in designer.&lt;/p></description></item><item><title>ConventionalCommand in MVVM architecture</title><link>https://www.codewrecks.com/post/old/2012/07/conventionalcommand-in-mvvm-architecture/</link><pubDate>Sat, 14 Jul 2012 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/conventionalcommand-in-mvvm-architecture/</guid><description>&lt;p>The original idea of ConventionalCommand was taken by &lt;a href="http://radical.codeplex.com/">Radical Framework&lt;/a> of my dear friend &lt;a href="http://milestone.topics.it/">Mauro&lt;/a>, the purpose is &lt;strong>using a Convention over Configuration to bind Ui element to Commands in a MVVM architecture&lt;/strong>. You can find a real good and complete implementation of this concept in Radical, but I created a custom smaller and trivial stand-alone implementation to use in some of my project based on custom MVVM architecture. If you need a more robust and mature implementation I suggest you to have a look at Radical, but if you already have some custom code and you do not want to introduce dependency to an entire library only to use this concept I will show you how simple is to create a &lt;strong>Command object that is capable to binding to MVVM methods based on Conventions&lt;/strong>.&lt;/p></description></item><item><title>Wpf DataGrid poor performance on sorting</title><link>https://www.codewrecks.com/post/old/2012/07/wpf-datagrid-poor-performance-on-sorting/</link><pubDate>Fri, 06 Jul 2012 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/wpf-datagrid-poor-performance-on-sorting/</guid><description>&lt;p>I’ve a WPF View where with a simple &lt;strong>DataGrid that shows hundreds of rows&lt;/strong> , it all works fine until I added sorting capabilities; when I click on the header to sort content, it took almost 5 seconds to sort 500 elements, and this kind of performance is simply unacceptable. The first step was firing a profiler to understand &lt;em>where&lt;/em>  the code is slow, and I found this result.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/SNAGHTML969d89.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/SNAGHTML969d89_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/SNAGHTML969d89_thumb.png" alt="SNAGHTML969d89" />&lt;/a>&lt;/a>&lt;/p></description></item><item><title>How simple is creating UI in WPF</title><link>https://www.codewrecks.com/post/old/2012/06/how-simple-is-creating-ui-in-wpf/</link><pubDate>Sat, 23 Jun 2012 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/how-simple-is-creating-ui-in-wpf/</guid><description>&lt;p>I have this UI already working, it is a simple interface where users are presented with a list of Customers object, for each customers some feature could be enabled or not, so we have nice checkboxes to immediately enable/disable a feature with One Click.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2012/06/image3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2012/06/image_thumb3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2012/06/image_thumb3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Actual situation all the checkboxes are always enabled&lt;/em>&lt;/p>
&lt;p>But the very same form is used to edit customer details, so you need to select a row in the DataGrid and then started editing detailed information. Now the user want a little modification that permits to check various checkboxes only if the Customer row is selected, like shown in the following image&lt;/p></description></item><item><title>VS11 gives you a fantastic XAML Editor</title><link>https://www.codewrecks.com/post/old/2012/03/vs11-gives-you-a-fantastic-xaml-editor/</link><pubDate>Fri, 16 Mar 2012 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/vs11-gives-you-a-fantastic-xaml-editor/</guid><description>&lt;p>XAML editing in Visual Studio 2010 is not one of the most exiting experience you can have, it works, but compared to Blend it is really poor. One of the thing I really do not like is the lack of information on design time data. Since I really develop every XAML application with MVVM or MVVM like approach, I always have design time data and I’d like Visual Studio to be able to use it during binding operation.&lt;/p></description></item><item><title>Design time data in WPF and Blend with little effort</title><link>https://www.codewrecks.com/post/old/2012/01/design-time-data-in-wpf-and-blend-with-little-effort/</link><pubDate>Fri, 20 Jan 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/01/design-time-data-in-wpf-and-blend-with-little-effort/</guid><description>&lt;p>The power of WPF binding really shines when you use design time data to have a live preview of the aspect of your UI without the need to press F5 to load actual data. Design time data is a cool feature you can have with little effort, suppose you have a simple windows and you want to show a list of customers, taken from the northwind datadabase inside a Listbox, personlizing the DataTemplate.&lt;/p></description></item><item><title>Disable Javascript errors in WPF Web Browser Control take2</title><link>https://www.codewrecks.com/post/old/2011/11/disable-javascript-errors-in-wpf-web-browser-control-take2/</link><pubDate>Thu, 17 Nov 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/disable-javascript-errors-in-wpf-web-browser-control-take2/</guid><description>&lt;p>I’ve dealt with this problem &lt;a href="http://www.codewrecks.com/blog/index.php/2010/08/31/disable-javascript-error-in-wpf-webbrowser-control/">some time ago&lt;/a> and the solution I posted worked well, but requires you to manipulate the content of the page, injecting script on the DOM. If you want to get rid of annoying messagebox with javascript error, there is another solution based on simply setting the Silent property on the AXIWebBrowser2 COM control.&lt;/p>
&lt;p>The full solution &lt;a href="http://www.brentlamborn.com/post/WPF-Web-Browser-ScriptErrorsSupressed.aspx">was described here&lt;/a> by Brent Lamborn and is a pretty good solution that does not require you to manipulate the content of the DOM. The Silent property of the AXIWebBrowser2 control is probably the same Property that you can set through the &lt;em>ScriptErrorSuppressed&lt;/em>property of the winform version of WebBrowser control.&lt;/p></description></item><item><title>Write a PropertyViewer like control in WPF</title><link>https://www.codewrecks.com/post/old/2011/07/write-a-propertyviewer-like-control-in-wpf/</link><pubDate>Thu, 14 Jul 2011 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/write-a-propertyviewer-like-control-in-wpf/</guid><description>&lt;p>In WPF there is no &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.sqlserver.management.controls.propertyviewer.aspx">PropertyViewer&lt;/a> control, but if your need is simply to show a read-only list of all properties of an object, for dump purpose, you can obtain this with few lines of code. First of all write a special IValueConverter.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[ValueConversion(typeof(Object), typeof(ObservableCollection&amp;lt;PropertyInfo&amp;gt;))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PropertyViewerConverter&lt;/span> : IValueConverter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PropertyInfo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String PropertyName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String PropertyValue { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> PropertyInfo(&lt;span style="color:#66d9ef">string&lt;/span> propertyName, &lt;span style="color:#66d9ef">string&lt;/span> propertyValue)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PropertyName = propertyName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PropertyValue = propertyValue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> Convert(&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>, Type targetType, &lt;span style="color:#66d9ef">object&lt;/span> parameter, System.Globalization.CultureInfo culture)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> retvalue = &lt;span style="color:#66d9ef">new&lt;/span> ObservableCollection&amp;lt;PropertyInfo&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">value&lt;/span> != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> properties = &lt;span style="color:#66d9ef">value&lt;/span>.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> propertyInfo &lt;span style="color:#66d9ef">in&lt;/span> properties)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ PropertyInfo info;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> pvalue = propertyInfo.GetValue(&lt;span style="color:#66d9ef">value&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span>[] { }) ?? &lt;span style="color:#e6db74">&amp;#34;Null&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>info = &lt;span style="color:#66d9ef">new&lt;/span> PropertyInfo(propertyInfo.Name, pvalue.ToString());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span> (Exception ex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>info = &lt;span style="color:#66d9ef">new&lt;/span> PropertyInfo(propertyInfo.Name, &lt;span style="color:#e6db74">&amp;#34;Exception &amp;#34;&lt;/span> + ex.Message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>retvalue.Add(info);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> retvalue;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> ConvertBack(&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span>, Type targetType, &lt;span style="color:#66d9ef">object&lt;/span> parameter, System.Globalization.CultureInfo culture)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> NotImplementedException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The code is straightforward, the converter accepts an object and return an ObservableCollection of PropertyInfo, where propertyinfo is a simple class declared in the converter to hold name and value of the property. You can use this converter in a really simple way.&lt;/p></description></item><item><title>Quick reminder on How-To map items of a list view to a VM command</title><link>https://www.codewrecks.com/post/old/2011/06/quick-reminder-on-how-to-map-items-of-a-list-view-to-a-vm-command/</link><pubDate>Thu, 23 Jun 2011 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/quick-reminder-on-how-to-map-items-of-a-list-view-to-a-vm-command/</guid><description>&lt;p>The problem is really simple, but sometimes I see people tend to forget a little bit how the DataContext works in WPF and being stuck in wandering why a command is not invoked when a button inside a DataTemplate is pressed.&lt;/p>
&lt;p>Suppose you have a ListView bounds to a list of items called &lt;em>SingleResult&lt;/em>, for each SingleResult I have a complex layout and the main ViewModel contains a command that expect a SingleResult parameter called &lt;em>ShowDetails&lt;/em> that simply shows the details of a SingleResult item. I see people do binding in this way.&lt;/p></description></item><item><title>CanResizeWithGrip seems does not work in WPF</title><link>https://www.codewrecks.com/post/old/2011/06/canresizewithgrip-seems-does-not-work-in-wpf/</link><pubDate>Tue, 21 Jun 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/canresizewithgrip-seems-does-not-work-in-wpf/</guid><description>&lt;p>I have an application that is built with a Metro-Like UI, so each windows has no border and can be resized with the ResizeMode equal to CanResizeWithGrip.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image13.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb13.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb13.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>The windows can be resized by a little grip on the bottom right border of the window&lt;/em>&lt;/p>
&lt;p>I created another view, use a similar layout from the preceding one, but this time the little grip to resize the windows does not appear in the windows.&lt;/p></description></item><item><title>Manipulate a FlowDocument in WPF</title><link>https://www.codewrecks.com/post/old/2011/06/manipulate-a-flowdocument-in-wpf/</link><pubDate>Mon, 20 Jun 2011 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/manipulate-a-flowdocument-in-wpf/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/files/wpfflowdocument.zip">Sample Code is Here.&lt;/a>&lt;/p>
&lt;p>This is the scenario: I have a &lt;a href="http://msdn.microsoft.com/en-us/library/ms601064.aspx">FlowDocument&lt;/a> in a FlowDocumentScrollViewer as in Figure 1.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image20.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb20.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb20.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Initial scenario, a simple flow document.&lt;/em>&lt;/p>
&lt;p>My goal is to be able to highlight some words in the document and show some detailed info about highlighted word to the user. It turns out after some experiments that the code is quite simple. In the first part of the snippet I search content inside the Paragraph.&lt;/p></description></item><item><title>Witch version of browser is used by the WebBrowser control</title><link>https://www.codewrecks.com/post/old/2011/06/witch-version-of-browser-is-used-by-the-webbrowser-control/</link><pubDate>Mon, 06 Jun 2011 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/witch-version-of-browser-is-used-by-the-webbrowser-control/</guid><description>&lt;p>This question seems to have a simple answer, the &lt;em>WebBrowser control&lt;/em>uses the version of Internet Explorer currently installed on the system, but you could be surprised running a simple program with a WebBrowser control and navigating to a site like &lt;a href="http://www.chisono.it">www.chisono.it&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/06/image_thumb6.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>This answer can surprise you, because I have IE9 installed, but the WebBrowser control seems to use the IE7 engine, and you can verify running an acid test (&lt;a href="http://acid3.acidtests.org/" title="http://acid3.acidtests.org/">http://acid3.acidtests.org/&lt;/a>) that this is indeed not only a problem of UserAgent, but the rendering engine is not of IE9&lt;/p></description></item><item><title>Event to Command in WPF MVVM application</title><link>https://www.codewrecks.com/post/old/2011/05/event-to-command-in-wpf-mvvm-application/</link><pubDate>Wed, 04 May 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/event-to-command-in-wpf-mvvm-application/</guid><description>&lt;p>I needed a simple way to obtain this simple result: whenever a certain component in the UI (a WebBrowser control) raises some specific event, I want a command in the VM to be executed, without the need to specify any command parameter. The only requirement I want is avoiding a single line of code in the UI :) because, having no code in the UI is one of the main benefit of the MVVM model.&lt;/p></description></item><item><title>Loving MMVM and asynchronous operations</title><link>https://www.codewrecks.com/post/old/2011/04/loving-mmvm-and-asynchronous-operations/</link><pubDate>Thu, 21 Apr 2011 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/loving-mmvm-and-asynchronous-operations/</guid><description>&lt;p>I&amp;rsquo;m using in a project a modified version of MVVM in WPF originally made by my dear friend &lt;a href="http://www.topics.it/">Mauro&lt;/a> (check his project &lt;a href="http://radical.codeplex.com/">Radical&lt;/a>, it is really cool). Actually I use a custom DelegateCommand to handle communication between View and the View Model. Here is a sample snippet on how I initialize a command in View Model.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>SaveCurrent = DelegateCommand.Create()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.OnCanExecute(o =&amp;gt; &lt;span style="color:#66d9ef">this&lt;/span>.SelectedLinkResult != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.TriggerUsing(PropertyChangedObserver.Monitor(&lt;span style="color:#66d9ef">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.HandleChangesOf(vm =&amp;gt; vm.SelectedLinkResult))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.OnExecute(ExecuteSaveCurrent);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This works but I need to solve a couple of problems.&lt;/p></description></item><item><title>WPF binding a text with decoration</title><link>https://www.codewrecks.com/post/old/2011/04/wpf-binding-a-text-with-decoration/</link><pubDate>Tue, 19 Apr 2011 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/wpf-binding-a-text-with-decoration/</guid><description>&lt;p>Suppose you need to show some decorated text in a MVVM WPF application, something like&lt;/p>
&lt;p>2, &lt;strong>9&lt;/strong> , &lt;strike>16 &lt;/strike>Dicembre 2011&lt;/p>
&lt;p>And all the decorations are inserted by some business logic, for example bold if a value is greater than X, strikethrough if the value is less than Y, or similar logic. I want the interface as clean as possible, and moreover I do not know in advance how many numbers will be in the string.&lt;/p></description></item><item><title>A tale of WPF flowDocument Html and more</title><link>https://www.codewrecks.com/post/old/2011/03/a-tale-of-wpf-flowdocument-html-and-more/</link><pubDate>Wed, 23 Mar 2011 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/a-tale-of-wpf-flowdocument-html-and-more/</guid><description>&lt;p>I have a WPF interface where I need to show an image embedded in a text, but the main problem is that the text is in HTML. First of all I found the &lt;a href="http://blogs.msdn.com/b/wpfsdk/archive/2006/05/25/606317.aspx">HtmlToXamlConverter&lt;/a> that can convert an HTML fragment of text into XAML Paragraph. This is a good starting point, but I want to create something reusable (such an interface is used in various part of the software)&lt;/p>
&lt;p>I decided to write a custom control that inherits from &lt;a href="http://msdn.microsoft.com/en-us/library/ms610538%28v=VS.90%29.aspx">FlowDocumentScrollViewer&lt;/a> and has another Dependency property used to specify the HTML text to show.&lt;/p></description></item><item><title>MVVM Broker Castle Interceptor FUN</title><link>https://www.codewrecks.com/post/old/2011/02/mvvm-broker-castle-interceptor-fun/</link><pubDate>Fri, 25 Feb 2011 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/mvvm-broker-castle-interceptor-fun/</guid><description>&lt;p>Scenario: have a WPF application based on custom MVVM + Broker + Castle, the users told us that some operations took long time to accomplish and they want a wait cursor on the application.&lt;/p>
&lt;p>Resolution: Since all long operations are triggered with event handled by a Broker system, the obvious solution is an interceptor&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WaitCursorInterceptor&lt;/span> : IInterceptor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> IWpfSystem _wpfSystem;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> WaitCursorInterceptor(IWpfSystem wpfSystem)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_wpfSystem = wpfSystem;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Intercept(IInvocation invocation)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (_wpfSystem.SetWaitCursor())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>invocation.Proceed();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This depends on the IWpfSystem interface that has this function to change the cursor of the application&lt;/p></description></item><item><title>Filtering in MVVM architecture</title><link>https://www.codewrecks.com/post/old/2011/02/filtering-in-mvvm-architecture/</link><pubDate>Wed, 23 Feb 2011 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/filtering-in-mvvm-architecture/</guid><description>&lt;p>Wpf has great filtering capabilities based on &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.collectionviewsource.aspx">CollectionViewSource&lt;/a> class, but how can we use effectively in MVVM architecture? First of all we need to decide who has the responsibility of filtering data, and clearly the answer is: the ViewModel. VM  usually exposes an ObservableCollection&amp;lt;T&amp;gt; property for collections of items, the view bind to it and everything goes smooth, until you need to set a filter on it. A possible solution is to grab a reference to an ICollectionView in the viewmodel and manipulate that object&lt;/p></description></item><item><title>Save last location of windows with MVVM</title><link>https://www.codewrecks.com/post/old/2011/02/save-last-location-of-windows-with-mvvm/</link><pubDate>Thu, 17 Feb 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/save-last-location-of-windows-with-mvvm/</guid><description>&lt;p>I&amp;rsquo;ve a WPF project composed of multiple Views, especially targeted to use multi monitor; the user should be able to position each view around multiple monitors. One of the key requirements is that the software should be able to keep track of the position of all the views to automatically position them in the very same position on opening.&lt;/p>
&lt;p>Thanks to MVVM architecture obtaining this result is really simple because we can handle and test the whole logic inside a base viewmodel. I started with the creation of an object that could contain all values to reposition a windows&lt;/p></description></item><item><title>WPF binding capabilities always surprised me</title><link>https://www.codewrecks.com/post/old/2011/02/wpf-binding-capabilities-always-surprised-me/</link><pubDate>Wed, 16 Feb 2011 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/wpf-binding-capabilities-always-surprised-me/</guid><description>&lt;p>WPF has really powerful binding feature and sometimes can save you a lot of time. I have a project where the DAL returned me a series of object properties in Dictionary&amp;lt;String,String&amp;gt; objects, and in a MVVM world I should create a suitable UI object with a  property for each dictionary entry, to implement INotifyPropertyChanged etc etc.&lt;/p>
&lt;p>But since data does not change outside of the ui, I really do not need to implement the notification, and since the dictionary has a lot of elements (&amp;gt; 30) writing the ui objects will be really annoying. The solution is really simple, you can bind directly to a DictionaryProperty.&lt;/p></description></item><item><title>Create circular listview in wpf</title><link>https://www.codewrecks.com/post/old/2011/02/create-circular-listview-in-wpf/</link><pubDate>Thu, 10 Feb 2011 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/create-circular-listview-in-wpf/</guid><description>&lt;p>In my little Wpf &lt;a href="http://www.codewrecks.com/blog/index.php/2010/12/20/wpf-listview-with-better-touch-support/">ListView with better touch support&lt;/a> I had the need to support the concept of circular scrolling. What I want is the ability to scroll elements continuously, as if the list was circular; if I have 5 elements, from 0 to 4 I want to scroll left from the element 4 to the element 0.&lt;/p>
&lt;iframe title="YouTube video player" height="390" src="http://www.youtube.com/embed/-YQxxyCUNLo" frameborder="0" width="480" allowfullscreen="allowfullscreen">&lt;/iframe>
&lt;p>As you can see in this short video the listview appears not to have an end and we can scroll how many elements we want. This is a trick or an illusion and is obtained with a  little support from the viewmodel. This KineticListView was bound to a peculiar property of the ViewModel&lt;/p></description></item><item><title>Remove one pixel white border from WPF listview</title><link>https://www.codewrecks.com/post/old/2011/02/remove-one-pixel-white-border-from-wpf-listview/</link><pubDate>Tue, 01 Feb 2011 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/remove-one-pixel-white-border-from-wpf-listview/</guid><description>&lt;p>I used my &lt;a href="http://kineticlistview.codeplex.com/">kineticlistview&lt;/a> in one project, and I noticed that it has a nasty white border around the content, but when I change back the control to standard ListView I noticed that the border remains.&lt;/p>
&lt;p>This means that this is standard behavior of the ListView, but it is inacceptable on this project where I use the ListView to show pictures.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/02/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/02/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/02/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>Now you can simply go to blend, right click the ListView and choose to edit the template&lt;/p></description></item><item><title>Blend Visual Studio and compile in x86</title><link>https://www.codewrecks.com/post/old/2011/01/blend-visual-studio-and-compile-in-x86/</link><pubDate>Fri, 21 Jan 2011 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/01/blend-visual-studio-and-compile-in-x86/</guid><description>&lt;p>I have a WPF project where I need to compile in x86 because it uses the Gecko Browser that works only in x86 mode, and this causes an annoying problem with Blend. I usually keep VS and Blend togheter, in VS I change ViewModels and do everything not related to the UI, when I need to change the UI I simply switch to blend.&lt;/p>
&lt;p>The problem is, Blend looks only in the bin\Debug folder, so when I add a Command or property to the viewmodel I compile the project, switch to blend&amp;hellip; and I&amp;rsquo;m not able to see the new property or command. As far as I know the only solution I found, is to change the output folder of the project.&lt;/p></description></item><item><title>Release Message handlers from the Broker</title><link>https://www.codewrecks.com/post/old/2011/01/release-message-handlers-from-the-broker/</link><pubDate>Thu, 20 Jan 2011 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/01/release-message-handlers-from-the-broker/</guid><description>&lt;p>Some time ago I blogged about a &lt;a href="http://www.codewrecks.com/blog/index.php/2010/07/26/primitive-broker-class/">primitive Broker class&lt;/a> to manage messaging between View Models in a simple custom MVVM infrastructure. Since my Broker basically accepts delegates and manage calling them with the right message, it is quite important for ViewModels to remove all registered handler. This is especially important because Broker is a singleton, and if some ViewModel forgets to unregister some messages, the Broker will keep reference to member functions, thus keeping the ViewModel alive forever.&lt;/p></description></item><item><title>Consistency from WPF and GDI in creating images from stream</title><link>https://www.codewrecks.com/post/old/2010/12/consistency-from-wpf-and-gdi-in-creating-images-from-stream/</link><pubDate>Tue, 28 Dec 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/consistency-from-wpf-and-gdi-in-creating-images-from-stream/</guid><description>&lt;p>If you have a Stream and want to create a simple GDI+ Bitmap you can write this simple code.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/SNAGHTML5424c0.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/SNAGHTML5424c0_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/SNAGHTML5424c0_thumb.png" alt="SNAGHTML5424c0" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>FromStream static method permits to easily build an Image from a Stream&lt;/em>&lt;/p>
&lt;p>Bitmap object has a static method called FromStream, that is used to take a stream as input and creates an System.Drawing.Image as result, is easy and simple to use. In WPF you have a different object to represent images, the BitmapImage, and you can be really surprised to notice that it has no FromStream static method.&lt;/p></description></item><item><title>Wpf tab control when you have photoshop images</title><link>https://www.codewrecks.com/post/old/2010/12/wpf-tab-control-when-you-have-photoshop-images/</link><pubDate>Mon, 27 Dec 2010 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/wpf-tab-control-when-you-have-photoshop-images/</guid><description>&lt;p>I&amp;rsquo;m working on a project in WPF where there are a lot of skinning done in photoshop and in particular I have some Tab control with a really complex skinning of the tab part.&lt;/p>
&lt;p>Since I&amp;rsquo;m not a Blend guru, and since it could be really complex to reproduce with high fidelity in wpf all complex photoshop effects that are on the original files, and since we already have the photoshop work done, we decided to use the tab in more creative way.&lt;/p></description></item><item><title>Again on WebBrowser control in WPF and 64 bit issue</title><link>https://www.codewrecks.com/post/old/2010/12/again-on-webbrowser-control-in-wpf-and-64-bit-issue/</link><pubDate>Fri, 24 Dec 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/again-on-webbrowser-control-in-wpf-and-64-bit-issue/</guid><description>&lt;p>I blogged some time ago on how to &lt;a href="http://www.codewrecks.com/blog/index.php/2010/08/31/disable-javascript-error-in-wpf-webbrowser-control/">disable Javascript errors in Web Browser&lt;/a> control in WPF, the core part is injecting a script inside the page to suppress errors.&lt;/p>
&lt;p>But a problem arise when I use the browser in a 64 bit environment, because when it is time to inject script inside the HEAD element I got an error of invalid cast.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image_thumb2.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image_thumb2.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>An exception is raised because he could not cast elem to type HTMLHEadElementClass. Now I have 2 problems, the first is why in 64 it environment the MSHTML interop is changing the way it works returning me an object that implements a different set of COM interfaces, but I need also to know what kind of element I got in return asking for TagName (&lt;em>HEAD&lt;/em>).&lt;/p></description></item><item><title>Read and learn to use a tool instead of Try and learn</title><link>https://www.codewrecks.com/post/old/2010/12/read-and-learn-to-use-a-tool-instead-of-try-and-learn/</link><pubDate>Thu, 23 Dec 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/read-and-learn-to-use-a-tool-instead-of-try-and-learn/</guid><description>&lt;p>I&amp;rsquo;m a very noob Blend user &lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/wlEmoticon-smile1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/wlEmoticon-smile1.png" alt="Smile" />&lt;/a> and I learn it without reading or seeing any tutorial, just opened blend and begin to use it&amp;hellip; this is no good &lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/wlEmoticon-smile1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/wlEmoticon-smile1.png" alt="Smile" />&lt;/a> because I missed some basic features like for example that the grid can be put in Canvas or Grid mode&amp;hellip;&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image_thumb1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/12/image_thumb1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>The grid is in canvas mode, the upper left icon is reflecting this, but I did not know of this feature.. so bad&lt;/em>&lt;/p></description></item><item><title>MVVM and focus ListView element with complex template</title><link>https://www.codewrecks.com/post/old/2010/12/mvvm-and-focus-listview-element-with-complex-template/</link><pubDate>Wed, 22 Dec 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/mvvm-and-focus-listview-element-with-complex-template/</guid><description>&lt;p>This is the scenario: I have a complex object with a lot of properties, I created a user control in MVVM style to edit those properties, then in the main View I have a list of those objects, and I simply used a ListView control that uses the aforementioned user control as a template.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&amp;lt;DataTemplate x:Key=&lt;span style="color:#e6db74">&amp;#34;RilevazioneTemplate&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;Border BorderThickness=&lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span> BorderBrush=&lt;span style="color:#e6db74">&amp;#34;{Binding BorderBrush, Mode=OneWay}&amp;#34;&lt;/span> CornerRadius=&lt;span style="color:#e6db74">&amp;#34;8&amp;#34;&lt;/span> Margin=&lt;span style="color:#e6db74">&amp;#34;0,2&amp;#34;&lt;/span> Padding=&lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;Controls:RilevazioneForTreeEditor /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/Border&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/DataTemplate&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;ListView ItemTemplate=&lt;span style="color:#e6db74">&amp;#34;{DynamicResource RilevazioneTemplate}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Now the problem is the following one: when I use that ListView at runtime and I click on a texbox inside that user control, the SelectedItem of the ListView does not change, it changes only if I click on a empty part of the USerControl.&lt;/p></description></item><item><title>WPF ListView with better touch support</title><link>https://www.codewrecks.com/post/old/2010/12/wpf-listview-with-better-touch-support/</link><pubDate>Mon, 20 Dec 2010 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/wpf-listview-with-better-touch-support/</guid><description>&lt;p>I&amp;rsquo;ve the need to use a listview in a WPF project based on touch monitor, and the user needs to scroll element of listview horizontally and vertically, and each element should be a UserControl with a complex ui interface.&lt;/p>
&lt;p>I started with a couple of articles, &lt;a href="http://www.codeproject.com/KB/WPF/DraggableListView.aspx">this one&lt;/a> that shows a custom ListView based on the original ListView, and &lt;a href="http://blogs.claritycon.com/blogs/kevin_marshall/archive/2007/10/18/3332.aspx">that one&lt;/a> that shows an iPhone like ListView with kinetic movement. None of them satisfy my needs, but I used them as starting point to create my user control that permits me to satisfy the user need.&lt;/p></description></item><item><title>WPF MVVM and calculated properties</title><link>https://www.codewrecks.com/post/old/2010/12/wpf-mvvm-and-calculated-properties/</link><pubDate>Fri, 03 Dec 2010 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/wpf-mvvm-and-calculated-properties/</guid><description>&lt;p>Today I have to solve a situation like this one&lt;/p>
&lt;p>I have a ViewModel, with a  property of type X, and has a property called BorderBrush that is calculated based on a property Rank of X class. Building such a property is straighforward, but I need to put some logic inside the Viewmodel to monitor when the Property Rank is changed on X class to notify the interface that the property BorderBrush (that depends on Rank property of X) is also changed.&lt;/p></description></item><item><title>WebBrowser control and Gecko Browser control in a single UI</title><link>https://www.codewrecks.com/post/old/2010/10/webbrowser-control-and-gecko-browser-control-in-a-single-ui/</link><pubDate>Thu, 21 Oct 2010 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/webbrowser-control-and-gecko-browser-control-in-a-single-ui/</guid><description>&lt;p>I works quite often in last months with WPF programs that need to include a browser control, and the obvious choice is using WebBrowser control. In last days we need to use Gecko Browser, because we like the ability to customize it and to make possible for the user to look at a site with IE rendering or Firefox Rendering.&lt;/p>
&lt;p>After some fighting and with the help of my friend Stefano Castriotta we finally manage to have it works &lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/wlEmoticonsmile1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/wlEmoticonsmile1.png" alt="Smile" />&lt;/a> now I have a program where you can switch the browser control at real time and with a single click.&lt;/p></description></item><item><title>Disable Javascript error in WPF WebBrowser control</title><link>https://www.codewrecks.com/post/old/2010/08/disable-javascript-error-in-wpf-webbrowser-control/</link><pubDate>Tue, 31 Aug 2010 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/disable-javascript-error-in-wpf-webbrowser-control/</guid><description>&lt;p>I work with WebBrowser control in WPF, and one of the most annoying problem I have with it, is that sometimes you browse sites that raise a lot of javascript errors and the control become unusable. Thanks to my friend Marco Campi, yesterday I solved the problem. Marco pointed me a &lt;a href="http://andylangton.co.uk/articles/javascript/disable-javascript-errors/">link&lt;/a> that does not deal with WebBrowser control, but uses a simple javascript script to disable error handling in a web page.&lt;/p></description></item><item><title>Bind an Image to a property in WPF</title><link>https://www.codewrecks.com/post/old/2010/07/bind-an-image-to-a-property-in-wpf/</link><pubDate>Fri, 23 Jul 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/bind-an-image-to-a-property-in-wpf/</guid><description>&lt;p>The situation is the following: I have a class that has a Status property of type SingleAnalysisStatus enum, and I want to show a different png image, based on the status of the object.&lt;/p>
&lt;p>The solution is to write a custom &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.aspx">IValueConverter&lt;/a> that convert from the enum to a valid resource file, but we need to pay specific attention. In WPF you can include images as resources in a very simple way, just include the images in the project and set the &lt;em>build Action&lt;/em> to Resource, as shown in &lt;strong>Figure 1&lt;/strong>.&lt;/p></description></item><item><title>WPF and Dependency property default objects</title><link>https://www.codewrecks.com/post/old/2010/04/wpf-and-dependency-property-default-objects/</link><pubDate>Thu, 29 Apr 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/04/wpf-and-dependency-property-default-objects/</guid><description>&lt;p>WPF is a completely new stuff respect to winform, and sometimes you can get surprised by its behaviour. Today I had a bug in a simple application, it seems that closing and opening a form, data is persisted between instances, and it seems that a dependency property is behaving like static variable. This is the situation exposed in simple way, take a parameter filter object like this&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Filters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String Surname { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Simple class with two properties, then create a wpf windows with this simple code behind.&lt;/p></description></item><item><title>Validate Business Entities with WPF - Take 2</title><link>https://www.codewrecks.com/post/old/2009/08/validate-business-entities-with-wpf-take-2/</link><pubDate>Mon, 17 Aug 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/validate-business-entities-with-wpf-take-2/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/08/14/validate-business-entities-with-wpf/">the first part&lt;/a> I showed how to validate an entire object with the help of &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.data.bindinggroup.aspx">BindingGroup&lt;/a> class, now I want to extend the discussion to handle a typical problem that arise with it. Suppose your business object has a property of type Int32, and you bind this property to a standard textbox, what happens when you digit in the previous example a string that is not convertible to an Int32? The answer is nothing.&lt;/p></description></item><item><title>Validate Business Entities with WPF</title><link>https://www.codewrecks.com/post/old/2009/08/validate-business-entities-with-wpf/</link><pubDate>Fri, 14 Aug 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/validate-business-entities-with-wpf/</guid><description>&lt;p>With &lt;a href="http://www.nablasoft.com/guardian">Guardian&lt;/a> we were investigating about a strategy to validate business entities in a project we work into. You can find a lot of examples around the web on how to use validators, but most of them deal with basic textbox, and property validation stuff. What we need is the ability to &lt;em>use a validation framework on a business entity&lt;/em> or dto returned from a service,&lt;em>without adding properties to those objects&lt;/em>. Basically we have a library with a set of rules that can tells us if an object is valid or not, and give us a list of errors, the aim is to validate a whole object while the user is editing single properties.&lt;/p></description></item><item><title>Checkbox list in wpf</title><link>https://www.codewrecks.com/post/old/2009/08/checkbox-list-in-wpf/</link><pubDate>Tue, 04 Aug 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/checkbox-list-in-wpf/</guid><description>&lt;p>One of most missing control of Wpf is in my opinion a Checkbox list. Since in a project I&amp;rsquo;m working into, I really need such a control I worked with my fellow &lt;a href="http://www.nablasoft.com/guardian">Guardian&lt;/a> to create one that will satisfies our needs.&lt;/p>
&lt;p>Our goal is to use less code possible and rely mainly on binding, and this was a little difficult to accomplish because of various problems, here is the XAML of the final control.&lt;/p></description></item><item><title>Adapting a model to make binding simpler</title><link>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</link><pubDate>Tue, 17 Mar 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</guid><description>&lt;p>I have a domain model composed by Clients, each client has a series of associated Typology objects and each Typology object has a certain number of associated Target. Now I need to bind this model to a series of three combo in WPF, but I have this little problem&lt;/p>
&lt;p>The model is not directly accessible, I have already a service that has functions like GetAllCustomer, GetTyplogyForCustomer(Int32 customerId) and GetTargetForTyplogy(Int32 typologyId). Each method returns a list of the corresponding object, but they are DTO and not real object, so the Customer, Typology and Target returned from the service have no relation between them. Moreover I do not want to load everything when the application starts, because it will be extremely slow, I want to be able to load data as it needed, with lazy load. I created a couple of classes that I can use to lazily load entities&lt;/p></description></item><item><title>Hilite words in webbrowser now for WPF control</title><link>https://www.codewrecks.com/post/old/2009/03/hilite-words-in-webbrowser-now-for-wpf-control/</link><pubDate>Wed, 11 Mar 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/hilite-words-in-webbrowser-now-for-wpf-control/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/13/highlight-words-in-webbrowser-control/">Some days ago&lt;/a>, I blogged about how to hilite words in a webBrowser control for windows forms. Now I need to do the same thing on &lt;a href="http://blogs.msdn.com/llobo/archive/2008/06/12/wpf-webbrowser.aspx">WPF WebBrowser&lt;/a> control, but instead of doing direct modification of DOM, a &lt;a href="http://www.nablasoft.com/guardian">friend&lt;/a> suggested me a &lt;a href="http://javascript.about.com/library/blhilite2.htm">Javascript script&lt;/a> to hilite words in document. My original technique, discussed in &lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/13/highlight-words-in-webbrowser-control/">old post&lt;/a>, is not so good because it replaces text in the whole content of the document, and sometimes it breaks script etc. Now I need to put everything in WPF and here is how you can accomplish the task.&lt;/p></description></item><item><title>Three levels master detail with WPF</title><link>https://www.codewrecks.com/post/old/2008/11/three-levels-master-detail-with-wpf/</link><pubDate>Sat, 08 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/three-levels-master-detail-with-wpf/</guid><description>&lt;p>Binding in WPF is really more powerful respect its counterpart in windows forms. Suppose you have to show this hierarchy of classes in an interface.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb6.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>This is a simple structure where a LogGroup have a collection of LogMessages and each LogMessage has a collection of StackSteps. I have a collection of LogGroup and I need to create a &lt;em>three level master detail&lt;/em> interface to make the user browse through all objects in hierarchy.&lt;/p></description></item><item><title>WPF and wrapping text inside elements of a ListView</title><link>https://www.codewrecks.com/post/old/2008/11/wpf-and-wrapping-text-inside-elements-of-a-listview/</link><pubDate>Sat, 08 Nov 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/wpf-and-wrapping-text-inside-elements-of-a-listview/</guid><description>&lt;p>TextBlock have the possibility to wrap, but sometimes you can get surprised by its behaviour. When I first began to work in WPF I started to use ListView to show complex object, because of the rich possibility to format the output with great flexibility. One day I created this little listview.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;ListView&lt;/span> &lt;span style="color:#a6e22e">x:Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GroupsView&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">ItemsSource=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding}&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;StackPanel&lt;/span> &lt;span style="color:#a6e22e">Orientation=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Horizontal&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">TextWrapping=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Wrap&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2,0,2,0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Path=LogIdentifier}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;14&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2,0,2,0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Count:&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontWeight=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Bold&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;14&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Margin=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;2,0,2,0&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;{Binding Path=Messages.Count}&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">VerticalAlignment=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Center&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">FontSize=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;14&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/DataTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ListView.ItemTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/ListView&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>It is a simple list and each element is composed by three textblock, the first should be the long one and I want it to wrap when the form is resized, the other two are small and should stay to the right. When I launched the form the result is not the desidered one, the first text does not wrap , nor the Count: is aligned to the right. The first error is that you should use DockPanel when you want elements to stay somewhere (right in this situation) and you want one of the element to fill remaining space, then I moved to this solution.&lt;/p></description></item><item><title>WPF BagOfTricks and maybe a little bug in setting current date value</title><link>https://www.codewrecks.com/post/old/2008/05/wpf-bagoftricks-and-maybe-a-little-bug-in-setting-current-date-value-2/</link><pubDate>Sat, 10 May 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/wpf-bagoftricks-and-maybe-a-little-bug-in-setting-current-date-value-2/</guid><description>&lt;p>I love wpf, but one of the most annoyng missing controls is a sort of dateTimePicker, luckily we have &lt;a href="http://j832.com/bagotricks/">Kevin’s WPF Bag Of Trick&lt;/a> that has a very useful set of controls. I begin to use this library today, I drop a DatePicker control on the page, and on page load I initialize with current date&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>InitializeComponent();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datePicker.Value = DateTime.Now;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>The windows opens, but when I click on the DatePicker and try to select a new date nothing happens……it seems a bug because if I change the preceding code in this way (Setting passing only the date part of the DateTime.Now)&lt;/p></description></item><item><title>WPF convert SystemWindowsInputKey to char or string</title><link>https://www.codewrecks.com/post/old/2008/05/wpf-convert-systemwindowsinputkey-to-char-or-string-2/</link><pubDate>Tue, 06 May 2008 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/wpf-convert-systemwindowsinputkey-to-char-or-string-2/</guid><description>&lt;p>Today I spent half an hour trying to solve a really stupid problem. I have a WPF windows where I have to intercept all char input from the keyboard and handle a char at a time. This is to work with a barcode reader with a keyboard connection.&lt;/p>
&lt;p>I begin to intercept the event KeyPress, but the problem is that this event gives information about the Key pressed, that is a particular enumeration roughly corresponding to the data coming from the WM_CHAR windows message. I spent a lot of time trying to convert this value into char, but with a lot of problem.&lt;/p></description></item><item><title>WPF IValueConverter and binding</title><link>https://www.codewrecks.com/post/old/2008/04/wpf-ivalueconverter-and-binding/</link><pubDate>Wed, 02 Apr 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/wpf-ivalueconverter-and-binding/</guid><description>&lt;p>People often look at WPF and XAML only for the possibility to create more appealing interface, but XAML is a lot more, because it is a way to create object with xml syntax. Here is an example on how to make some advanced binding.&lt;/p>
&lt;p>Suppose I have some objects with a property called StartingTime that is a DateTime and I want to visualize the elapsed time from StartingTime to Now. Please resist the temptation to create a presentation object with a suitable property, and lets dig into IValueConverter, here is an example&lt;/p></description></item><item><title>WPF Swap the entire content in a column based on content</title><link>https://www.codewrecks.com/post/old/2008/03/wpf-swap-the-entire-content-in-a-column-based-on-content/</link><pubDate>Thu, 27 Mar 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/wpf-swap-the-entire-content-in-a-column-based-on-content/</guid><description>&lt;p>In &lt;a href="http://www.nablasoft.com/Alkampfer/?p=176">previous post&lt;/a>, I demonstrated how to change the content of a grid based on the content of a property of bound object, now I want to take that example further. In the old example I change the source of an image, but now I want to set a complete different template based on content, to make this happens first of all you have to change the DataTemplate in ControlTemplate&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Window.Resources&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">x:Key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ct1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;Image&lt;/span> &lt;span style="color:#a6e22e">x:Name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TheImage&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">Source=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Images/error.png&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ControlTemplate&lt;/span> &lt;span style="color:#a6e22e">x:Key=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ct2&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Yes Is True!!&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;TextBlock&lt;/span> &lt;span style="color:#a6e22e">Text=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;This is another different template!!&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/StackPanel&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ControlTemplate&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/Window.Resources&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>As you can see I create a template with an image, and another template with a complete different content, a stackpanel with two textblock. Now the interesting part is on the grid.&lt;/p></description></item><item><title>First steps on WPF listview with template based on data</title><link>https://www.codewrecks.com/post/old/2008/03/first-steps-on-wpf-listview-with-template-based-on-data/</link><pubDate>Wed, 26 Mar 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/first-steps-on-wpf-listview-with-template-based-on-data/</guid><description>&lt;p>I’m moving the first serious steps on WPF trying to apply in real situation, the feeling is really good, and databinding and trigger are really exceptional. Suppose you have such a class&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DataItem&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Boolean IsTrue { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>Then you have a list of such objects, you bind them to DataContext of a list view and write this XAML&lt;/p></description></item></channel></rss>