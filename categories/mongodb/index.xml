<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDb on Codewrecks</title><link>https://www.codewrecks.com/categories/mongodb/</link><description>Recent content in MongoDb on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 18 May 2022 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Case insensitive key dictionaries and MongoDb C# serializers</title><link>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</link><pubDate>Wed, 18 May 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</guid><description>First of all, every C# programmer should know that Dictionary&amp;lt;Tkey, Tvalue&amp;gt; class (as well as other collections) have a special constructor that can be used to specify the serializer used to compare keys in the dictionary. The most obvious situation is where you have a string key and you want the dictionary to be case insensitive during key search.
1 2 public SortedDictionary&amp;lt;string, StringProperty&amp;gt; StringProperties { get; private set; } = new SortedDictionary&amp;lt;string, StringProperty&amp;gt;(StringComparer.</description></item></channel></rss>