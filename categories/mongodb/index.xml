<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDb on Codewrecks</title><link>https://www.codewrecks.com/categories/mongodb/</link><description>Recent content in MongoDb on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 18 May 2022 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Case insensitive key dictionaries and MongoDb C# serializers</title><link>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</link><pubDate>Wed, 18 May 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</guid><description>&lt;p>First of all, every C# programmer should know that Dictionary&amp;lt;Tkey, Tvalue&amp;gt; class (as well as other collections) have a special constructor that can be used to specify the &lt;strong>serializer used to compare keys in the dictionary&lt;/strong>. The most obvious situation is where you have a string key &lt;strong>and you want the dictionary to be case insensitive during key search&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> SortedDictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, StringProperty&amp;gt; StringProperties { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">set&lt;/span>; } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> = &lt;span style="color:#66d9ef">new&lt;/span> SortedDictionary&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>, StringProperty&amp;gt;(StringComparer.OrdinalIgnoreCase);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The above code is inside a class where I need to keep a dictionary of StringProperty class, using a Sorted dictionary where the key &lt;strong>must be case insensitive&lt;/strong>. This allows me to write code like this&lt;/p></description></item></channel></rss>