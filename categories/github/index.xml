<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on Codewrecks</title><link>https://www.codewrecks.com/categories/github/</link><description>Recent content in GitHub on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 16 Mar 2025 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Pin GitHub action SHA to avoid security risk</title><link>https://www.codewrecks.com/post/github/github-sha-pinning/</link><pubDate>Sun, 16 Mar 2025 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-sha-pinning/</guid><description>&lt;h1 id="the-problem">The problem&lt;/h1>
&lt;p>When you author GitHub action pipelines, you usually use third party actions, that can be easily referenced in your workflow with simple syntax.&lt;/p>
&lt;p>Usually you refer to a github action in your workflow with the following syntax&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.128.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">extended&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This is the &lt;strong>standard way to use a third party action inside your workflow&lt;/strong>, you specify the name of the repository in the uses part of the step, and then specify parameters.&lt;/p></description></item><item><title>GitHub Secrets Scanning and Push Prevention</title><link>https://www.codewrecks.com/post/github/secrets-scanning/</link><pubDate>Thu, 04 Jan 2024 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/secrets-scanning/</guid><description>&lt;p>The risk of inadvertently including secrets in your Git repository has significantly increased in recent years. &lt;code>GitGuardian&lt;/code>, a company providing solutions to prevent secret leakage in repositories, reports astonishing numbers regarding the quantity of secrets leaked in Git repositories. &lt;a href="https://www.gitguardian.com/state-of-secrets-sprawl-report-2023">State of Secrets Sprawl Report 2023&lt;/a>&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/secrets-some-numbers.png"> &lt;img src="../images/secrets-some-numbers.png" alt="More than 10 million secrets leaked, and the number raises every year" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>More than 10 million secrets leaked, and the number raises every year&lt;/em>&lt;/p></description></item><item><title>Allow easy source debugging for Nuget Packages and GitHub</title><link>https://www.codewrecks.com/post/github/allow-source-debugging-for-nuget-packages/</link><pubDate>Sun, 31 Dec 2023 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/allow-source-debugging-for-nuget-packages/</guid><description>&lt;p>In my previous blog posts, I&amp;rsquo;ve extensively discussed how to &lt;strong>publish symbol libraries for .NET in Azure DevOps / Team Foundation Server&lt;/strong>. Azure DevOps has supported symbol server functionalities for a considerable time, making it straightforward to add steps in your build process for indexing your source code. This capability enables you to &lt;strong>publish your .NET libraries to either an internal or public NuGet feed and facilitates stepping into the original source code for debugging directly within Visual Studio.&lt;/strong>&lt;/p></description></item><item><title>Pills: Identify nuget packages with vulnerabilities</title><link>https://www.codewrecks.com/post/azdo/pills/nuget-packages-with-vulnerabilities/</link><pubDate>Fri, 27 Oct 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/nuget-packages-with-vulnerabilities/</guid><description>&lt;p>Managing references is easy with Nuget, however, &lt;strong>from a security standpoint, it&amp;rsquo;s not straightforward to ensure your project&amp;rsquo;s security by upgrading vulnerable references&lt;/strong>. GitHub Dependabot does an excellent job flagging vulnerable references, and the entire GitHub ecosystem has a strong emphasis on security. This empowers developers to handle security in the packages they produce.&lt;/p>
&lt;p>Recently, &lt;strong>Visual Studio introduced a feature that immediately warns you if a package in your solution is insecure&lt;/strong>. You can also filter your installed packages to display only those with vulnerabilities.&lt;/p></description></item><item><title>Resolving Credential Conflicts in Git</title><link>https://www.codewrecks.com/post/github/pills/multiple-credentials-in-credential-manager/</link><pubDate>Fri, 21 Jul 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/github/pills/multiple-credentials-in-credential-manager/</guid><description>&lt;p>Have you ever found yourself being asked to &lt;strong>select a GitHub account every time you make a push&lt;/strong>? This is often due to multiple access tokens being stored in your Windows credential manager.&lt;/p>
&lt;p>The Git Credential Manager can become confused when it doesn&amp;rsquo;t know which account to use. It&amp;rsquo;s only option in these situations is to ask you which of the stored credentials it should utilize.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/select-account.png"> &lt;img src="../images/select-account.png" alt="Command line interface suddenly opens a window asking you to select accounts" />&lt;/a>&lt;/p></description></item><item><title>Using GitHub Command Line Tool to View Pull Request Info</title><link>https://www.codewrecks.com/post/github/pills/gh_command_line_tool/</link><pubDate>Thu, 20 Jul 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/github/pills/gh_command_line_tool/</guid><description>&lt;p>For people like me who prefer using Git in the command line, there are times when I need to retrieve information about pull requests or other GitHub related tasks. For example, suppose &lt;strong>I need to share a link to a pull request that is under review with one of my colleagues for them to comment on&lt;/strong>. Sure, I could navigate to the GitHub website, locate the repository, navigate to the pull request page and get the link. But, since I&amp;rsquo;m already in the command line, I&amp;rsquo;d prefer a faster way.&lt;/p></description></item><item><title>Develop locally with GitHub Codespaces and Hugo</title><link>https://www.codewrecks.com/post/github/codespaces-hugo-local/</link><pubDate>Thu, 12 Jan 2023 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-hugo-local/</guid><description>&lt;p>I really love &lt;a href="https://www.codewrecks.com/post/github/codespaces-hugo/">Using Hugo and Codespaces to write blog posts&lt;/a>, I&amp;rsquo;ve a really better blogging experience &lt;strong>than wordpress, because I have a simple blog, quick to load, no frills no fuzzes, just a simple blog&lt;/strong>. Using Codespaces is really nice experience and I really never wrote a blog post in my Windows machine until yesterday.&lt;/p>
&lt;p>Yesterday I simply opened my blog repository inside a local instance of Visual Studio Code, but I had a &lt;strong>nasty surprise when I tried to start hugo server&lt;/strong>.&lt;/p></description></item><item><title>GitHub issue templates</title><link>https://www.codewrecks.com/post/github/github-issue-templates/</link><pubDate>Sat, 22 Jan 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-issue-templates/</guid><description>&lt;p>After Microsoft acquisition of GitHub there is some bit of confusion on what to use: Azure DevOps or GitHub for your new projects? Actually the answer &lt;strong>is somewhat complex, but the most honest response is to use whatever of the two you find more adherent on how you work&lt;/strong>.&lt;/p>
&lt;p>The most different part is the issue/board part, because they are very different on the two products, with very different capabilities and very different basic concepts. While Azure DevOps enforce a complex tracking with &lt;strong>explicit WorkItem types and custom fields&lt;/strong>, GitHub does use a &lt;strong>flat approach to the problem using only Issues with labels and few fields&lt;/strong>.&lt;/p></description></item><item><title>GitHub actions templates</title><link>https://www.codewrecks.com/post/github/github-actions-templates/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-actions-templates/</guid><description>&lt;p>GitHub Actions are closing the gap with Azure DevOps pipelines day by day, one of the features introduces months ago was &lt;strong>Action templates, the ability to re-use actions definitions between repositories&lt;/strong>. You can read all the detail in &lt;a href="https://docs.github.com/en/actions/learn-github-actions/creating-starter-workflows-for-your-organization">Official GitHub documentation&lt;/a>.&lt;/p>
&lt;p>Templates are really useful because usually, in one organization, you tend to &lt;strong>use a restricted set of technologies with the very same set of actions to perform to build and release the code&lt;/strong>. You already know that I&amp;rsquo;m a fan of build in PowerShell or other scripting engine, but for simple project, you can simply rely on GitHub actions without resorting to any scripting language.&lt;/p></description></item><item><title>GitHub Security enforcer action</title><link>https://www.codewrecks.com/post/github/security-enforcer/</link><pubDate>Fri, 10 Dec 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/security-enforcer/</guid><description>&lt;p>GitHub takes &lt;a href="https://www.codewrecks.com/post/security/github-security-scanning/">security seriously&lt;/a> and gives you some nice capabilities to &lt;strong>improve security of your code through all its lifecycle&lt;/strong>. GitHub actions can be used to automatically run a security code analysis in your repositories, a task that should be run for &lt;strong>all of your repositories in your organization&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Security scanning should be enabled on all repositories&lt;/p>&lt;/blockquote>
&lt;p>Some days ago in a &lt;a href="https://github.blog/2021-11-22-accelerate-security-adoption-in-your-organization/">GitHub blog post&lt;/a> a new action was announced called &lt;a href="https://github.com/marketplace/actions/advanced-security-enforcer#example-workflow">Advanced-Security-Enforcer&lt;/a> that is aimed &lt;strong>to automate the task of adding GitHub Workflow to perform code analysis&lt;/strong>.&lt;/p></description></item><item><title>Analyze Python project with SonarCloud and GitHub</title><link>https://www.codewrecks.com/post/github/python-sonarcloud-actions/</link><pubDate>Sat, 28 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/python-sonarcloud-actions/</guid><description>&lt;p>SonarCloud is free for Open Source projects, and for languages like Python, that does not need compilation, it can directly &lt;strong>analyze the repository without any intervention from the author.&lt;/strong> This feature is automatically enabled when you setup your Project in SonarCloud and it determines that you have not compiled language.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/sonar-cloud-analysis.png"> &lt;img src="../images/sonar-cloud-analysis.png" alt="Analysis configuration shows that in this project we have CI analysis" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Analysis configuration shows that in this project we have CI analysis&lt;/em>&lt;/p></description></item><item><title>Configure Codespaces for Python projects</title><link>https://www.codewrecks.com/post/github/codespaces-python/</link><pubDate>Thu, 26 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-python/</guid><description>&lt;p>One of the great advantage of Codespaces is the ability &lt;a href="https://www.codewrecks.com/post/github/configuring-codespaces/">to preconfigure the environment&lt;/a> so you do not need to &lt;strong>waste time installing and configuring your toolchain&lt;/strong>. Python is a perfect example of this scenario, I&amp;rsquo;ve a small project &lt;a href="https://github.com/alkampfergit/GitGraphAutomation">to generate Git Graph Representation&lt;/a> and since I&amp;rsquo;m not a full time Python developer, I&amp;rsquo;ve not it installed and perfectly configured in all of my environment. Also I primarily work on Windows, so &lt;strong>Codespaces allows me to test everything on Linux with a single click&lt;/strong>.&lt;/p></description></item><item><title>Configure Codespaces for a real project</title><link>https://www.codewrecks.com/post/github/configuring-codespaces/</link><pubDate>Fri, 20 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/configuring-codespaces/</guid><description>&lt;p>In &lt;a href="https://www.codewrecks.com/post/github/codespaces-hugo/">previous post&lt;/a> I explored the many advantages I&amp;rsquo;ve found &lt;strong>using GitHub codespaces to author blog posts directly in a browser&lt;/strong>. That example was surely too simple, after all a hugo blog is just markdown, but nevertheless Codespaces allows me to configure my environment with great easy.&lt;/p>
&lt;p>You can follow the guide &lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/configuring-codespaces-for-your-project">on the official link&lt;/a> but here is a quick summary on how I configured my codespaces for my blog. First of all you can directly add a configuration file inside codespace&lt;/p></description></item><item><title>Use GitHub codespaces to author blog post</title><link>https://www.codewrecks.com/post/github/codespaces-hugo/</link><pubDate>Thu, 19 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-hugo/</guid><description>&lt;h2 id="the-scenario">The scenario&lt;/h2>
&lt;p>I played &lt;a href="https://www.codewrecks.com/post/general/github-codespaces-first-impression/">a little bit with GitHub Codespaces&lt;/a> when it was in preview, now it is time to try to use it real activities to &lt;strong>understand scenarios where it can be useful&lt;/strong>.&lt;/p>
&lt;p>To have a real test you need &lt;strong>to setup a goal to verify if the tool is capable of reaching that goal, and if it is an advantage over existing tool&lt;/strong>. My first goal is being able to write Blog Post in hugo with GitHub Codespaces and being able to determine if it is more productive than running a standalone local version of Visual Studio code.&lt;/p></description></item><item><title>Sonar Cloud analysis in GitHub</title><link>https://www.codewrecks.com/post/github/github-sonar-cloud/</link><pubDate>Sat, 13 Mar 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-sonar-cloud/</guid><description>&lt;p>Well, you know me, I like to have my code analyzed by SonarCloud when possible, and since it is free for open source, I always use Azure DevOps pipeline to &lt;strong>automatically analyze code on each push&lt;/strong>. Now that GitHub actions are available, a good solution is to simply &lt;strong>use GitHub actions to analyze code, without disturbing Azure DevOps&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Azure DevOps pipelines are, in my opinion, more mature than GitHub actions, but for small tasks, it is simpler to go with Actions.&lt;/p></description></item><item><title>Code scanning in GitHub</title><link>https://www.codewrecks.com/post/github/code-scanning/</link><pubDate>Sat, 03 Oct 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/code-scanning/</guid><description>&lt;p>As you can read directly from &lt;a href="https://github.blog/2020-09-30-code-scanning-is-now-available/">GitHub blog post&lt;/a> GitHub code scanning is now available and ready to use for your repositories.&lt;/p>
&lt;p>To enable code scanning you can just go to the security tab of your repository &lt;strong>and choose to enable code scanning&lt;/strong>.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/enable-code-scanning-gh.png"> &lt;img src="../images/enable-code-scanning-gh.png" alt="Enable code scanning" />&lt;/a>
&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>Enable code scanning&lt;/em>&lt;/p>
&lt;p>You are presented with a list of Code Scanning tools at your disposal, clearly the first is &lt;a href="https://securitylab.github.com/tools/codeql">CodeQL&lt;/a> &lt;strong>and it is automatically offered to you by GitHub&lt;/strong>, then you can find other tool available in the marketplace&lt;/p></description></item><item><title>Continuous Integration in GitHub Actions deploy in AzureDevops</title><link>https://www.codewrecks.com/post/old/2020/04/continuous-integration-in-github-actions-deploy-in-azuredevops/</link><pubDate>Sat, 04 Apr 2020 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/continuous-integration-in-github-actions-deploy-in-azuredevops/</guid><description>&lt;p>My dear friend Matteo just published an &lt;a href="https://mattvsts.github.io/2020/04/03/CI-on-github-actions-CD-on-Azure-Pipelines/">interesting article on integration between GitHub actions and Azure Devops Pipeline here&lt;/a>. I have a different scenario where &lt;a href="http://www.codewrecks.com/blog/index.php/2020/03/22/github-actions-plus-gitversion/">I’ve already published a GitHub release from a GitHub action&lt;/a>, but I have nothing ready in GitHub to release in my machines.&lt;/p>
&lt;blockquote>
&lt;p>While GitHub is really fantastic for source code and starts having a good support for CI with Actions, in the release part it still miss a solution. Usually this is not a problem, because we have Azure DevOps or other products that can fill the gap.&lt;/p></description></item><item><title>Azure DevOps pipeline template for build and release NET core project</title><link>https://www.codewrecks.com/post/old/2020/03/azure-devops-pipeline-template-for-build-and-release-net-core-project/</link><pubDate>Sun, 29 Mar 2020 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/azure-devops-pipeline-template-for-build-and-release-net-core-project/</guid><description>&lt;p>Some days ago I’ve blogged on how to release projects on GitHub with actions, now it is time to understand &lt;strong>how to do a similar thing in Azure DevOps to build / test / publish a.NET core library with nuget&lt;/strong>. The purpose is to create a generic template that can be reused on every general that needs to build an utility dll, run test and publish to a Nuget feed.&lt;/p></description></item><item><title>GitHub actions improvements</title><link>https://www.codewrecks.com/post/old/2020/03/github-actions-improvements/</link><pubDate>Thu, 12 Mar 2020 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/github-actions-improvements/</guid><description>&lt;p>GitHub actions is really new kid on the block and even if I still prefer Azure DevOps pipelines, because they are really more production ready, GitHub actions is rapidly evolving.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2_thumb.png" alt="SNAGHTML3961c2" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Figure 1&lt;/strong> : &lt;em>GitHub actions now has a dedicated editor for actions to quickly include actions&lt;/em>&lt;/p>
&lt;p>As you can see in &lt;strong>Figure 1&lt;/strong> , when you edit workflow file in GitHub online editor &lt;strong>you can simply browse all available actions&lt;/strong>. Choosing a specific action reveal the snippet of text you should enter to use that action without the need to search around.&lt;/p></description></item><item><title>Use latest OS image tag in GitHub actions</title><link>https://www.codewrecks.com/post/old/2020/03/use-latest-os-image-tag-in-github-actions/</link><pubDate>Sun, 08 Mar 2020 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/use-latest-os-image-tag-in-github-actions/</guid><description>&lt;p>I have a nice GH action that runs some build and test on my project, now I noticed that some of the latest runs have some problem.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>My action that ran only one of the matrix combination&lt;/em>&lt;/p>
&lt;p>Action has two distinct run because it has a matrix, actually I want to run it against Linux and Windows operating systems, but it seems that it does not run anymore on Windows.&lt;/p></description></item><item><title>GitHub Actions plus Azure Docker Registry</title><link>https://www.codewrecks.com/post/old/2020/02/github-actions-plus-azure-docker-registry/</link><pubDate>Tue, 25 Feb 2020 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/02/github-actions-plus-azure-docker-registry/</guid><description>&lt;p>I have some projects that needs SqlServer and MongoDb or ElasticSearch to run some integration tests, these kind of requirements made difficult to use hosted agent for build (in Azure DevOps) or &lt;strong>whatever build system you are using where a provider gives you pre-configured machine to run your workflow.&lt;/strong> Usually each build engine made possible for you to run your own agent and GitHub actions makes no difference ( you can read here about self installed action runners &lt;a href="https://help.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners">https://help.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners&lt;/a>)&lt;/p></description></item><item><title>GitHub security Alerts</title><link>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</link><pubDate>Tue, 22 Oct 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</guid><description>&lt;p>I really love everything about security and I’m really intrigued by GitHub security tab that is now present on you repository. In your project usually it is disabled by default.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image-44.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>GitHub Security tab on your repository&lt;/em>&lt;/p>
&lt;p>&lt;strong>If you enable it you start receiving suggestion based on code that you check in on the repository&lt;/strong> , as an example, GitHub will scan your npm packages source to find dependencies with libraries that are insecure.&lt;/p></description></item><item><title>GitHub Actions second round</title><link>https://www.codewrecks.com/post/old/2019/10/github-actions-second-round/</link><pubDate>Sat, 05 Oct 2019 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/github-actions-second-round/</guid><description>&lt;p>After being capable of running build and test in my GitHub action workflow, it is time to experiment with matrix to have the build run on multiple OSes. This can be tricky if you use (like me) some Docker Images (Mongodb, SqlServer). &lt;strong>This because when you choose Windows machine, you are using Windows Container services&lt;/strong> , not standard Docker for Windows. This means that you are not able to run standard Docker container based on linux, but you need to use Windows Container based image.&lt;/p></description></item><item><title>GitHub Actions Error pushing with workflow modified</title><link>https://www.codewrecks.com/post/old/2019/09/github-actions-error-pushing-with-workflow-modified/</link><pubDate>Thu, 26 Sep 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/09/github-actions-error-pushing-with-workflow-modified/</guid><description>&lt;p>After creating a workflow for GitHub Action, if you try to modify the workflow locally then push to GitHub you can incur in strange error.&lt;/p>
&lt;blockquote>
&lt;p>refusing to allow an integration to create or update.github/workflows/ci.yml&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/09/image-32.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/09/image_thumb-32.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/09/image_thumb-32.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Error in pushing to Git Repository&lt;/em>&lt;/p>
&lt;p>The reason seems to be a different permission in auth token used for authentication, then to solve the problem you need to clear credentials then try again the operation. In Windows you need to &lt;a href="http://www.codewrecks.com/blog/index.php/2015/06/23/git-for-windows-getting-invalid-username-or-password-with-wincred/">use Credential Manager&lt;/a> as I described in that old post. Just delete every entry for GitHub, then try to push again, you will be asked again for credentials and then you should be able to push.&lt;/p></description></item><item><title>First Experience with GitHub Actions</title><link>https://www.codewrecks.com/post/old/2019/09/first-experience-with-github-actions/</link><pubDate>Thu, 26 Sep 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/09/first-experience-with-github-actions/</guid><description>&lt;p>GitHub &lt;a href="https://github.com/features/actions">actions&lt;/a> &lt;strong>is the new CI/CD system created by GitHub that allows you to build and release your software with a simple workflow defined in YAML file&lt;/strong>. Actually it is in beta, but you can simply request to be enlisted and your account will be enabled so you can try it in preview.&lt;/p>
&lt;p>Actions engine is based on a yaml definition that is stored directly in code, there are lots of predefined actions made by GitHub team as well as custom actions that can be developed by the community.The real power rely on the fact that you can use simply use command line and docker commands, making the creation of a release a simple and smooth process.&lt;/p></description></item></channel></rss>