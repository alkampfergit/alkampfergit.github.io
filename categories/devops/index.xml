<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Codewrecks</title><link>https://www.codewrecks.com/categories/devops/</link><description>Recent content in DevOps on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Apr 2021 07:00:18 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello terraform</title><link>https://www.codewrecks.com/post/devops/terraform-hello-world/</link><pubDate>Sat, 03 Apr 2021 07:00:18 +0200</pubDate><guid>https://www.codewrecks.com/post/devops/terraform-hello-world/</guid><description>I&amp;rsquo;m studying Terraform Up and Running book, a really good book but all the examples are for AWS. I have nothing against AWS, but I&amp;rsquo;m familiar with Azure, so I&amp;rsquo;d like to start porting some of the example of the book for Azure. While I&amp;rsquo;m not sure if I&amp;rsquo;ll keep up with the conversion, if you are curious I&amp;rsquo;ve started the work in this repository, feel free to post any correction (remember that I&amp;rsquo;m learning Terraform, I&amp;rsquo;m not an expert :))</description></item><item><title>Automatic publish PowerShell Gallery with GitHub Actions</title><link>https://www.codewrecks.com/post/general/powershell-gallery-publish/</link><pubDate>Mon, 26 Oct 2020 18:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell-gallery-publish/</guid><description>Publishing PowerShell helper functions to PowerShell gallery is a good solution to maximize reuse on Build and general Scripting for DevOps mundane tasks. On this GitHub repository I&amp;rsquo;ve put some simple build utilities that can be published on PowerShell gallery.
To streamline the process I&amp;rsquo;ve decided to automate publish process with GitHub actions, because this is the typical scenario where GH Actions shine. First of all I&amp;rsquo;ve reorganized my sources to create a single PowerShell file for each function, then I&amp;rsquo;ve found this excellent post that explain how to combine all files into a unique file to maximize performances.</description></item><item><title>Docker-compose to speed up setup dev environment</title><link>https://www.codewrecks.com/post/general/docker-compose-quick-start/</link><pubDate>Sat, 22 Aug 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/docker-compose-quick-start/</guid><description>Even if you do not plan to use Docker to distribute your application you can use it to speedup setup of development environment, for new developers and for new machines. I have a project where we use MongoDb and ElasticSearch, mongodb should be authenticated and ElasticSearch needs to have some special plugin installed.
Time to setup a new machine sometimes is high due to dependencies.
I&amp;rsquo;m aware that for experienced user setting up mongodb and ElasticSearch is not a complex task, but nevertheless you usually can have some problem.</description></item><item><title>How to locate most recent MSBuild.exe using PowerShell</title><link>https://www.codewrecks.com/post/general/find-msbuild-location-in-powershell/</link><pubDate>Sun, 26 Jul 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/find-msbuild-location-in-powershell/</guid><description>If you want to build a Full Framework based project from PowerShell, you need to locate MsBuild.exe tool tool to compile your project. You can indeed &amp;ldquo;open developer command prompt&amp;rdquo; to have a CommandLine with all needed tools in the %PATH%, but if you want to create a generic PowerShell script that uses MsBuild, knowing its location is probably a must.
There are some solutions in the internet, but I&amp;rsquo;ve found a nice module called VSSetup that can helps locating MsBuild because it gives you interesting information for every version of Visual Studio installed in the system (from VS2017 and subsequent versions).</description></item><item><title>Publish PowerShell functions to PowerShell Gallery</title><link>https://www.codewrecks.com/post/general/powershell-gallery/</link><pubDate>Sun, 28 Jun 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell-gallery/</guid><description>I&amp;rsquo;m a great fan of PowerShell script for build and release, even if Azure DevOps, GitHub Actions, TeamCity or Jenkins have pre-made task for common operations (zipping, file handling, etc). I always like using PowerShell scripts to do most of the job and the reason is simple: PowerShell scripts are easy to test, easy to understand and are not bound to a specific CI/CD engine.
Since I&amp;rsquo;m not a real PowerShell expert, during the years I&amp;rsquo;ve made some functions I reuse across projects, but I didn&amp;rsquo;t organize them, leading to some confusion over the years.</description></item><item><title>Group application insight logs by custom property</title><link>https://www.codewrecks.com/post/azure/application-insight-group-logs-by-custom-property/</link><pubDate>Mon, 27 Apr 2020 18:45:18 +0200</pubDate><guid>https://www.codewrecks.com/post/azure/application-insight-group-logs-by-custom-property/</guid><description>Today we found excessive number of logs in Application Insight instance, an application that usually cost few bucks each month, started to use more resources. Looking at a summary of last 30 days we see excessive number of custom events.
Figure 1: Application insight summary for a specific application
Now the problem is: how can I quickly spot out why we have an excessive number of CustomEvents? Logs shows me clearly that the vast majority of logs are indeed Custom Events.</description></item><item><title>Why I love DevOps and hate DevSecOps</title><link>https://www.codewrecks.com/post/old/2020/01/why-i-love-devops-and-hate-devsecops/</link><pubDate>Sat, 18 Jan 2020 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/why-i-love-devops-and-hate-devsecops/</guid><description>DevOps is becoming a buzzword, it makes hype and everyone want to be part of it, even if he/she does not know exactly what DevOps is. One of the symptoms of this is the “DevOpsEngineer”, a title that does not fit in my head. We could debate for days or years on the right definition of DevOps, but essentially is a cultural approach on building software focused on building the right thing with the maximum quality and satisfaction for the customer.</description></item><item><title>WIQL editor extension For Azure DevOps</title><link>https://www.codewrecks.com/post/old/2019/02/wiql-editor-extension-for-azure-devops/</link><pubDate>Sun, 03 Feb 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/02/wiql-editor-extension-for-azure-devops/</guid><description>One of the nice feature of Azure DevOps is extendibility, thanks to REST API you can write addins or standalone programs that interacts with the services. One of the addin that I like the most is the Work Item Query Language Editor, a nice addin that allows you to interact directly with the underling syntax of Work Item query.
Once installed, whenever you are in query Editor, you have the ability to directly edit the query with WIQL syntax, thanks to the “Edit Query wiql” menu entry.</description></item><item><title>Deploy click-once application on Azure Blob with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</link><pubDate>Fri, 07 Dec 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</guid><description>It was a long time ago I blogged on how to publish a click-once application from a VSTS Build to Azure Blob, long time was passed, and lots of stuff changed. The whole process is now simpler, thanks to many dedicated tasks that avoid doing any manual work.
My new build always start with a GitVersion custom tasks, that populates some environment variables with version numbers generated by GitVersion, this will allow me to simply add an MsBuild task in the build to publish click-once using automatic GitVersion versioning.</description></item><item><title>Create a release in TFS 2015 VSTS Release Management</title><link>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</link><pubDate>Sat, 18 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</guid><description>This is the end of the journey of the last serie of posts. I’m now at the situation where I have a build that produces a single zip file with everything I need to deploy the software and a bunch of PowerShell scripts that relase the software using that zip as a source artifact.
Now it is time to automate the process with Release Management. I want to use RM because the process is automated on a chain of environments, but also I have traceability, auditing, and verification of the release procedures.</description></item><item><title>How to manage PowerShell installation scripts</title><link>https://www.codewrecks.com/post/old/2016/06/how-to-manage-powershell-installation-scripts/</link><pubDate>Sat, 18 Jun 2016 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/how-to-manage-powershell-installation-scripts/</guid><description>In previous post I explained how I like to release software using a simple paradigm:
build produces one zipped file with everything needed for a release, then a PowerShell scripts accepts the path of this zipped release and installation parameters and executes every step to install/upgrade the software.
This approach has numerous advantages, first of all you can always test script with PowerShell ISE in a Developer Machine. Just download from build artifacts the version you want to use for test, load installation script in PowerShell ISE, then run the script, and if something went wrong (the script has a bug or needs to be updated) just debug and modify it until it works.</description></item><item><title>Checklists are prerequisites for Release Automation</title><link>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</link><pubDate>Thu, 09 Jun 2016 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</guid><description>I’ve dealt in some posts on how to deploy an application with a PowerShell script that uses an archive produced by a build. Automating a release could be simple or complex, depending on the nature of the software to be deployed, but there is a single suggestion that I always keep in my mind:
If you don’t have one or more Checklists for manual installation of a software do not even try to autmate installation process</description></item><item><title>Create a Release with PowerShell Zipped Artifacts and Chocolatey</title><link>https://www.codewrecks.com/post/old/2016/06/create-a-release-manager-in-tfs-with-powershell-and-zipped-artifacts/</link><pubDate>Fri, 03 Jun 2016 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-a-release-manager-in-tfs-with-powershell-and-zipped-artifacts/</guid><description>In previous post I described how to create a simple PowerShell scripts that is capable of installing a software starting from a zipped file that contains the “release” of a software (produced by a build) and some installation parameters. Once you have this scenario up and running, releasing your software automatically is quite simple.
Once you automated the installation with a PowerShell script plus an archive file with Everything is needed to install the software, you are only a step away from Continuous Deployment.</description></item><item><title>Using PowerShell scripts to deploy your software</title><link>https://www.codewrecks.com/post/old/2016/06/using-powershell-scripts-to-deploy-your-software/</link><pubDate>Fri, 03 Jun 2016 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/using-powershell-scripts-to-deploy-your-software/</guid><description>I often use PowerShell scripts to package a “release” of a software during a build because it gives me a lots of flexibility.
Manage artifacts with TFS Build vNext
Different approaches for publishing Artifacts in build vNext
The advantage of using PowerShell is complete control over what will be included in the “release” package. This allows you to manipulate configuration files, remove unnecessary files, copy files from somewhere else in the repository, etc etc.</description></item><item><title>Avoid using Shell command in PowerShell scipts</title><link>https://www.codewrecks.com/post/old/2016/05/avoid-using-shell-command-in-powershell-scipts/</link><pubDate>Fri, 27 May 2016 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/avoid-using-shell-command-in-powershell-scipts/</guid><description>I have setup scripts that are used to install software, they are simply based on this paradigm
The build produces a zip file that contains everything needed to install the software, then we have a script that accepts the zip file as parameter as well as some other parameters and does install sofwtare on a local machine
This simple paradigm is perfect, because we can manually install a software launching powershell, or we can create a Chocolatey package to automate the installation.</description></item><item><title>Fix of ChangeConnectionString resource in DSC Script to deploy Web Site</title><link>https://www.codewrecks.com/post/old/2014/06/fix-of-changeconnectionstring-resource-in-dsc-script-to-deploy-web-site/</link><pubDate>Tue, 17 Jun 2014 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/06/fix-of-changeconnectionstring-resource-in-dsc-script-to-deploy-web-site/</guid><description>to deploy a web site with Powershell DSC](http://www.codewrecks.com/blog/index.php/2014/06/11/how-to-deploy-web-site-with-powershell-dsc/)
How
to Deploy a Web Site with PowerShell DSC Part 2 How to Deploy a Web Site with PowerShell DSC Part 3 In the second part of this series I’ve received a really good comment by Rob Cannon, that warn me about an error in my ChangeConnectionString resource. In that article I told you that is ok for the Test part to return always False, so the Set Script is always run, because it is idempotent.</description></item><item><title>Deploying Web Site With PowerShell DSC part 3</title><link>https://www.codewrecks.com/post/old/2014/06/deploying-web-site-with-powershell-dsc-part-3/</link><pubDate>Sun, 15 Jun 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/06/deploying-web-site-with-powershell-dsc-part-3/</guid><description>How to deploy a web site with Powershell DSC How to Deploy a Web Site with PowerShell DSC Part 2 In this last part of this series I’ll explain how to deploy database projects output to local database of node machine. It was the most difficult due to some errors present in the xDatabase resource. Actually I have a couple of Database Projects in my solution, the first one define the structure of the database needed by my application while the second one reference the first and installs only some test data with a Post Deploy Script.</description></item></channel></rss>