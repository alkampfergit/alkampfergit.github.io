<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frameworks on Codewrecks</title><link>https://www.codewrecks.com/categories/frameworks/</link><description>Recent content in Frameworks on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 26 Sep 2018 19:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>The Dreadful IIS Loopback Check</title><link>https://www.codewrecks.com/post/old/2018/09/the-dreadful-iis-loopback-check/</link><pubDate>Wed, 26 Sep 2018 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/09/the-dreadful-iis-loopback-check/</guid><description>&lt;p>This is something that from times to times bites me, both as TFS Consultant and when I’m developing code. The problem is the following: &lt;strong>you have a site hosted with IIS in the computer you are logged in, the site has windows authentication, but you cannot login using a FQDN, but only with localhost.&lt;/strong> This is a Security Feature, because it avoid a &lt;a href="https://en.wikipedia.org/wiki/Reflection_attack">reflection attack&lt;/a> if the machine gets compromised. Sometimes this is annoying when you develop, because you are usually using your IIS machine to host site while you are developing, accessing it with localhost; then it is necessary to verify that everything works with real site names. For this reason I usually modify my hosts file to create alias like &lt;a href="http://www.myproduct.local">www.myproduct.local&lt;/a> that points to 127.0.0.1 and here comes the problems.&lt;/p></description></item><item><title>Wcf over HTTPS compression binary binding and some measurement</title><link>https://www.codewrecks.com/post/old/2012/09/wcf-over-https-compression-binary-binding-and-some-measurement/</link><pubDate>Tue, 11 Sep 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/wcf-over-https-compression-binary-binding-and-some-measurement/</guid><description>&lt;p>I’ve an application that is composed by &lt;strong>WPF clients deployed over the internet and a central WCF service exposed over Https for security reason&lt;/strong> , everything works fine, but as the number of clients grows, performance starts to decrease a little. Since I have a great number of clients that operates behind a single standard ADSL 8 MBit (used for everything, mail, browsing, etc..), I measured and found that bandwidth is becoming a bottleneck, so &lt;strong>I need to reduce amount of traffic between clients and server&lt;/strong>.&lt;/p></description></item><item><title>Masstransit latest version even simpler than ever</title><link>https://www.codewrecks.com/post/old/2012/09/masstransit-latest-version-even-simpler-than-ever/</link><pubDate>Tue, 11 Sep 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/masstransit-latest-version-even-simpler-than-ever/</guid><description>&lt;p>In a recent post about Masstransit I’ve explained how to &lt;a href="http://www.codewrecks.com/blog/index.php/2012/08/03/quick-start-on-mass-transit-and-msmq-on-windows/">setup communication using a Subscription Service&lt;/a>, and this configuration needs a dispatcher that can be build directly from MassTransit source code. If you do not want to have a central dispatcher, because you need to install a windows service (or run program in console) and a sql server used by the dispatcher you can also avoid this using Multicast.&lt;/p>
&lt;p>The key is the &lt;strong>call to sbc.UseMulticastSubscriptionClient() that basically permits you to completely avoid the complexity of having/maintaining a dispatcher with MSMQ. This works using&lt;/strong> &lt;a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms740125%28v=vs.85%29.aspx">&lt;strong>PGM on top of MSMQ&lt;/strong>&lt;/a>, so if you want to create a simple program that listen for a specific message on the bus you can use a minimal configuration, here is all the code you need&lt;/p></description></item><item><title>Masstransit and dispatching of messages</title><link>https://www.codewrecks.com/post/old/2012/09/masstransit-and-dispatching-of-messages/</link><pubDate>Mon, 03 Sep 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/masstransit-and-dispatching-of-messages/</guid><description>&lt;p>One of the coolest aspect of Masstransit is &lt;strong>simplicity of use (even if it still lacks a really comprehensive documentation&lt;/strong> ), dispatching of message is one of this aspect. The key of Masstransit is that dispatching is done on type of the message instead that address, &lt;em>we can simply ignore everything in the middle, we have just components that declares to Masstransit that they are able to handle a certain type of messages, other components will simply publish messages in the bus and dispatching is done thanks to the CLR type of message sent&lt;/em>.&lt;/p></description></item><item><title>Quick start on Mass Transit and MSMQ on windows</title><link>https://www.codewrecks.com/post/old/2012/08/quick-start-on-mass-transit-and-msmq-on-windows/</link><pubDate>Fri, 03 Aug 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/quick-start-on-mass-transit-and-msmq-on-windows/</guid><description>&lt;p>&lt;a href="http://masstransit-project.com/">&lt;strong>MassTransit&lt;/strong>&lt;/a> &lt;strong>is a bus implementation for.NET that promise frictionless configuration and simple usage&lt;/strong>. The main problem about MassTransit in my opinion is the lack of organic documentation, especially a quick start guide that shows you really the basic concepts behind MassTransit. If you jump into online documentation there is a nice page called “&lt;a href="http://docs.masstransit-project.com/en/latest/configuration/quickstart.html">Show Me the code&lt;/a>” that promise a quick start to jump into MassTransit concepts. The problem with that example is that &lt;strong>it shows a single snippet of code that opens a bus based on Windows MSMQ and send a message to itself&lt;/strong>.&lt;/p></description></item><item><title>Case sensitivity in lucene search</title><link>https://www.codewrecks.com/post/old/2012/07/case-sensitivity-in-lucene-search/</link><pubDate>Thu, 05 Jul 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/case-sensitivity-in-lucene-search/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/06/20/getting-started-with-lucene-net/">Getting Started With Lucene.NET&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/06/21/getting-started-with-lucene-netsearching/">Searching and more detail on Documents Fields&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/07/03/advanced-queries-with-lucene-net/">Advanced Queries with Lucene.NET&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We ended last post with a good knowledge of how to do complex searches in Lucene.NET indexes but a question remains unresolved, is Lucene.NET search &lt;strong>case insensitive or case insensitive?&lt;/strong>. Suppose you search for&lt;/p>
&lt;p>&lt;em>+mime + format&lt;/em>&lt;/p>
&lt;p>Here is the first result returned from the above query.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/image1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/image_thumb1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2012/07/image_thumb1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Searching for +mime +format returns a document that contains MIME in uppercase.&lt;/em>&lt;/p></description></item><item><title>Difference in log4net between threshold and evaluator</title><link>https://www.codewrecks.com/post/old/2009/10/difference-in-log4net-between-threshold-and-evaluator/</link><pubDate>Thu, 22 Oct 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/difference-in-log4net-between-threshold-and-evaluator/</guid><description>&lt;p>In log4net configuration you can filter out event by level in almost any appender, since it is supported by the AppenderSkeleton, the base class for every appender.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;appender&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;GeneralLog&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;log4net.Appender.RollingFileAppender&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;file&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Logs/exception.txt&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;appendToFile&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;maximumFileSize&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;10000KB&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;rollingStyle&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Size&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;maxSizeRollBackups&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;5&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;threshold&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ERROR&amp;#34;&lt;/span>&lt;span style="color:#f92672">/&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>Sometimes I see different configuration that uses an evaluator.&lt;/p></description></item><item><title>Combine Policy Injection Application Block with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</link><pubDate>Mon, 26 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/18/custom-handler-to-use-with-policy-injection-application-block/">Part 4 – Custom Handler to use with Policy Injection Application Block&lt;/a>&lt;/p>
&lt;p>In previous parts I showed how to configure unity container and how to create a custom handler for policy injection application block, now it is time to speak about integration between PIAB and Unity container.&lt;/p></description></item><item><title>Unity policy injection application block and AOP</title><link>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</link><pubDate>Sat, 17 Jan 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</guid><description>&lt;p>This is the third on a series of post I’m doing while exploring the Unity IoC container.&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;/p>
&lt;p>Now it is time of &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP&lt;/a> and using Policy Injection Application Block. &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP&lt;/a> it is a very interesting technique, used to inject behavior on a class at runtime. To use AOP with Unity and policy injection application block you should &lt;em>wrap&lt;/em> the instances returned by the Unity container as shown in this snippet.&lt;/p></description></item><item><title>Other experiments with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</link><pubDate>Sat, 17 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</guid><description>&lt;p>Yesterday I give a look at unity, an Inversion Of Control container made by Microsoft, today I’m experimenting a little more to have more confidence with it.&lt;/p>
&lt;p>An IoC container not only permits to resolve a concrete entity, but it also permits you to configure it. Here is how you can set a simple property on an object.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;type&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ITest&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">mapTo=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TestB&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;OtherTest&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;typeConfig&lt;/span> &lt;span style="color:#a6e22e">extensionType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.Practices.Unity.Configuration.TypeInjectionElement,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Microsoft.Practices.Unity.Configuration&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;property&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Prop&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">propertyType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.String&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;value&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;VAL&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/typeConfig&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/type&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>With typeConfig I can setup properties for my objects, now suppose that I have an array of string as property, you can use &amp;lt;array&amp;gt; tag for configuration.&lt;/p></description></item><item><title>Live logging with log4net and WCF part 2</title><link>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</link><pubDate>Wed, 05 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2008/11/05/a-custom-publishsubscriber-appender-for-log4net/">previous post&lt;/a> I showed how to create a publish/subscribe logger with WCF and log4net, now I show you my first use of this particular appender.&lt;/p>
&lt;p>When you work with nhibernate you can use show-sql configuration parameter to instruct nhibernate to show generated sql, but how can you see this output in a running windows application? You should know that NHibernate has various log4Net logger, and you can instruct the session to dump all sql code to a logger, here it is a possible configuration&lt;/p></description></item><item><title>Again on INotifyPropertyChanged and POCO object</title><link>https://www.codewrecks.com/post/old/2008/08/again-on-inotifypropertychanged-and-poco-object/</link><pubDate>Thu, 07 Aug 2008 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/again-on-inotifypropertychanged-and-poco-object/</guid><description>&lt;p>In &lt;a href="http://blogs.ugidotnet.org/bmatte/archive/2008/08/06/mixin-poco-e-inotifypropertychanged-mito-o-realtagrave.aspx">this post&lt;/a> &lt;a href="http://blogs.ugidotnet.org/bmatte">Matteo&lt;/a> shows that if you build a dynamic object to create a proxy that implements INotifyPropertyChanged this does not works with BindingList&amp;lt;T&amp;gt;.&lt;/p>
&lt;p>First of all I want to say that my previous &lt;a href="http://www.codewrecks.com/blog/index.php/2008/08/04/implement-inotifypropertychanged-with-castledynamicproxy/">two post&lt;/a> were made only to show how to create a proxy, I really believe that using Dynamic Code Generation to implement Interfaces like INotifyPropertyChanged is not a good idea.&lt;/p>
&lt;p>The greatest problem with dynamic objects is that the *type is known only at run time, and not at compile time,*this means that at compile time you cannot make any supposition on the proxy itself. In such a scenario, if you create a proxy that implements an interface, the only way to use it, is to check at runtime if the interface is implemented. With Generics, things become more complicated, because if you build a BindingList&amp;lt;T&amp;gt;, the code of that class assumes that you put object of type T in it, and since T does not implement INotifyPropertyChanged, the ListChanged is not raised.&lt;/p></description></item><item><title>Writing a custom formatter for log4net</title><link>https://www.codewrecks.com/post/old/2008/04/writing-a-custom-formatter-for-log4net/</link><pubDate>Tue, 29 Apr 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/writing-a-custom-formatter-for-log4net/</guid><description>&lt;p>Log4Net is certainly one of the most important instrumentation library  for logging. Let’s see how to extend, writing a custom formatter for exceptions. Exceptions are important things to log, and it is important to log more information as possible, here is how can you write a simple class to log exception&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExceptionLayoutExtended&lt;/span> : log4net.Layout.LayoutSkeleton {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> PatternLayout patternLayout;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PatternLayout PatternLayout {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> patternLayout ?? (patternLayout = &lt;span style="color:#66d9ef">new&lt;/span> PatternLayout(Pattern)); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> ExceptionLayoutExtended() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.IgnoresException = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String Pattern { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>As you can see the class must inherit from &lt;em>LayoutSkeleton&lt;/em> base class, then I insert a property of type &lt;em>PatternLayout&lt;/em>, we will see shortly how it will be used, for now notice that it use lazy construction to actually create the object only at first access, and it pass it a property called Pattern&lt;/p></description></item><item><title>CCNEt and Unable to read the specified saved state The configuration data may be invalid</title><link>https://www.codewrecks.com/post/old/2008/04/ccnet-and-unable-to-read-the-specified-saved-state-the-configuration-data-may-be-invalid/</link><pubDate>Thu, 24 Apr 2008 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/ccnet-and-unable-to-read-the-specified-saved-state-the-configuration-data-may-be-invalid/</guid><description>&lt;p>Yesterday one of my colleagues stopped for a while the cc.net in our server, then this morning I look at the dashboard and find an error&lt;/p>
&lt;blockquote>
&lt;p>Unable to read the specified saved state. The configuration data may be invalid.&lt;/p>&lt;/blockquote>
&lt;p>after some minutes wendering in internet trying to find a solution I check the cc.net directory, in my server is &lt;strong>D:\CruiseControl\CruiseControl.NET\server&lt;/strong>. Now in this directory there are some files with &lt;em>state&lt;/em>extension, one for each project. It turns out that a file has zero lenght :(, moreover I start cc.net with debug active and in log file I see&lt;/p></description></item><item><title>A new container for Inversion of Control</title><link>https://www.codewrecks.com/post/old/2008/02/a-new-container-for-inversion-of-control/</link><pubDate>Wed, 27 Feb 2008 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/a-new-container-for-inversion-of-control/</guid><description>&lt;p>I’ve stumbled onto &lt;a href="http://code.google.com/p/autofac/">Autofac&lt;/a>, this seems to be a new IOC container, that promise good thing….maybe it’s worth to take a look at.&lt;/p>
&lt;p>Alk.&lt;/p></description></item><item><title>Linq and Domain Model</title><link>https://www.codewrecks.com/post/old/2008/02/linq-and-domain-model/</link><pubDate>Mon, 04 Feb 2008 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/linq-and-domain-model/</guid><description>&lt;p>For those loving the Domain Model approach, LINQ could be the most interesting features of VS2008. Here is a stupid example. When you have to transfer data to the UI, usually you do not want to pass to the UI the real object of the domain, but it is better to use some DTO. Converting a list of domain object into DTO can be a boring issue, but with linq it is really simple. Here is a simple domain with a &lt;em>Customer&lt;/em>object and &lt;em>Address&lt;/em>object. The Customer object has a collection of address, because a people can have more than one address, but I need to show into the UI only two main information, the fullname and the address expressed as string, so I created a CustomerDto&lt;/p></description></item></channel></rss>