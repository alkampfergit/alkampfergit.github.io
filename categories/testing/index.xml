<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Codewrecks</title><link>https://www.codewrecks.com/categories/testing/</link><description>Recent content in Testing on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Jun 2016 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Create Parametrized test to allow for simpler Builds</title><link>https://www.codewrecks.com/post/old/2016/06/create-parametrized-test-to-allow-for-simpler-builds/</link><pubDate>Sat, 25 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-parametrized-test-to-allow-for-simpler-builds/</guid><description>When it is time of running unit test in a TFS or TeamCity Build, often you face the problem to run tests with options different from those one used in Developer Machine. As an example we have tons of tests that requires a MongoDb and and ElasticSearch or Solr integration.
While it is quite normal for developers to have everything installed in local dev box, it could be annoying to provide MongoDb and ElasticSearch installed on all agent machines.</description></item><item><title>Running Unit Tests on different machine during TFS 2015 build</title><link>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</link><pubDate>Sat, 04 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</guid><description>First of all I need to thanks my friend Jackob Ehn that pointed me to the right direction to create a particular build. In this post I’ll share with you my journey to run tests on a different machine than the one that is running the build.
For some build it is interesting to have the ability to run some Unit Test (nunit in my scenario) on a machine different from that one that is running the build.</description></item><item><title>Run Selenium Test in build vNext</title><link>https://www.codewrecks.com/post/old/2016/02/run-selenium-test-in-build-vnext/</link><pubDate>Sat, 20 Feb 2016 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/run-selenium-test-in-build-vnext/</guid><description>Previous Articles:
Parametrize NUnit Selenium Test to run with different browsers To run a Selenium test in a build vNext there are some modification to do apply to previous example. Let’s see how simple is running our Selenium Tests in a VSTS Build vNext.
The first modification requires adding a reference to PhantomJS, an Headless browser based on webkit that is capable of browsing a site and run javascript without a UI.</description></item><item><title>Parametrize NUnit Selenium Test to run with different browsers</title><link>https://www.codewrecks.com/post/old/2016/02/parametrize-nunit-selenium-test-for-run-with-different-browsers/</link><pubDate>Fri, 19 Feb 2016 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/parametrize-nunit-selenium-test-for-run-with-different-browsers/</guid><description>Parametrizing NUnit Tests is a new feature introduced with version 2.5 and this feature can be really useful in a variety of scenarios, but when it is time to use Selenium this is a killer feature.
I’m not going to cover Selenium WebDriver component, but basically it allows to write tests that can drive a Browser to execute test against your web application. In this scenario a killer feature is being able to specify the list of the browsers to use in a way that is completely indipendent from your test.</description></item><item><title>Build vNext support for deploying bits to Windows machines</title><link>https://www.codewrecks.com/post/old/2015/06/build-vnext-support-for-deploying-bits-to-windows-machines/</link><pubDate>Sat, 20 Jun 2015 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/build-vnext-support-for-deploying-bits-to-windows-machines/</guid><description>One of the most interesting trend of DevOps movement is continuous deployment using build machines. Once you get your continuous build up and running, the next step is customizing the build to deploy on one or more test environments. If you do not need to deploy in production, there is no need of a controlled release pipeline (Ex: Release Management) and using a simple build is the most productive choiche. In this scenario one of the biggest pain is moving bits from the build machine to target machines.</description></item><item><title>Quickly run Unit Test With VS 20122013</title><link>https://www.codewrecks.com/post/old/2015/04/quickly-run-unit-test-with-vs-20122013/</link><pubDate>Fri, 24 Apr 2015 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/04/quickly-run-unit-test-with-vs-20122013/</guid><description>With VS 2012 and newer versions we can run Unit Tests from various frameworks directly from Visual Studio IDE , thanks to the concept of Test Adapters. When you are doing Test Driven Development you usually go with Red/Green/Refactor workflow; what you need is a way to quickly run all or part of your unit tests after you modified the code. The quickest solution is using the option to Run Tests After Build but it is available only for Premium and Ultimate edition, but you can also run test with little manual intervention resorting to Keyboard Shortcut.</description></item><item><title>Nunit test not found for some assemblies with Visual Studio Test Runner</title><link>https://www.codewrecks.com/post/old/2015/04/nunit-test-not-found-for-some-assemblies-with-visual-studio-test-runner/</link><pubDate>Wed, 22 Apr 2015 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/04/nunit-test-not-found-for-some-assemblies-with-visual-studio-test-runner/</guid><description>I’ve a project in Visual Studio 2013 where one of the assembly containing Tests refuses to show tests in Test Explorer window. The solution has tests written both in Nunit and in MSpec, and everything is good except for that specific assembly. If you notice that Test Explorer window misses some tests, the first thing you need to check is the output windows, where you can find some output for Test Adapters.</description></item><item><title>How to deal with Slow Unit Tests with Visual Studio Test Runner</title><link>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</link><pubDate>Wed, 02 Jul 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</guid><description>The problem One of the most dreadful problem of Unit Testing is slow testing. If your whole suite of tests runs in 10 minutes, it is normal for developers not to run the whole suite at each build. One of the most common question is
How can I deal with slow Unit Tests?
Here is my actual scenario: in a project I’m working in, we have some multilingual full text search done in Elastic Search and we have a battery of Unit Tests that verify that searches work as expected.</description></item><item><title>Shim constructors to isolate 'Future Objects'</title><link>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</link><pubDate>Thu, 14 Jun 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</guid><description>I’ve already blogged previously about the new Shim Library of Visual Studio 2012
Using Shims in Visual Studio to test untestable code Shim and InstanceBehavior fallthrough to isolate part of the SUT. Now it is time to explore another scenario where shim can save your life. Suppose you are working with Hardware, Es. a barcode reader and you have a class in your system wrote in this way.</description></item><item><title>Shim and InstanceBehavior fallthrough to isolate part of the SUT</title><link>https://www.codewrecks.com/post/old/2012/05/shim-and-instancebehavior-fallthrough-to-isolate-part-of-the-sut/</link><pubDate>Thu, 10 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/shim-and-instancebehavior-fallthrough-to-isolate-part-of-the-sut/</guid><description>I’ve dealt in a previous post with the new Shim library in Vs11 that permits you to test “difficult to test code” and I showed a really simple example on how to use Shim to isolate the call to DateTime.Now to simulate passing time in a Unit Test. Now I want to change a little bit the perspective of the test, in the test showed in previous post I simply exercise the sut calling Execute() a couple of time, simulating the time that pass between the two calls.</description></item><item><title>Traffic light vNext</title><link>https://www.codewrecks.com/post/old/2012/05/traffic-light-vnext/</link><pubDate>Mon, 07 May 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/traffic-light-vnext/</guid><description>TrafficLight Experiment. Advantage of DDD approach to the problem Traffic Light, say goodbye to public properties It is a long time I did not post about simple Traffic Light experiment. I’ve ended with a super simple Domain with no Getters and no Setters, but there is still something I really do not like about that sample and it is represented by this test.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 [Fact] public void When_both_semaphore_are_red_one_become_green() { //move all to yellow fixed using (DateTimeService.</description></item><item><title>Using Shims in Visual Studio 11 to test untestable code</title><link>https://www.codewrecks.com/post/old/2012/04/using-shims-in-visual-studio-11-to-test-untestable-code/</link><pubDate>Fri, 27 Apr 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/using-shims-in-visual-studio-11-to-test-untestable-code/</guid><description>I always strive myself to write testable code, but it is not always easy, especially if you do not follow TDD red-green-refactor mantra. Code written without Unit Testing in mind is usually not so easy to test and when is time to modify code written by other, if you want to create a safety net of Unit Tests to avoid breaking code it is usually an hard task. The main problem is hardcode dependency from static functions because you cannot test a single function or method in isolation, forcing you to use pattern like Back door manipulation that makes test difficult to read, write and maintain.</description></item><item><title>Running NUnit and xUnit tests in TFS11 build</title><link>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</link><pubDate>Mon, 05 Mar 2012 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</guid><description>I’ve blogged in the past various solution to run NUnit tests during a TFS build, and now it is time to make it again for TFS11, but this time it is incredibly simple, because the new Test Runner supports multiple frameworks, so it works almost automatically.
You can read from Peter Provost blog that actually we have three plugin for UTE (Unit Test Explorer) available: Nunit, xUnit and HTML/JAvascript, they are simple.</description></item><item><title>Unit testing floating point numbers</title><link>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</link><pubDate>Thu, 05 May 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</guid><description>Testing for equality Floating point numbers is usually a bad idea, this because rounding occurs with floating point operations and you need to test with a tolerance. Suppose you test that some algorithm produces the expected result and you find that unit test fails with this message.
SharpTestsEx.AssertException : 2.36 Should Be Equal To 2.36.
This seems strange, but the problem is that the real value is 2.360000000003 that surely is different from 2.</description></item><item><title>Write clearer Unit Tests</title><link>https://www.codewrecks.com/post/old/2011/03/write-clearer-unit-tests/</link><pubDate>Fri, 25 Mar 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/write-clearer-unit-tests/</guid><description>One of the purpose of Unit Testing is writing small test that verify small functionality. When a test fails it should be immediately clear what is wrong, and reading the test should immediately convey the purpose of the test. Consider this one.
1 2 3 4 5 6 7 8 9 [Test] public void Smoke_Test_Of_XXXFilter() { GetYYYYParam param = new GetYYYYParam(); param.ForDateXXXRange( new DateTime(2011, 01, 01), new DateTime(2011, 02, 01)); _sut.</description></item><item><title>Writing a custom assertion for SharpTestEx</title><link>https://www.codewrecks.com/post/old/2011/03/writing-a-custom-assertion-for-sharptestex/</link><pubDate>Tue, 22 Mar 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/writing-a-custom-assertion-for-sharptestex/</guid><description>Actually SharpTestEx is my favorite way to make assertions in Unit testing. It has a lot of advantages, first of all it permits to write really clear assertions, then it works on the main Unit testing framework, so I can use the same assertion syntax for nunit and for MStest or MbUnit etc etc.
Another cool advantages is how simple is to extend the syntax, the IEnumerableConstraint has the Contain assertion to verify that an element is contained in a IEnumerable sequence of objects.</description></item><item><title>MTM and the cycle of a bug</title><link>https://www.codewrecks.com/post/old/2011/01/mtm-and-the-cycle-of-a-bug/</link><pubDate>Sat, 22 Jan 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/01/mtm-and-the-cycle-of-a-bug/</guid><description>Thanks to Microsoft Test Manager, testing teams have a complete tool to manage every part of testing, but since it is a new tool we need to understand how to use at its best, so I&amp;rsquo;ll try to explain a typical cycle of a test-bug-fix-test with MTM.
Everything starts with the definition of a Test Case in a Test suite, in this example I want to verify what happens when the user insert some specific quantity in the Chart page of TailSpin toys.</description></item><item><title>Test helper for a single method</title><link>https://www.codewrecks.com/post/old/2010/12/test-helper-for-a-single-method/</link><pubDate>Wed, 29 Dec 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/test-helper-for-a-single-method/</guid><description>I&amp;rsquo;ve build during years a test helper infrastructure that permits me to decorate a test fixture with some custom attributes that are capable to execute code before and after fixture setup/teardown or test setup/teardown. Now my dear friend Ugo needs for Dexter a modified version of this framework to be able to apply attributes directly to tests.
Basically Ugo needs to change the principal during each test, and he want to be able to write code like this one.</description></item><item><title>Castle and Automock avoid resolving properties</title><link>https://www.codewrecks.com/post/old/2010/11/castle-and-automock-avoid-resolving-properties/</link><pubDate>Tue, 30 Nov 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/castle-and-automock-avoid-resolving-properties/</guid><description>I use AutoMockingContainer extensively in my test projects, and I ‘ve build over time an automocking container that satisfy all of my needs. Thanks to Castle Windsor, using complex logic with the AutomockingContainer is a breeze. Suppose you have this ViewModel
Figure 1: ViewModel under test
The only aspect I&amp;rsquo;m interested in is the SelectedLinkResult public property, that have a lot of logic in the set part, this is needed to react on user selection change in the UI.</description></item><item><title>Feature Pack 2</title><link>https://www.codewrecks.com/post/old/2010/11/feature-pack-2/</link><pubDate>Mon, 22 Nov 2010 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/feature-pack-2/</guid><description>Some days ago the Feature pack 2 was released. This pack will extend testing capabilities of VS2010, and one of the coolest addition is a graphical editor for the UIMap of Coded UI test.
Another killer feature is the official support to run coded ui test With Mozilla firefox 3.5 or higher and support for Coded UI testing silverlight 4 applications.
If you are using Coded UI Test you cannot miss it.</description></item><item><title>Advanced capability in Web Performance Test of VS2010</title><link>https://www.codewrecks.com/post/old/2010/11/advanced-capability-in-web-performance-test-of-vs2010/</link><pubDate>Fri, 12 Nov 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/advanced-capability-in-web-performance-test-of-vs2010/</guid><description>Suppose you have a very stupid web page that adds two numbers together.
Figure 1: A stupid web page to sum two numbers
WOW, this is really a beautiful and useful web page :), now I want to register a web performance test that is able to use extraction rules to use this page as a Fibonacci Number calculator. I start registering a simple web performance test that adds 1 and 2 together.</description></item><item><title>Extending Visual Studio 2010 Web Test-Regex extraction</title><link>https://www.codewrecks.com/post/old/2010/11/extending-visual-studio-2010-web-testregex-extraction/</link><pubDate>Mon, 08 Nov 2010 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/extending-visual-studio-2010-web-testregex-extraction/</guid><description>In a previous post I showed how to create a custom loop that permits you to create a loop in a web performance test to iterate from the char ‘a&amp;rsquo; to char ‘z&amp;rsquo;, now I want to be able to create an inner loop that
for each loop extract all the names of the customers that satisfy the search for each name ask for detail I need another custom loop that is able to extract strings from the body of a response and iterate for each string.</description></item><item><title>Extending Visual Studio 2010 web test-Custom loop</title><link>https://www.codewrecks.com/post/old/2010/11/extending-visual-studio-2010-web-testcustom-loop/</link><pubDate>Tue, 02 Nov 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/extending-visual-studio-2010-web-testcustom-loop/</guid><description>Suppose you have a very simple page that permits you to search customers in northwind database and visualize orders, a classic master-detail page.
Figure 1: A classic Master-Detail page* Now suppose that you need to create a VS web test to search for each letter of the alphabet, and for each result page you should visit order details. Thanks to VS 2010 we have another construct for Web test called Loop, but there is no out-of-the-box loop condition to iterate with all the letters of the alphabet, so I need to build a custom one.</description></item><item><title>Extending Visual Studio 2010 Web Test</title><link>https://www.codewrecks.com/post/old/2010/10/extending-visual-studio-2010-web-test/</link><pubDate>Thu, 28 Oct 2010 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/extending-visual-studio-2010-web-test/</guid><description>Visual Studio has an integrated Web Test tool capable to record navigation in IE to create web tests that can be used even for Load Testing. One of the most interesting capabilities of this tool, is that it is pluggable.
Suppose you have recorded a simple test that verifies the registration procedure for a web site, this test suffer from a well known problem, whenever you will run it, it will try to register the same user again and again and it fails.</description></item><item><title>Testing capabilities in TFS 2010</title><link>https://www.codewrecks.com/post/old/2010/10/testing-capabilities-in-tfs-2010/</link><pubDate>Tue, 26 Oct 2010 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/testing-capabilities-in-tfs-2010/</guid><description>In TFS 2010 testing capabilities are really exceptional, and I&amp;rsquo;m not referring to testing tools that actually permits to record and replay web pages, CUIT etc, but I&amp;rsquo;m referring to the possibility to do a serious management of test plans for your projects.
I&amp;rsquo;ve seen in the past team doing test plan management with Excel, and if you are managing your test plan with Excel&amp;hellip;you have a problem. The reason is that Excel is not a tool designed to manage Test Cases, you can clearly use it to write down your test, but it is difficult to integrate it into your ALM process and really difficult to read.</description></item><item><title>Unit test oriented mind</title><link>https://www.codewrecks.com/post/old/2010/10/unit-test-oriented-mind/</link><pubDate>Wed, 20 Oct 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/unit-test-oriented-mind/</guid><description>After a lot of years of developing with Unit Test in mind, you surely got a UnitTest Oriented Mind :), what I mean is that is quite simple to understand the pattern of code needed to test a specific feature.
One of my dear friend asked me this question, he needs to test a call of a service in the Data Access Layer to verify that it does eager fetching and does not suffers of NHibernate N+1 problem.</description></item><item><title>Mock Service Locator and Automocking Container to the rescue</title><link>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-and-automocking-container-to-the-rescue/</link><pubDate>Mon, 18 Oct 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-and-automocking-container-to-the-rescue/</guid><description>In a previous post I dealt on how to write an AutoMockingContainer that is able to resolve a mock for unregistered objects. The goal was to be able to circumvent the problem of service locator.
Figure 1: During a test, the real container of the service locator is substituted with an AutoMocking container.
This is a standard way to work when you have to test classes that depends from Service Locator, override the Service Locator for the test, making it returns stub.</description></item><item><title>Mock Service Locator Automocking container and the hard life of testers</title><link>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</link><pubDate>Sat, 16 Oct 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</guid><description>I know, service locator is an antipattern, but sometimes, when you begin to refactor existing code written with no IoC in mind, service locator can help you a little bit in restructuring your code. A service locator pattern work this way: you have some static or gloablly avaliable class named: ServiceLocator or IoC, and every object can query it for service implementation.
Figure 1: Simple schema of Service Locator Pattern, each object can query the SL asking for service</description></item><item><title>Change return value of a mock based on parameters in Rhino mocks</title><link>https://www.codewrecks.com/post/old/2010/06/change-return-value-of-a-mock-based-on-parameters-in-rhino-mocks/</link><pubDate>Wed, 30 Jun 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/06/change-return-value-of-a-mock-based-on-parameters-in-rhino-mocks/</guid><description>Sometimes there is the need to change the return value of an expectation to a Mock with a value based on parameters used in the call. Suppose you need to create a mock, and want to verify that the method DoInt() gets called with a value greater than 42 and it should return the value augmented by one, how you can setup the expectation?
The secret is in the WhenCalled method exposed by the mock, that permits you to access the full MethodInvocation object that gets generated during the real invocation.</description></item><item><title>Slow database test with SqlLite</title><link>https://www.codewrecks.com/post/old/2010/05/slow-database-test-with-sqllite/</link><pubDate>Wed, 12 May 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/05/slow-database-test-with-sqllite/</guid><description>I’ve a project where I wrote all nhibernate mapping tests against a sqllite db. At this time a test fixture gave me this result.
44 passed, 0 failed, 0 skipped, took 54,46 seconds (NUnit 2.5.5).
As you can see the time needed to run the test is quite high, and the worst stuff is that is gets higher over time, at the beginning of the project it is acceptable now it is becoming annoying.</description></item><item><title>AutoMockingContainer and mock used in the constructor</title><link>https://www.codewrecks.com/post/old/2010/05/automockingcontainer-and-mock-used-in-the-constructor/</link><pubDate>Thu, 06 May 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/05/automockingcontainer-and-mock-used-in-the-constructor/</guid><description>I use a custom version of AutoMockingContainer based on the class used in this blog. The standard approach does not work for object that depends on some interface in the constructor, but actually uses that interface in the constructor and you need to set expectation on it.
Basically you need a way to intercept the generation of mock and configure before the constructor of the dependant object is created. This is achieved with a simple trick, first of all the AutoMockingContainer implemnts a specific interface</description></item><item><title>Refactor to testability</title><link>https://www.codewrecks.com/post/old/2010/04/refactor-to-testability/</link><pubDate>Wed, 07 Apr 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/04/refactor-to-testability/</guid><description>One of the reason why people do not write tests, is that some code is difficult to test, and one of the main reason for this difficulty is coupling. The obvious solution is to write loosely coupled code from the beginning, but if you are working with legacy code this option is not applicable.
The problem is that if you have no test and the code is difficult to test you avoid to refactor; after all, if everything works as expected, why you should introduce bug with refactoring?</description></item><item><title>Be friendly with Web Test</title><link>https://www.codewrecks.com/post/old/2010/01/be-friendly-with-web-test/</link><pubDate>Tue, 26 Jan 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/be-friendly-with-web-test/</guid><description>I&amp;rsquo;m creating some web tests with Visual Studio to test an application in an end-to-end fashion. This is absolutely not a unit test, but I want to be able to launch a series of automatic tests against a web server to verify if the whole site satisfy an initial set of core requirements.
One of this test is used to verify if some filters are passed correctly to the Service Layer, because this is a really core feature, and sometimes it happened that someone changes name of parameters, binding will fail and filters does not work anymore on various pages.</description></item><item><title>Test infrastructure</title><link>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</link><pubDate>Tue, 24 Nov 2009 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</guid><description>Unit tests must be as clearer as possible, I found that in standard project I&amp;rsquo;m working, I use nhibernate + stored procedures for massive operations. Most of the tests contains code to preload database, recreate structure or manage transaction, so, lot of time ago I decided to build some infrastructure to make this possible.
It makes my test really simple to read. This test use SqlServer, and it needs to be transactional, so every test run inside a Transaction, but I can specify more complex stuff</description></item><item><title>Rhino Mocks Arrange Act Assert and expectation on generic methods</title><link>https://www.codewrecks.com/post/old/2009/08/rhino-mocks-arrange-act-assert-and-expectation-on-generic-methods/</link><pubDate>Thu, 27 Aug 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/rhino-mocks-arrange-act-assert-and-expectation-on-generic-methods/</guid><description>I have a project where some actions are to be scheduled by an external library. Each action can be instantiated by a constructor or by a static factory method, and I want to verify with the test that: all action declares static factory method and inside the factory methods all objects are resolved by a call to IoC.Resolve&amp;lt;T&amp;gt;. Since all the actions are in a specific assembly into a specific namespace, I wrote this test.</description></item><item><title>Using Pex in more complex environment a tale of</title><link>https://www.codewrecks.com/post/old/2009/08/using-pex-in-more-complex-environment-a-tale-of/</link><pubDate>Mon, 10 Aug 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/using-pex-in-more-complex-environment-a-tale-of/</guid><description>Some post ago I blogged about Pex, in that post I showed how to use pex to test a routine that does string manipulation, now that I have build a Msbuild Task (as blogged in this post) I want to try pex to analyze that task and find errors. If you simply run pex again the Execute method of the task you will obtain an error like this.
For those that know well MsBuild this error occours because the BuildEngine was not initialized, and this is obvious, because Pex have no idea on how to create a valid PeekTask to test.</description></item><item><title>Manage In memory nhibernate test with sqlite and database schema</title><link>https://www.codewrecks.com/post/old/2009/07/manage-in-memory-nhibernate-test-with-sqlite-and-database-schema/</link><pubDate>Fri, 24 Jul 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/manage-in-memory-nhibernate-test-with-sqlite-and-database-schema/</guid><description>When you work with nhibernate you usually write a lot of tests that interact with your database, mainly to test your mapping but also when you do not want to shield the session behind a IRepository. To avoid Slow Test you should use some In Memory database like Sqlite, but it can be problematic when you use features of your real database (like Sql Server) that are not supported by the Sqlite engine.</description></item><item><title>Integrate Nunit test into a Tfs build</title><link>https://www.codewrecks.com/post/old/2009/07/integrate-nunit-test-into-a-tfs-build/</link><pubDate>Sun, 19 Jul 2009 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/integrate-nunit-test-into-a-tfs-build/</guid><description>Since a lot of people use NUnit testing framework, it is of high importance knowing how to fully integrate nunit test runner inside a tfs build. The overall problem is that you can create a custom task, or using an existing one to run nunit tests, but the main problem is integrating nunit output with standard tfs output. The problem and a possible solution is described here.
This means that someone had already solved this problem for us :), and created an xslt that transforms a nunit-style output into a mstest-style output (.</description></item><item><title>Database Test With DataBase Edition</title><link>https://www.codewrecks.com/post/old/2009/06/database-test-with-database-edition/</link><pubDate>Fri, 19 Jun 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/database-test-with-database-edition/</guid><description>I really like the ability to use the Visual Studio Team System Database Edition to create Database Test where I can specify the Database Project with the structure and a DataGeneration Plan to preload data for testing.
While this is really good to create a set of unit test that are repeatable, it can slow up testing process during development. Let&amp;rsquo;s make an example, I need to made a change in a stored procedure, so I write some tests to verify the new features, verify that they fail, and then start to work.</description></item><item><title>Pex to the rescue</title><link>https://www.codewrecks.com/post/old/2009/06/pex-to-the-rescue/</link><pubDate>Tue, 16 Jun 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/pex-to-the-rescue/</guid><description>Pex is a product from microsoft research that is really useful for those Test Addicted developers. Pex is a White Box Testing tool for.Net, that is able to analyze your code to find every possible point of failure of a method or a class. This morning I had a couple of log from a server that runs a windows service that makes analysis on some text strings. These analysis where originally composed by some regular expressions, but since the amount of data is really big, I substitute some regexes with specialized routine that speeds up the time needed to finish the work.</description></item><item><title>Fluent Syntax for Assertion in msTest</title><link>https://www.codewrecks.com/post/old/2009/06/fluent-syntax-for-assertion-in-mstest/</link><pubDate>Wed, 10 Jun 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/fluent-syntax-for-assertion-in-mstest/</guid><description>Switching from Nunit to MsTest is quite simple, but the first thing I really miss with mstest was the lack of a fluent assertion syntax. Consider the assertion you must write if you want to check that a number is lesser than 100 or greater than 200
1 2 3 4 5 6 [TestMethod] public void BaseAssertFluentWithSyntaxHelperLtOrGtRo() { Int32 obj = 400; Assert.IsTrue(obj &amp;lt; 100 || obj &amp;gt; 200); } It is quite clear, but with fluent syntax you can write test like this</description></item><item><title>Test and Context</title><link>https://www.codewrecks.com/post/old/2009/06/test-and-context/</link><pubDate>Wed, 10 Jun 2009 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/test-and-context/</guid><description>For a Unit Test the most important concept, and probably the most difficult to manage is the concept of Fixture. Quite often part of the Fixture is composed by an external File. In a little project that I use as example for jQuery I have a really simple class that parses an XML file to create a menu for Asp.Net MVC enabled site.
In such a situation the fixture of the test is using different source files to test the class with different input.</description></item><item><title>Minimize test complexity</title><link>https://www.codewrecks.com/post/old/2009/06/minimize-test-complexity/</link><pubDate>Tue, 09 Jun 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/minimize-test-complexity/</guid><description>I have a function that does these steps
it accepts a string parameter let it call P Manipulate that parameter P, transforming in P1 with an algorithm that is contained in a specific class uses P1 it to ask for database instance of some classes and does a lot of manipulations and database operations Now I want only to test that the class calls the algorithm to transform P in P1.</description></item><item><title>Programmatically run a Data Generation Plan</title><link>https://www.codewrecks.com/post/old/2009/06/programmatically-run-a-data-generation-plan/</link><pubDate>Mon, 01 Jun 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/programmatically-run-a-data-generation-plan/</guid><description>I&amp;rsquo;m quite surprised, I was simply looking for a way to run a Data Generation Plan (.dgen) file in Visual Studio Team Edition, but it seems to me that the class that does this have some internal methods. When You generate the first database test Visual Studio ask you all information to run schema sync and data generation, if you look at generated code you can see this code.
1 2 3 4 5 6 7 [AssemblyInitialize()] public static void IntializeAssembly(TestContext ctx) { //Setup the test database based on setting in the configuration file DatabaseTestClass.</description></item><item><title>mstest environment for unit testing</title><link>https://www.codewrecks.com/post/old/2009/05/mstest-environment-for-unit-testing/</link><pubDate>Tue, 26 May 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/mstest-environment-for-unit-testing/</guid><description>I&amp;rsquo;ve quite always used Nunit for unit testing, I had some little project with mbUnit and a try with xUnit, but I feel comfortable with Nunit so I never had the need to switch to other environment. Now I wanna take a shot to msTest, mainly because it is fully integrated with visual studio and it has some interesting option.
I&amp;rsquo;ll try as much as possible to point out the differences between them in future posts.</description></item><item><title>The importance of Factories in testing</title><link>https://www.codewrecks.com/post/old/2009/05/the-importance-of-factories-in-testing/</link><pubDate>Fri, 15 May 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/the-importance-of-factories-in-testing/</guid><description>One of the most frustrating stuff is refactoring code where errors gets discovered at run-time and not at compile time. These days I&amp;rsquo;m refactoring a section of a project, since some concepts are changed I needed to change also some database columns names.
Since naming of the table follows a convention that is not fully object oriented, it is easy to made mistake and mistype a column name in the mapping for nhibernate, for this reason I always create smoke test to verify that I&amp;rsquo;m able to save and reload all mapped classes in a database that is a empty copy of developing master database.</description></item><item><title>Mantain your test code carefully</title><link>https://www.codewrecks.com/post/old/2009/05/mantain-your-test-code-carefully/</link><pubDate>Mon, 11 May 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/mantain-your-test-code-carefully/</guid><description>I&amp;rsquo;m working on a project where access to the db is mixed, some data is managed with nhibernate and some other data with stored procedure. This is needed because the project was born without nhibernate, and moreover there are operation that needs to managed bulk insert of a lot of data and I need these operation to be superquick. Despite the reason why I’m working this way I have a lot of test that are bound to database.</description></item><item><title>The importance of overriding ToString for tests</title><link>https://www.codewrecks.com/post/old/2009/04/the-importance-of-overriding-tostring-for-tests/</link><pubDate>Fri, 24 Apr 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/the-importance-of-overriding-tostring-for-tests/</guid><description>Standard behavior of ToString is to print class or structure name. Sometimes if you never need to call tostring for class in application you will avoid to override this basic behavior. Suppose you have this simple structure.
1 2 3 4 public struct Range { public Int32 Left; public Int32 Rigth; This is a simple structure with two field, now I have this test.
1 2 MultiRange res = wcbe.</description></item><item><title>Multithread testing</title><link>https://www.codewrecks.com/post/old/2009/04/multithread-testing/</link><pubDate>Fri, 10 Apr 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/multithread-testing/</guid><description>Testing multithreaded objects are quite complex. I have an object that keeps care of executing some action in a different thread, monitor progress of that action, and then signal to the caller progress and return value. for testing purpose I write a simple action like this.
1 2 3 4 5 6 7 8 9 10 11 internal class TestStandard : AsyncOperationBase { protected override object InnerExecute() { for (int i = 0; i &amp;lt; 10; i++) { OnProgress(i * 10, (i * 10).</description></item><item><title>Smoke Test to the rescue</title><link>https://www.codewrecks.com/post/old/2009/03/smoke-test-to-the-rescue/</link><pubDate>Mon, 02 Mar 2009 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/smoke-test-to-the-rescue/</guid><description>A particular type of Unit Test are called Smoke Tests, and are of great importance in a project. This term originally derive from Electronics where the smoke test means &amp;ldquo;light the board and look if you can see any smoke&amp;rdquo;. In software engineering we can use the same metaphor to verify if some piece of software &amp;ldquo;smokes when used&amp;rdquo;.
The purpose of a smoke test is to verify some basilar property of a component, and can be very simple, it simply calls some functions or class methods, just to see if they exists or if they throw exceptions when called.</description></item><item><title>Test Drive with database</title><link>https://www.codewrecks.com/post/old/2009/01/test-drive-with-database/</link><pubDate>Tue, 20 Jan 2009 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/test-drive-with-database/</guid><description>If you need to test drive with a database you can find a lot of problems. The basics of test drive with database is using a database sandbox, and creating a series of scripts that takes the database in a well known state before the run of each test.
In my projects I use NHibernate but there are quite often also some part of the database handled with stored or accessed through a datalayer.</description></item><item><title>Again On randomizer</title><link>https://www.codewrecks.com/post/old/2008/12/again-on-randomizer/</link><pubDate>Sat, 06 Dec 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/12/again-on-randomizer/</guid><description>If you read last post you saw how to write a simple randomizer for the execution of NUnit test, but it has a problem, it mess up the nunit interface. The solution is not to ovveride the Tests property, but overriding the way the test are executed. To make it simple I simply take the TestSuite.cs file from original Nunit source code, then I simply change the order in witch the test are executed.</description></item><item><title>Randomizer nunit addin</title><link>https://www.codewrecks.com/post/old/2008/12/randomizer-nunit-addin/</link><pubDate>Sat, 06 Dec 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/12/randomizer-nunit-addin/</guid><description>Nunit can be extended in many way writing simple addins, I never tried to write an addin but since Nunit have some limitations I do not like I tried to create a very simple addin that permits me to randomize execution of tests.
Randomization is really an interesting stuff because it helps to find interacting tests since at each execution we run tests in different orders. The code can be found at this subversion repository (http://dotnetmarcheproject.</description></item><item><title>On SetUp and TearDown in Nunit</title><link>https://www.codewrecks.com/post/old/2008/12/on-setup-and-teardown-in-nunit/</link><pubDate>Sat, 06 Dec 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/12/on-setup-and-teardown-in-nunit/</guid><description>SetUp and TearDown are two attributes used to mark two methods as prologue and epilogue for each test of a fixture. Here is a typical use in test based on Rhino Mock:
1 2 3 4 5 6 7 8 9 10 11 12 13 private MockRepository mrepo; [SetUp] public void SetUp() { mrepo = new MockRepository(); } [TearDown] public void TearDown() { mrepo.VerifyAll(); } With these two attributes you can automate the creation and verification of MockRepository, but it is so good?</description></item><item><title>Terminating a fluent interface</title><link>https://www.codewrecks.com/post/old/2008/10/terminating-a-fluent-interface/</link><pubDate>Tue, 28 Oct 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/terminating-a-fluent-interface/</guid><description>I usually use a fluent interface to make assertion on data on database, a typical assertion looks like
1 2 3 4 5 DbAssert.OnQuery(&amp;#34;select * from tablename&amp;#34;) .That(&amp;#34;column1&amp;#34;, Is.EqualTo(15)) .That(&amp;#34;column2&amp;#34;, Is.EqualTo(90)) .That(&amp;#34;column2&amp;#34;, Is.EqualTo(99)) .ExecuteAssert(); This makes me possible to express simple database assertion to verify database conditions expressed by a series of Nunit.Constraints on field of a query, it is very useful when I have to test stored procedures or verify that NHibernate mappings works as expected.</description></item><item><title>How to report a bug the importance of good details and reproducibility information</title><link>https://www.codewrecks.com/post/old/2008/10/how-to-report-a-bug-the-importance-of-good-details-and-reproducibility-information/</link><pubDate>Mon, 20 Oct 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/how-to-report-a-bug-the-importance-of-good-details-and-reproducibility-information/</guid><description>During application&amp;rsquo;s lifecycle, the activity of bug tracking is a really important one. You should use some software (Team foundation server or some free tools like mantis) to keep track of application&amp;rsquo;s bugs. Usually, even if you use Test Driven Approach, you cannot intercept all bugs with unit tests, so you should be prepared to receive some issues in the Bug Tracker.
Issues are inserted by testers, usersor developer or whoever person that uses the software during development, and it is really important that bugs are reported correctly.</description></item><item><title>Database Testing</title><link>https://www.codewrecks.com/post/old/2008/09/database-testing/</link><pubDate>Tue, 30 Sep 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/database-testing/</guid><description>Tests and Databases are two words that does not fit well together. Usually tests involving database interaction suffers by these smells
Interacting Test: since each test can modify data in database it is highly possible that data written by a test can make another test fail. Moreover if more than one developer use the same database to run the test you can face a Test Run War smell, where two or more unrelated tests are run concurrently on the same resources.</description></item><item><title>How many test should I write</title><link>https://www.codewrecks.com/post/old/2008/09/how-many-test-should-i-write/</link><pubDate>Thu, 25 Sep 2008 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/how-many-test-should-i-write/</guid><description>One of my italian Friend once asked me what is the percentage of code coverage that you consider enough for your tests?. The answer is that probably there is not one.
If you write a project on your own you can set some limit (Es. 80% code coverage) but in my experience, in the real world, quite often you work in a team that does not use unit testing at all.</description></item><item><title>Slow tests with nunit 24 and nhibernate</title><link>https://www.codewrecks.com/post/old/2008/09/slow-nunit-24-test-with-nhibernate-maybe-it-is-log-problem/</link><pubDate>Fri, 05 Sep 2008 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/slow-nunit-24-test-with-nhibernate-maybe-it-is-log-problem/</guid><description>I noticed that when I used nunit 2.4 test runner it is really slower than 2.2. The reason is that in 2.4 the nunit test runner will use log4net as default logger, and if you do not disable logging, you will see in log tab an enormous amount of text.
The reason is that nunit used default log level of “DEBUG”, and this in turn means that nhibernate will run with full logging enabled, and this is a really waste of time because nhibernate really log everything with DEBUG level.</description></item><item><title>Run test automatically</title><link>https://www.codewrecks.com/post/old/2008/07/run-test-automatically/</link><pubDate>Tue, 15 Jul 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/07/run-test-automatically/</guid><description>The third commandment of unit testing is “Run Test Automatically”, Do not rely on individual developers to run test, the temptation to avoid test run is behind any corner. Use some Continuous Integration tool like CC.NET to make all tests run on every check-in, and set the CC to broke the build if some test fails.
It is easy to setup a central system that runs your tests at every modification on the code, and most important, noone should check-in code that broke some tests, because it would be a regression of the software itself.</description></item><item><title>Run test code often</title><link>https://www.codewrecks.com/post/old/2008/07/run-test-code-often/</link><pubDate>Fri, 11 Jul 2008 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/07/run-test-code-often/</guid><description>Some days ago I was thinking about the good practices of testing. Immediately after the first commandment “test code is First Class code” it comes the “Run test code really often”.
If you run the test code often, you immediately know when you have broke something. Think to the following scenario, you write 200 lines of new code, then you decide to write tests for them, but you discovered that a large amount of old tests are broken; now it is difficult to say where did you introduce bugs, and you need to spent time to find the cause of the error.</description></item><item><title>Test code is quotFirst class codequot</title><link>https://www.codewrecks.com/post/old/2008/07/test-code-is-first-class-code/</link><pubDate>Wed, 02 Jul 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/07/test-code-is-first-class-code/</guid><description>In an hypothetical “ten Commandments” of the Unit Test probably the first is
Test code is First Class Code
I believe that one of the worst mistake a developer can do when writing Unit Tests is to consider unit test “second class code”, in the end the test code does not goes into production (pay attention to the smell test logic in production) so it does not worth to spend too much time with Test Code.</description></item><item><title>The wonderful world of Unit Testing</title><link>https://www.codewrecks.com/post/old/2008/07/the-wonderful-world-of-unit-testing/</link><pubDate>Tue, 01 Jul 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/07/the-wonderful-world-of-unit-testing/</guid><description>Last Friday our usergroup organized a Workshop with the argument “unit Testing and asp.net MVC”. The event was good, I was one the speakers, and did a presentation on “Introduction to Testing”. The audience was interested, most of the attendee remained until 20:00 PM, even if the official Close Time was 19:00. People did a lot of questions and seems that the overall interest for Unit Testing world is growing.</description></item><item><title>A better nUnit assertion to verify content of a database Row</title><link>https://www.codewrecks.com/post/old/2008/06/a-better-nunit-assertion-to-verify-content-of-a-database-row/</link><pubDate>Mon, 30 Jun 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/a-better-nunit-assertion-to-verify-content-of-a-database-row/</guid><description>Sometimes you need to check that the content of various fields in a database row match some constraints, in this situation a little helper could make it possible to write more elegant assertion
1 2 3 4 5 6 7 8 9 10 11 12 [Test] public void TestInsertACustomerDataFluent() { NorthwindCustomerDao sut = new NorthwindCustomerDao(); sut.CreateACustomer(&amp;#34;RICCI&amp;#34;, &amp;#34;DotNetMarche&amp;#34;, &amp;#34;contact&amp;#34;, &amp;#34;Loc piano frassineta 31&amp;#34;); DbAssert.OnQuery( @&amp;#34;SELECT * from Customers where CustomerId = &amp;#39;RICCI&amp;#39;&amp;#34;) .</description></item><item><title>Nunit and standard assertion</title><link>https://www.codewrecks.com/post/old/2008/06/nunit-and-standard-assertion/</link><pubDate>Tue, 03 Jun 2008 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/nunit-and-standard-assertion/</guid><description>If you use Nunit and use standard System.Diagnostics.Debug.Assert in your code, you can get tired of the messagebox that is raised when a standard assertion fail. To avoid this, you can use app.config to completely remove all listener during the test.
1 2 3 4 5 6 7 &amp;lt;system.diagnostics&amp;gt; &amp;lt;trace autoflush=&amp;#34;false&amp;#34; indentsize=&amp;#34;4&amp;#34;&amp;gt; &amp;lt;listeners&amp;gt; &amp;lt;clear/&amp;gt; &amp;lt;/listeners&amp;gt; &amp;lt;/trace&amp;gt; &amp;lt;/system.diagnostics&amp;gt; This solves the problem, now you can launch nunit interface, run the test and get rid of the annoying messagebox that gets displayed when a standard assertion fail.</description></item><item><title>Nunit and PropertyConstraint</title><link>https://www.codewrecks.com/post/old/2008/04/nunit-and-propertyconstraint/</link><pubDate>Mon, 07 Apr 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/nunit-and-propertyconstraint/</guid><description>The PropertyConstraint of nunit is useful to assert some condition on a property of an object. This constraint permits to specify the Name of the property and then a constraint on his value. The only thing that miss is a better error message when the object does not contains the specified property. Suppose you write a wrong test like this
1 2 3 4 5 [Test] public void TestErrorMessages() { List&amp;lt;SimpleTwoProps&amp;gt; list = CreateTestList(); Assert.</description></item><item><title>NUNIT and C 35</title><link>https://www.codewrecks.com/post/old/2008/03/nunit-and-c-35/</link><pubDate>Fri, 21 Mar 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/nunit-and-c-35/</guid><description>One of the most important characteristic of a test is readability, the test should be clear and its intent should be self evident. When working with domain object it is recurring to make test to assert that in some collection we have a fixed amount of objects with a given property equal to a given value. Suppose we have a simple class with two properties, PropertyA and PropertyB. Lets build a little collection to make some assert.</description></item><item><title>Nunit fluent some details</title><link>https://www.codewrecks.com/post/old/2008/02/nunit-fluent-propertyadaptor/</link><pubDate>Tue, 05 Feb 2008 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/nunit-fluent-propertyadaptor/</guid><description>In old post I spoke about one little library to easy the use of nunit assertion with fluent interface. All the game is done with a MyConstraintBuilder class that offers some basic properties and methods to build the assert expression. Internally I use a stack to store all the constraint
privateStack&amp;lt;Constraint&amp;gt; constraints = newStack&amp;lt;Constraint&amp;gt;();
this permits me to create simple fluent interface in this way.
publicMyConstraintBuilder Or {
get {</description></item><item><title>Comparing Entities</title><link>https://www.codewrecks.com/post/old/2007/12/comparing-entities/</link><pubDate>Fri, 07 Dec 2007 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/12/comparing-entities/</guid><description>This morning a friend of mine post about testing for equality of two class. My opinion is that to test if we have the need to test if two entities has all or some property equals it is better not to override equals or modify the original entity. I’m collecting a series of helpers class I written over time for NUNIT and I’m now able to write simple test like this.</description></item><item><title>More fluent on Nunit</title><link>https://www.codewrecks.com/post/old/2007/12/more-fluent-on-nunit/</link><pubDate>Fri, 07 Dec 2007 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/12/more-fluent-on-nunit/</guid><description>In the previous post I talked about nunit and fluent interface, I did some modification, now I can write
[Test]
publicvoid TestSimpleEqualsConditionedProperty3() {
SimpleThreeProps obja = newSimpleThreeProps(“test”, 15, “EQ”);
SimpleThreeProps objb = newSimpleThreeProps(“test”, 1, “EQ”);
Assert.That(obja, MyIs.SomePropertiesEqualTo(objb, “PropA”, “ThirdProperty”)
.And.Property(“PropB”).GreaterThan(14));
}
Now I can check for equality with a list of properties but added support to create constraint over the single property using the basic property constraint of nunit.
Alk</description></item><item><title>Model View Controller and Cross Thread Ui methods invoke</title><link>https://www.codewrecks.com/post/old/2007/10/model-view-controller-and-cross-thread-ui-methods-invoke/</link><pubDate>Tue, 30 Oct 2007 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/10/model-view-controller-and-cross-thread-ui-methods-invoke/</guid><description>If you adopt a MVC pattern for your code in windows forms, each form should implements some Interface to make possible for the controller to communicate with the UI. This is needed so the Controller does not work directly with the form but instead with an interface such as IShippingUi. But what happens when the function of the controller are invoked not by the main thread that rules the UI&amp;hellip;the result is an exception.</description></item><item><title>Complex fixture teardown</title><link>https://www.codewrecks.com/post/old/2007/09/complex-fixture-teardown/</link><pubDate>Sat, 08 Sep 2007 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/09/complex-fixture-teardown/</guid><description>Download the code of the post.
Have you ever deal with tests having really complex fixtures? Sometimes it happens for projects that are not designed for testability, quite often you need to refactor, you begin to prepare a series of basic tests, but the interactions between the components of the system are really complex, and when a test gone wrong the whole suite is compromised. Yesterday I dealed with a series of tests that needed a really complex fixture, composed by classes that opened sockets and did all sort of complex thing (remoting, socket, shared variable, etc etc).</description></item><item><title>WatiN and weird names of aspnet controls</title><link>https://www.codewrecks.com/post/old/2007/05/watin-and-weird-names-of-aspnet-controls/</link><pubDate>Wed, 30 May 2007 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/watin-and-weird-names-of-aspnet-controls/</guid><description>Asp.Net gives to HTML controls weird names, composed by the hierarchy of control used to generate the page. This causes problems for example writing WatiN test, because we cannot use Find.ById or use the Id of the control, because if we will change the layout of the page the name of the controls will change.
One of the possible solution is to use regular expression, using a regex that will search for controls that ends with a specific string value.</description></item><item><title>WatiN recorder</title><link>https://www.codewrecks.com/post/old/2007/05/watin-recorder/</link><pubDate>Tue, 29 May 2007 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/watin-recorder/</guid><description>Recently I discovered WatiN library to automate testing of web site with IE. This library is very useful, but sometimes writing test is a tedious process, for this reason there are some freeware recorder that are able to record a navigation in IE and automatically create code for WatiN test. One tool is WatinTestRecord, available here, it is a good product, and it’s freeware. Another product is Watin Recorder Avaliable here.</description></item><item><title>Design for testability</title><link>https://www.codewrecks.com/post/old/2007/05/design-for-testability/</link><pubDate>Fri, 11 May 2007 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/design-for-testability/</guid><description>Testing a web application can be challenging, there are a lot of tools to accomplish such a difficult task, replay browser capable of recording the input of the user, library as nUnit Asp.NET or WatiN, but in my opinion the best way to do unit testing on a site, is design the site itself to be testable. In the example attached with this article I show a very simple asp.net page to add two integer number together starting from a canonical version to a more testable form.</description></item></channel></rss>