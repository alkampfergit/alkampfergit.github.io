<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Codewrecks</title><link>https://www.codewrecks.com/categories/security/</link><description>Recent content in Security on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 31 Dec 2023 06:00:00 +0000</lastBuildDate><atom:link href="https://www.codewrecks.com/categories/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Always use rebase when you pull in Git</title><link>https://www.codewrecks.com/post/github/git-pull-rebase/</link><pubDate>Sun, 31 Dec 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/git-pull-rebase/</guid><description>&lt;p>I have always suggested people to only use rebates when you pull changes from the branch you are working on in git. And this because, actually, using merge will make your repository history a mess.&lt;/p>
&lt;p>For a lot of years, this kind of suggestion was not so common. I&amp;rsquo;ve always looked at the teams happily used merge and then complain about how difficult is to read the story of the repository. At a certain moment, get added a nice option that changed the default strategy of reconciled modification when you pull. And instead of using standard merge, you can configure to use rebase.&lt;/p></description></item><item><title>GitHub Copilot-X in action: simple code conversion</title><link>https://www.codewrecks.com/post/github/copilot-x-chat-rewrite/</link><pubDate>Tue, 09 May 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-x-chat-rewrite/</guid><description>&lt;p>New &lt;a href="https://github.com/features/preview/copilot-x">Copilot X&lt;/a> from &lt;a href="https://github.com">GitHub&lt;/a> is the next big thing for programmers, because it &lt;strong>brings the power of copilot to the next level&lt;/strong>. Actually I&amp;rsquo;m testing the integrated chat in Visual Studio and Visual Studio Code. The tool is not always perfect, but we really need to understand how and where to use it to gain maximum advantage.&lt;/p>
&lt;p>We often encounter &lt;strong>conversion operations&lt;/strong> that are very mechanical, boring, and prone to errors due to their repetitiveness. When programming, we are very focused when doing something interesting, but when we perform simple operations, such as trivial conversions, we often make mistakes because our mind is elsewhere. Consider the following situation: you have an &lt;strong>aspnet core controller that needs to be converted to a server-side Blazor component&lt;/strong>.&lt;/p></description></item><item><title>Troubleshooting GitHub Codespaces PGP Signing Problems</title><link>https://www.codewrecks.com/post/github/codespaces-troubleshooting/</link><pubDate>Thu, 13 Apr 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-troubleshooting/</guid><description>&lt;p>If you use &lt;strong>GPG keys&lt;/strong> to verify your commits, you&amp;rsquo;ll be glad to know that in &lt;strong>GitHub Codespaces&lt;/strong>, signing is done automatically. All you need to do is &lt;strong>configure the settings&lt;/strong> in your account, and a key will be injected into your Codespaces. As a result, every commit you make in your Codespace will be automatically signed and verified.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/pgp-codespace.png"> &lt;img src="../images/pgp-codespace.png" alt="Configure PGP in codespace" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Configure PGP in codespace&lt;/em>&lt;/p></description></item><item><title>Quickly create a test instance of KeyCloak in Azure Services</title><link>https://www.codewrecks.com/post/security/start-keycloak-test-instance-in-azure-services/</link><pubDate>Mon, 07 Nov 2022 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/start-keycloak-test-instance-in-azure-services/</guid><description>&lt;p>&lt;a href="https://www.keycloak.org/">Keycloak&lt;/a> is a leader in the landscape of Identity Provider and if you need a quick instance &lt;strong>for dev testing, you can spin an instance in Azure App Services in less than a minute&lt;/strong>.&lt;/p>
&lt;p>First of all creates a new Azure App Services and choose to use Docker&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/keycloak-app-services.png"> &lt;img src="../images/keycloak-app-services.png" alt="Create a docker based app service" />&lt;/a>
&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Create a docker based app service.&lt;/em>&lt;/p>
&lt;p>Now you can simply choose &lt;strong>the image you want to run, jboss/keycloak&lt;/strong> is perfectly ok for my scenario.&lt;/p></description></item><item><title>Configure Data Protection API in .NET Core</title><link>https://www.codewrecks.com/post/security/asp-net-core-data-protection-api/</link><pubDate>Thu, 03 Nov 2022 16:00:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/asp-net-core-data-protection-api/</guid><description>&lt;p>Asp.NET core and .NET core comes with a nice interface to handle encryption, as &lt;a href="https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection">documented here&lt;/a>. Now my goal is configuring data protection api for multiple instance of a software, so we need to &lt;strong>share keys in a shared location and at the same time keep them secret&lt;/strong>. Luckily enough .NET core already has everything we need.&lt;/p>
&lt;p>The overall solution will need two parameter to our program, &lt;strong>Folder where to store keys and a certificate thumbprint to protect the keys&lt;/strong>. In my scenario I want to use Self Signed Certificate, because I&amp;rsquo;m not using TLS or other form of server side encryption, I only need an extra layer of protection &lt;strong>to allow reading keys only from machines that have my certificate installed&lt;/strong>. First of all I need some code to generate a Self Sign Certificate, to simplify installation I simply want IT guy to use swagger interface to generate a self signed certificate and then install in all the machine he/she needs.&lt;/p></description></item><item><title>Accessing Office 365 with IMAP and OAuth2</title><link>https://www.codewrecks.com/post/security/accessing-office-365-imap-with-oauth2/</link><pubDate>Mon, 01 Aug 2022 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/accessing-office-365-imap-with-oauth2/</guid><description>&lt;h1 id="the-situation">The situation&lt;/h1>
&lt;p>I&amp;rsquo;ve had the need to upgrade some code that uses IMAP folder to download email, and it uses sometimes Office365 accounts, but Microsoft &lt;strong>will remove in the future basic auth &lt;a href="https://docs.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/deprecation-of-basic-authentication-exchange-online">as described here&lt;/a> in favor of OAuth2 based authentication.&lt;/strong> This is a good move because Basic Auth is not really secure, and with modern authentication and OAuth2 you can &lt;strong>force two factor auth and other more secure login alternative&lt;/strong>.&lt;/p></description></item><item><title>Developers and TLS what could possibly go wrong</title><link>https://www.codewrecks.com/post/security/developers-and-tls/</link><pubDate>Sat, 30 Apr 2022 08:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/developers-and-tls/</guid><description>&lt;h1 id="the-problem-of-not-using-tls-in-developer-machines">The problem of not using TLS in developer machines&lt;/h1>
&lt;p>Lots of time ago, at the time Windows Communication Foundation was a thing, there were good &lt;strong>automatic protections by Microsoft that prevent passing credentials in clear text over an unencrypted (non TLS) channel&lt;/strong>. I was amazed by the number of solution you can find in the internet that to solve the problem suggests to developer to create an &lt;strong>unsecure channel that does not perform this check, allowing for clear text credential to be sent in a standard HTTP channel&lt;/strong>.&lt;/p></description></item><item><title>How to handle certificate error in dotnet WebClient object</title><link>https://www.codewrecks.com/post/security/handle-certificate-errors-in-dotnet-webclient/</link><pubDate>Fri, 18 Mar 2022 08:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/handle-certificate-errors-in-dotnet-webclient/</guid><description>&lt;h2 id="the-situation">The situation&lt;/h2>
&lt;p>This is a simple scenario: I use a WebClient object in .NET to perform some web request to a target web site, everything went good except when the code runs in Xamarin Android, &lt;strong>where it throws an exception in https connection&lt;/strong>. This is usually a puzzling moment, because I&amp;rsquo;m simply doing an HTTP GET request of a page, everything works outside Xamarin where all I got in response is an error telling me that the certificate is not ok.&lt;/p></description></item><item><title>GitHub Actions permission settings</title><link>https://www.codewrecks.com/post/github/action-permission/</link><pubDate>Sat, 27 Nov 2021 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/action-permission/</guid><description>&lt;p>Continuous integration is absolutely vital for a healthy software project, but in many situation &lt;strong>people gave little attention to security&lt;/strong>. If you are running CI workflows in your machine where &lt;strong>you control the code that is build and every script that is run by CI engine, you are pretty fine&lt;/strong>. In that scenario an attacker should take control of your code to run some malicious script during a CI run, but if you are using a third party task/extension/action, the situation is different.&lt;/p></description></item><item><title>Choose environment from branch in GitHub action</title><link>https://www.codewrecks.com/post/github/choose-environment-from-branch/</link><pubDate>Wed, 18 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/choose-environment-from-branch/</guid><description>&lt;p>I have a friend that asked me how to &lt;strong>choose an &lt;a href="https://docs.github.com/en/actions/reference/environments">enviroment&lt;/a> in a GitHub action based on the branch that triggered the action&lt;/strong>. Usually Environments are used in a sort of Promotion mechanism, where you start deploying on Test, then you have a manual or automatic approval to deploy on staging and finally to production. Even if this is a textbook scenario &lt;strong>sometimes you need to create a simple sequence of steps to deploy your software in an environment and you want to choose environment based on branch&lt;/strong>. If you deploy master you deploy on production, if you deploy develop you deploy test.&lt;/p></description></item><item><title>GitHub security scan - an example</title><link>https://www.codewrecks.com/post/security/github-security-scanning/</link><pubDate>Sat, 17 Jul 2021 15:10:00 +0200</pubDate><guid>https://www.codewrecks.com/post/security/github-security-scanning/</guid><description>&lt;p>I&amp;rsquo;ve already blogged &lt;a href="https://www.codewrecks.com/post/github/code-scanning-result/">on the security scanning capability offered by GitHub&lt;/a> and in this post I want to give you another example on a possible output. In previous example I&amp;rsquo;ve shown a result that is quite simple &lt;strong>the library identified a usage of ECB in AES encryption and flagged it as a wrong usage of crypto api&lt;/strong>. It is interesting but less impressive, after all it simply spotted the usage of an enum value related to a vulnerable CypherMode, something that it easy to spot.&lt;/p></description></item><item><title>Playing with Cryptography, Part 1</title><link>https://www.codewrecks.com/post/security/playing-with-cryptography-part1/</link><pubDate>Sat, 17 Jul 2021 09:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/playing-with-cryptography-part1/</guid><description>&lt;p>Cryptography is a fascinating subject, surely complex, but as a developer you probably have some &lt;strong>predefined libraries in your language/environment of choice that you can use&lt;/strong>. DotNet is not an exception, so I&amp;rsquo;ve decided to create a sample repository to play a little bit with all cryptography primitives to show how easy is to use them &lt;a href="https://github.com/alkampfergit/DotNetCoreCryptography">https://github.com/alkampfergit/DotNetCoreCryptography&lt;/a>.&lt;/p>
&lt;p>This is not a tutorial, it is more a repository where I played with API to gain more confidence with &lt;strong>.Net Core version of the API&lt;/strong>. The purpose is also to understand if you can &lt;strong>wrap Crypto API to make them simple to use for a developer, avoiding people to use them in different ways across a same software and to make them simpler to use&lt;/strong>.&lt;/p></description></item><item><title>CodeQL Scanning in GitHub</title><link>https://www.codewrecks.com/post/github/code-scanning-result/</link><pubDate>Sun, 14 Mar 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/code-scanning-result/</guid><description>&lt;p>As you can read directly from &lt;a href="https://github.blog/2020-09-30-code-scanning-is-now-available/">GitHub blog post&lt;/a> GitHub code scanning is now available and ready to use for your repositories.&lt;/p>
&lt;p>I&amp;rsquo;ve blogged in the past &lt;a href="https://www.codewrecks.com/post/github/code-scanning/">about code security scanning in GitHub&lt;/a> but in that post I didn&amp;rsquo;t show what happens when &lt;strong>analysis engine found some possible security problem in your code&lt;/strong>. When something is not ok, you can go on your Security GitHub tab to look for alerts.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/codeql-alert-result.png"> &lt;img src="../images/codeql-alert-result.png" alt="CodeQL alert results in your repository" />&lt;/a>
&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>CodeQL alert results in your repository&lt;/em>&lt;/p></description></item><item><title>Security Onion 2020 - The hunt</title><link>https://www.codewrecks.com/post/security/security-onion-hunt/</link><pubDate>Sun, 03 Jan 2021 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/security-onion-hunt/</guid><description>&lt;p>I&amp;rsquo;ve done another couple of videos about &lt;a href="https://securityonionsolutions.com/">Security Onion&lt;/a> focusing on how I can use &lt;em>&lt;strong>The hunt to look for anomalies in network traffic&lt;/strong>&lt;/em>. As for the previous video I give a disclaimer: I&amp;rsquo;m not a Security Onion expert, and those video are meant to keep track of my progress and to &lt;strong>help others to familiarize with the tool&lt;/strong>.&lt;/p>
&lt;p>In first video I start from an alert from &lt;a href="https://github.com/target/strelka">Strelka&lt;/a> and then proceed to &lt;strong>identify possible compromised machine in the network as well as finding external malicious IPs&lt;/strong>.&lt;/p></description></item><item><title>Kali Linux in Hyper-V system</title><link>https://www.codewrecks.com/post/security/kali-linux-in-hyper-v/</link><pubDate>Wed, 30 Dec 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/kali-linux-in-hyper-v/</guid><description>&lt;h2 id="kali-linux-on-windows">Kali Linux on Windows&lt;/h2>
&lt;p>Most of the time a &lt;a href="https://www.codewrecks.com/post/security/kali-linux-in-wsl2/">Kali Linux instance running in WSL&lt;/a> is more than enough to have some fun in a Windows box. Using WSL is really simple but &lt;strong>I have a couple of annoying problems that make my experience uncomfortable.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>UI experience is sluggish, and annoying&lt;/li>
&lt;li>I have very little control over networking.&lt;/li>
&lt;/ol>
&lt;p>Point 2 is the major pain point in my situation, I usually buy some inexpensive &lt;a href="https://www.codewrecks.com/post/security/kali-linux-in-wsl2/">Intel i350 T2 cards&lt;/a> on Ebay, to allow me to have &lt;strong>at least three Network Card on my workstation&lt;/strong>. If you wonder why I like three NICs here is my typical usage pattern.&lt;/p></description></item><item><title>Security onion in Hyper-V</title><link>https://www.codewrecks.com/post/security/security-onion-hyper-v/</link><pubDate>Sat, 05 Dec 2020 11:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/security-onion-hyper-v/</guid><description>&lt;p>If you want to setup a real lab to test Network Security Monitor solution, like &lt;a href="https://securityonionsolutions.com/">Security Onion&lt;/a> probably you will start with some &lt;strong>virtual machine where to install everything&lt;/strong>. While we can agree that VmWare is probably the best solution (I have a test ESXi node) Hyper-V can be a viable solution, but you need to be aware of some glitches.&lt;/p>
&lt;blockquote>
&lt;p>Most of the information I&amp;rsquo;ve found in internet are outdated and probably not valid for Windows Server 2019, as you can see in &lt;strong>Figure 2&lt;/strong>. Hope this post can save time to others that have my same problem.&lt;/p></description></item><item><title>Use multiple techniques to protect your data</title><link>https://www.codewrecks.com/post/security/protect-data-with-multiple-technique/</link><pubDate>Sat, 12 Sep 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/security/protect-data-with-multiple-technique/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Several years ago I had a friend called me for a problem with MongoDb, it turns out that &lt;strong>someone, from an IP geolocated in China, accessed the instances during the night and wiped out everything&lt;/strong>.&lt;/p>
&lt;p>The problem was due to some misconfiguration or human error or whatever that:&lt;/p>
&lt;ol>
&lt;li>turned off Windows firewall and port 27017 was open to the internet&lt;/li>
&lt;li>MongoDb was installed with no password.&lt;/li>
&lt;li>MongoDb was bound to all ip addresses of the machine&lt;/li>
&lt;/ol>
&lt;p>When it is time to protect your data, you &lt;strong>should add as many layers / techniques of protection as you can&lt;/strong>, this because, if one if them is failing, another one can still offer protection.&lt;/p></description></item><item><title>Danger of public IPs</title><link>https://www.codewrecks.com/post/security/danger-of-public-ip/</link><pubDate>Thu, 16 Jul 2020 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/danger-of-public-ip/</guid><description>&lt;p>This morning I come across &lt;a href="https://www.comparitech.com/blog/vpn-privacy/ufo-vpn-data-exposure/">this article about another data exposure&lt;/a> and I could not avoid to notice that it is &lt;strong>another Elasticsearch exposed to the public&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>894 GB of data was stored in an unsecured Elasticsearch cluster.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Due to personnel changes caused by COVID-19, we’ve not found bugs in server firewall rules immediately, which will lead to the potential risk of being hacked. And now it has been fixed.&lt;/p></description></item><item><title>Principle of least privilege</title><link>https://www.codewrecks.com/post/security/principle-of-least-privilege/</link><pubDate>Sat, 04 Jul 2020 08:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/principle-of-least-privilege/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/post/security/validate-user-input-4/">Validate User Input part 4&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/">Do not disclose errors to the User part 5&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="a-brief-recap">A brief recap&lt;/h2>
&lt;p>Let&amp;rsquo;s return to the beginning, the very first version of the vulnerable function.&lt;/p></description></item><item><title>Do Not Disclose Errors to the User</title><link>https://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/</link><pubDate>Fri, 03 Jul 2020 22:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/post/security/validate-user-input-4/">Validate User Input part 4&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>In the last post we analyzed how it is not fully possible to limit user input in some functions like search. The user could almost search for every character and it is not easy to impose a maximum length. Nevertheless &lt;strong>imposing a maximum length of the string to 50 characters seems to break Sql Injection.&lt;/strong>&lt;/p></description></item><item><title>Use Kali linux in Windows Subsystem for Linux</title><link>https://www.codewrecks.com/post/security/kali-linux-in-wsl2/</link><pubDate>Fri, 26 Jun 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/kali-linux-in-wsl2/</guid><description>&lt;h2 id="kali-linux-on-windows">Kali Linux on Windows&lt;/h2>
&lt;p>Thanks to the new Windows Subsystem for Linux version 2, shortly called WSL2, we have now &lt;strong>a real Linux kernel running in a real VM as the core of WSL&lt;/strong>. This allows finally to use Kali Linux in WSL environment; if you tried in WSL you probably encountered some errors with network tools like NMap. With WSL2 everything seems to run just fine giving you a &lt;em>quick way to have a Kali Linux running in your Windows system&lt;/em> while having full integration between file systems.&lt;/p></description></item><item><title>Play security in a secure environment</title><link>https://www.codewrecks.com/post/security/play-security-in-a-secure-environment/</link><pubDate>Sat, 23 May 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/play-security-in-a-secure-environment/</guid><description>&lt;p>&lt;strong>Security is one of my long passions&lt;/strong>, I’ve spent lots of time on C++ and Assembly (both x86 and other architectures) and in that environment I&amp;rsquo;ve started exploring buffer overflow and other vulnerabilities. Over the course of years security remained only a passion and not my primary skill, but I spent constantly a little amount of time on it through the years.&lt;/p>
&lt;p>When it is time to study offensive security, it is quite common to &lt;strong>download and install test vulnerable Virtual Machines to test some offensive strategies&lt;/strong> and I’m quite surprised that most of the online tutorial simply tells you to use Virtual Box (sometimes VmWare workstation), in a very basic way and completely avoid exploring more advanced scenarios.&lt;/p></description></item><item><title>Validate User Input Step 4</title><link>https://www.codewrecks.com/post/security/validate-user-input-4/</link><pubDate>Sun, 26 Apr 2020 20:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/validate-user-input-4/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>In this fourth part I will examine another problematic piece of code, obviously vulnerable to sql injection: an API to search in products.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[SwaggerResponse(typeof(IEnumerable&amp;lt;Product&amp;gt;))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[MapToApiVersion(&amp;#34;1.0&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> IActionResult SearchProducts(String searchString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> query = DataAccess.CreateQuery(&lt;span style="color:#e6db74">$&amp;#34;Select * from dbo.Products where productName like &amp;#39;%{searchString}%&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> products = query.ExecuteBuildEntities&amp;lt;Product&amp;gt;(Product.Builder);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(products);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see, leaving user input flow unconstrained in your business logic, where it is used to create a SQL query with string concatenation is a bad idea. &lt;strong>You can simply fire SQLMAP to test the API and you can verify that it&amp;rsquo;s indeed vulnerable.&lt;/strong>&lt;/p></description></item><item><title>Strange Error uploading artifacts in Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline-2/</link><pubDate>Sat, 11 Apr 2020 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline-2/</guid><description>&lt;p>I have a library that is entirely written in.NET core that deal with some self signed X509 certificates used to encrypt and digitally sign some data. Software runs perfectly and is composed by a server and client part.&lt;/p>
&lt;p>&lt;strong>At a certain point we decided that the client should be used not only by software that runs.NET core, but also software with full framework&lt;/strong> , so I’ve changed target framework to target both netstandard 2.0 and full framework 4.6.1, everything compiles perfectly, tests run fine, everything seems to be green. The problem is that unit test project ran tests only with.NET Core, so I was not exercising tests in full framework.&lt;/p></description></item><item><title>Home Made Zero trust Security step 2</title><link>https://www.codewrecks.com/post/old/2020/03/home-made-zero-trust-security-step-2/</link><pubDate>Sat, 14 Mar 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/home-made-zero-trust-security-step-2/</guid><description>&lt;p>If you read my old post about how to create a simple program that can manage Windows Firewall to &lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/03/home-made-zero-trust-security/">open ports&lt;/a> with a simple udp request you surely got disappointed by the complete lack of security in the request. &lt;strong>That program was no more than a mere proof of concept to understand if I can manage windows firewall programmatically in.NET Core.&lt;/strong> &amp;gt; &lt;strong>The absolute critical problem in that program is that, UDP request to open a Tcp port is sent in clear text.&lt;/strong> Basically the protocol is, a client &lt;strong>C send to the server S a UDP packet in a specific port with a secret key,&lt;/strong> the server S check if the secret is correct and opens a corresponding TCP port, associated by UDP port in configuration, for requesting IP only and for a predetermined period of time.&lt;/p></description></item><item><title>Do not trust user input part 3</title><link>https://www.codewrecks.com/post/old/2020/02/do-not-trust-user-input-part-3/</link><pubDate>Wed, 19 Feb 2020 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/02/do-not-trust-user-input-part-3/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">part 2&lt;/a> we continued our journey to prevent malicious users to receive dangerous data, limiting customer id to be a 5 letters string value. We have two aspect to improve because usually I got 2 complains when I show that code.&lt;/p>
&lt;p>First one: &lt;strong>Customer object, has a composite id, serialized value is somewhat clumsy to access from client code&lt;/strong> as you can see in &lt;strong>Figure 1&lt;/strong>. Second: if you forget to create a CustomerId from value passed from the user, you are still victim of SQL Injection.&lt;/p></description></item><item><title>Do not trust user input part 2</title><link>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-part-2/</link><pubDate>Wed, 29 Jan 2020 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-part-2/</guid><description>&lt;p>After we fixed our code in &lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">part 1&lt;/a> of this serie, we continue to expand our API adding a method to select  a Customer. Northwind database Customer table has an id of type string, so we could start with this very bad, bad, bad piece of code.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image-11.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image_thumb-11.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image_thumb-11.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Another bad example of API vulnerable with Sql Injection&lt;/em>&lt;/p>
&lt;p>Again the question is: what is the most critical error in that piece of code? If you answer “Query with string concatenation” probably you are wrong. Indeed that is a huge problem, but &lt;strong>in my mind is accepting a string from the user is still the number one problem&lt;/strong>.&lt;/p></description></item><item><title>Do not trust user input</title><link>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/</link><pubDate>Tue, 28 Jan 2020 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/</guid><description>&lt;p>It is time to start blogging a little bit about security, because injection is still high in OWASP TOP 10 and this implies that &lt;strong>people still trust their users&lt;/strong>. Remember, you should not trust your users, never, never, never, because for 10.000 good users there could be 1 bad user, and he/she is enough to damage your organization.&lt;/p>
&lt;p>Here you have a really bad, bad, bad, bad, piece of code that is meant to allow product retrieval from northwind database Products table.&lt;/p></description></item><item><title>Home Made zero trust security</title><link>https://www.codewrecks.com/post/old/2020/01/home-made-zero-trust-security/</link><pubDate>Fri, 03 Jan 2020 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/home-made-zero-trust-security/</guid><description>&lt;p>I have a small office with some computers and servers and since I’m a fan of Zero Trust Security, I have firewall enabled even in local network. &lt;strong>I’m especially concerned about my primary workstation, a Windows Machine where I have explicitly created firewall rules to block EVERY packet from another machine of the network.&lt;/strong> I have backups, I have antivirus, but that machine is important and I do not want it to be compromised, working with a rule that block every contact from external code is nice and make it secure, but sometimes it is inconvenient.&lt;/p></description></item><item><title>Check for Malware in a Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/old/2019/12/check-for-malware-in-a-azure-devops-pipeline/</link><pubDate>Sat, 14 Dec 2019 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/12/check-for-malware-in-a-azure-devops-pipeline/</guid><description>&lt;p>In a previous post I’ve showed &lt;a href="http://www.codewrecks.com/blog/index.php/2019/11/23/quick-peek-at-microsoft-security-code-analysis-credential-scanner/">Credential Scanner&lt;/a>, a special task part of &lt;a href="https://secdevtools.azurewebsites.net/">Microsoft Security Code Analysis&lt;/a> available in Azure, today &lt;strong>I want to have a quick peek at&lt;/strong> &lt;a href="https://secdevtools.azurewebsites.net/helpantimalware.html">&lt;strong>Anti Malware scanner task.&lt;/strong>&lt;/a>&lt;/p>
&lt;p>First of all a simple consideration: I’ve been asked several times if there is any need to have an AntiVirus or AntiMalware tools in build machines, after all the code that is build is developed by own developer, so there should be no need of such tools, right? In my opinion this is a false assumption, here is some quick consideration on how a malware can be downloaded in your build machine&lt;/p></description></item><item><title>BruteForcing login with Hydra</title><link>https://www.codewrecks.com/post/old/2019/11/bruteforcing-login-with-hydra/</link><pubDate>Fri, 29 Nov 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/bruteforcing-login-with-hydra/</guid><description>&lt;p>Without any doubt, Hydra is one of the best tool to bruteforce passwords. It has support for many protocols, but &lt;strong>it can be used with standard web sites as well forcing a standard POST based login&lt;/strong>. The syntax is a little bit different from a normal scan, like SSH and is similar to this cmdline.&lt;/p>
&lt;p>./hydra -l username -P x:\temp\rockyou.txt hostname –s port http-post-form “/loginpage-address:user=^USER^&amp;amp;password=^PASS^:Invalid password!”&lt;/p>
&lt;p>Dissecting the parameters you have&lt;/p></description></item><item><title>Security in 2019 still unprotected ElasticSearch instance exists</title><link>https://www.codewrecks.com/post/old/2019/11/security-in-2019-still-unprotected-elasticsearch-instance-exists/</link><pubDate>Sun, 24 Nov 2019 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/security-in-2019-still-unprotected-elasticsearch-instance-exists/</guid><description>&lt;p>I’ve received today a notification from &lt;a href="https://haveibeenpwned.com/" title="https://haveibeenpwned.com/">https://haveibeenpwned.com/&lt;/a> because one of my emails was present in a data breach.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image-23.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image_thumb-23.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image_thumb-23.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>Ok, it happens, but two things disturbed me, the first is that I really never heard of those guys (People Data Labs), this because they are one of the companies that harvest public data from online sources, aggregates them and re-sell as “Data enrichment”. This means that they probably have only public data on me. &lt;strong>If you are interested you can read article by Troy Hunt&lt;/strong> &lt;a href="https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/" title="https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/">&lt;strong>https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/&lt;/strong>&lt;/a> &lt;strong>on details about this breach.&lt;/strong> &lt;strong>But the second, and more disturbing issue is that, in 2019, still people left ElasticSearch open and unprotected in the wild.&lt;/strong> This demonstrates really low attention about security, especially in situation where you have Elasticsearch on server that have a public exposure. It is really sad to see that Security is still a second citizen in software development, if not, such trivial errors would not be done.&lt;/p></description></item><item><title>Quick Peek at Microsoft Security Code Analysis Credential Scanner</title><link>https://www.codewrecks.com/post/old/2019/11/quick-peek-at-microsoft-security-code-analysis-credential-scanner/</link><pubDate>Sat, 23 Nov 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/quick-peek-at-microsoft-security-code-analysis-credential-scanner/</guid><description>&lt;p>&lt;a href="https://secdevtools.azurewebsites.net/">&lt;strong>Microsoft Security Code Analysis&lt;/strong>&lt;/a> &lt;strong>contains a set of Tasks for Azure DevOps pipeline to automate some security checks during building of your software.&lt;/strong> Automatic security scanning tools are not a substitute in any way for human security analysis, remember: if you develop code ignoring security, no tool can save you.&lt;/p>
&lt;p>&lt;strong>Despite this fact, there are situation where static analysis can really give you benefit,&lt;/strong> because it can avoid you some simple and silly errors, that can lead to troubles. All Tasks in Microsoft Security Code Analysis package are designed to solve a particular problem and to prevent some common mistake.&lt;/p></description></item><item><title>Exploiting VulnHub Tr0ll2 machine</title><link>https://www.codewrecks.com/post/old/2019/09/exploiting-vulnhub-tr0ll2-machine/</link><pubDate>Wed, 18 Sep 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/09/exploiting-vulnhub-tr0ll2-machine/</guid><description>&lt;p>This is an unusual post, it deal on how I exploited &lt;a href="https://www.vulnhub.com/entry/tr0ll-2,107/">Tr0ll2 machine of vulnhub.&lt;/a> Practicing with real machine helps you to put in practice some of the stuff you learn on security. It was a real long time (almost 20 years) that I do not immerse myself in security, doing some exercise on the machine is good to spent some hours :).&lt;/p>
&lt;p>I run all the machine in VMWare esxi servers, in an isolated network, behind a router and a firewall with a DNS on my kali linux machine. I’m pretty cautious when I run some machine in my network so &lt;strong>it is always good for me to have a complete separate network, completely isolated from my real work network&lt;/strong>. Thanks to VmWare I can simply use the console to access the machine even if cannot contact directly through the network.&lt;/p></description></item><item><title>Azure DevOps and SecDevOps</title><link>https://www.codewrecks.com/post/old/2019/05/azure-devops-and-secdevops/</link><pubDate>Sun, 19 May 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/05/azure-devops-and-secdevops/</guid><description>&lt;p>One of the cool aspect of Azure DevOps is the extendibility through marketplace api, and for security you can find a nice marketplace addin called Owasp ZAP (&lt;a href="https://marketplace.visualstudio.com/items?itemName=kasunkodagoda.owasp-zap-scan">https://marketplace.visualstudio.com/items?itemName=kasunkodagoda.owasp-zap-scan&lt;/a>) that can be used to automate OWASP test for web application.&lt;/p>
&lt;p>You can also check this nice article in MSDN &lt;a href="https://devblogs.microsoft.com/premier-developer/azure-devops-pipelines-leveraging-owasp-zap-in-the-release-pipeline/">https://devblogs.microsoft.com/premier-developer/azure-devops-pipelines-leveraging-owasp-zap-in-the-release-pipeline/&lt;/a> that explain how you can leverage OWASP ZAP analysis during a deploy with release pipeline.&lt;/p>
&lt;p>REally good stuff to read / use.&lt;/p></description></item></channel></rss>