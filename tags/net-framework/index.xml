<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NET Framework on Codewrecks</title><link>https://www.codewrecks.com/tags/net-framework/</link><description>Recent content in NET Framework on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 20 May 2010 14:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/net-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Blame on me for old vb code net 10 completely not CLS</title><link>https://www.codewrecks.com/post/old/2010/05/blame-on-me-for-old-vb-code-net-1-0-completely-not-cls/</link><pubDate>Thu, 20 May 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/05/blame-on-me-for-old-vb-code-net-1-0-completely-not-cls/</guid><description>&lt;p>Today I&amp;rsquo;m converting a project written in VB to C#, since it is composed by simple classes that manages reporting in RTF, I supposed that this will be a simple process. This project uses a RTF library I wrote in Visual Basic in 2002, that was simply compiled for.NET 2.0 some times ago.&lt;/p>
&lt;p>The problem is that the library is really not &lt;a href="http://blogs.msdn.com/brada/archive/2004/03/20/93341.aspx">CLS&lt;/a> compliant and when I converted this project, (that contains 54 classes) I got ~ 2000 compilation errors. This because the library uses a lot of not CLS features, and converting library to C# caused me a lot of troubles.&lt;/p></description></item><item><title>Regular expression and performances</title><link>https://www.codewrecks.com/post/old/2009/10/regular-expression-and-performances/</link><pubDate>Mon, 26 Oct 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/regular-expression-and-performances/</guid><description>&lt;p>Regular expressions are really powerful, but sometimes they can be quite slow, especially when you have to deal with large amount of data.&lt;/p>
&lt;p>I have a lot of string in database that have this format &amp;hellip;text&amp;hellip;||&amp;hellip;anothertext&amp;hellip;||..anothertext&amp;hellip; and we need to split using || as separator. Since string.split accepts only a char, we used a simple regular expression to parse text.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>@&amp;#34;(&amp;gt;|\||^|(\.\.\.))(?&lt;span style="color:#f92672">&amp;lt;prev&amp;gt;&lt;/span>.+?)(&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>|\||$|(\.\.\.,))&amp;#34;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This regular expression was a leftover by some old code, it splits string with tag like &amp;lt;xxx&amp;gt;&amp;hellip;text&amp;lt;/xxx&amp;gt; and was left here even if now the string format is really simplier. Now we experienced some slow excel report creation and I verified that most of the time is spent in parsing this string (that is called previews).&lt;/p></description></item><item><title>Subtle differences from VB and C</title><link>https://www.codewrecks.com/post/old/2009/10/subtle-differences-from-vb-and-c/</link><pubDate>Thu, 15 Oct 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/subtle-differences-from-vb-and-c/</guid><description>&lt;p>For those who works like me with both languages, sometimes we can encounter some subtle differences between VB and C#. Take this code in VB&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>Module Module1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Private Function NormalizeRank(ByVal userRank As Integer) As Integer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Return CType(Math.Ceiling(Math.Min(userRank / &lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">5.0&lt;/span>)), Integer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> End Function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sub Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> For &lt;span style="color:#66d9ef">value&lt;/span> As Integer = &lt;span style="color:#ae81ff">0&lt;/span> To &lt;span style="color:#ae81ff">101&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;{0} normalized is {1}&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">value&lt;/span>, NormalizeRank(&lt;span style="color:#66d9ef">value&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Next
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> End Sub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>End Module&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>Is a very stupid piece of code that is supposed to take a value in the range 0..100 and normalize in the new interval [0..5], if the user pass a value higher than 100 the result must be 5. We expect value from 1 to 20 to be transformed into 1, values from 21 to 40 to be transformed to 2 and so on. If you run this code you find that the result is expected one. Now suppose you need to translate this function to C#, probably the first thing you can write is this one.&lt;/p></description></item><item><title>Expression tree to the rescue</title><link>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</link><pubDate>Mon, 27 Jul 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</guid><description>&lt;p>I have a little validation library that must support localized error messages, it uses a simple techniques, when you set an error message for a specific validator, if you do not want localization you can simply pass a single string, but if you want message to be localized, you specified two strings, one is the name of the resource that contains the message and the other is the key of the message.&lt;/p></description></item><item><title>Resolve reference warning to object of master database in database projects</title><link>https://www.codewrecks.com/post/old/2009/07/resolve-reference-warning-to-object-of-master-database-in-database-projects/</link><pubDate>Wed, 08 Jul 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/resolve-reference-warning-to-object-of-master-database-in-database-projects/</guid><description>&lt;p>If you use some stored procedure or objects that reside into master database, when you compile your database project you will end with warning like this.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>C:&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>DEVELOP&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>myproject&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>TRUNK&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>SRC&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>COMMON&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>SQLSERVER&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>REPMANAGEMENT.DATABASE&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>SCHEMA OBJECTS&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>PROGRAMMABILITY&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>STORED PROCEDURES&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>LOG.GETFEEDER.PROC.SQL(&lt;span style="color:#ae81ff">45&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>)Warning TSD04151: Procedure: [Log].[GetFeeder] contains an unresolved reference to an &lt;span style="color:#66d9ef">object&lt;/span>. Either the &lt;span style="color:#66d9ef">object&lt;/span> does not exist or the reference &lt;span style="color:#66d9ef">is&lt;/span> ambiguous because it could refer to any of the following objects: [dbo].[sp_executesql] or [Log].[sp_executesql].&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This happens because I used the &lt;strong>sp_executesql&lt;/strong> in my stored procedures, and sp_executesql is one of the stored that resides into Master database. To avoid these warnings you must add a reference to all objects that are in master schema.&lt;/p></description></item><item><title>A better version of dtofactory</title><link>https://www.codewrecks.com/post/old/2009/07/a-better-version-of-dtofactory/</link><pubDate>Tue, 07 Jul 2009 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/a-better-version-of-dtofactory/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/06/24/a-dto-factory-code-generator-with-visual-studio-t4/">this post&lt;/a> I dealt with a primitive version of a T4 template to generate dto starting from domain objects. In these days I had little time to improve it a little bit, and I created a simple test project to verify some of the basic functionality.&lt;/p>
&lt;p>Usage of the T4 template is really simple, I&amp;rsquo;ve created in the test project an Entity Factory model to the ubiquitous northwind database, then I added a OrderDto.tt file to the project with this content.&lt;/p></description></item><item><title>Customize test running in a Tfs Team Build</title><link>https://www.codewrecks.com/post/old/2009/06/customize-test-running-in-a-tfs-team-build/</link><pubDate>Mon, 29 Jun 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/customize-test-running-in-a-tfs-team-build/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/06/26/running-tests-during-a-build-in-tfs/">previous post&lt;/a> I showed how to setup a build in tfs that not only builds the solution, but also runs all the tests. The next step is to configure how tests are run and reacting to test result. The first thing I want is the ability to make the entire build fail if one of the test fails. As you see in the previous post, the default behavior of the build, is to partially fail if one or more tests fail.&lt;/p></description></item><item><title>Import log and filegroup file sizes option for Vs Db edition</title><link>https://www.codewrecks.com/post/old/2009/06/import-log-and-filegroup-file-sizes-option-for-vs-db-edition/</link><pubDate>Fri, 26 Jun 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/import-log-and-filegroup-file-sizes-option-for-vs-db-edition/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/06/26/vs-database-edition-pay-attention-to-file-size-when-you-import-db/">previous post&lt;/a> I deal with file size in VS DB edition. To avoid this problem, (as my friend &lt;a href="http://www.geniodelmale.info/">Lorenzo&lt;/a> pointed me out), when you import the database structure, with the Database Project wizard, you must not select the &lt;em>Import log and filegroup file size&lt;/em>.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image41.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image-thumb41.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image-thumb41.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>If you deselect this option the import wizard does not check the actual file size of the database that is being imported.&lt;/p>
&lt;p>alk.&lt;/p>
&lt;p>Tags: &lt;a href="http://technorati.com/tag/Visual%20Studio%20Database%20Edition">Visual Studio Database Edition&lt;/a>&lt;/p></description></item><item><title>VS Database Edition pay attention to file size when you import db</title><link>https://www.codewrecks.com/post/old/2009/06/vs-database-edition-pay-attention-to-file-size-when-you-import-db/</link><pubDate>Fri, 26 Jun 2009 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/vs-database-edition-pay-attention-to-file-size-when-you-import-db/</guid><description>&lt;p>I use Database Edition on a legacy database that is very big, when I created the database project I simply ask to VS database edition to import the structure and everything is ok. Then I noticed that deploy operation when database does not exists on the server is really slow. I use in the past some custom test infrastructure to preload the db, I have a lot of test that works in this way and I do not want to delete them. These test will simply delete the entire database and recreate it empty to start preloading.&lt;/p></description></item><item><title>Introspection vs reflection</title><link>https://www.codewrecks.com/post/old/2009/06/introspection-vs-reflection/</link><pubDate>Wed, 24 Jun 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/introspection-vs-reflection/</guid><description>&lt;p>As every.Net programmer know, reflection is the standard way to analyze an assembly finding types, interfaces etc. This approach cannot be used in all situations, as an example when you generate code with T4 engine in visual studio 2008.&lt;/p>
&lt;p>As &lt;a href="http://www.olegsych.com/2008/09/t4-tutorial-debugging-code-generation-files/">Oleg&lt;/a> states here, if you need to analyze assemblies during code generation, you should use fxcop introspection vs standard reflection. Using introspection is really simple, first of all you need to locate a couple of dll in the fxcop installation folder, and references them in the solution.&lt;/p></description></item><item><title>Visual Studio Database edition How to find objects that reference other objects</title><link>https://www.codewrecks.com/post/old/2009/06/visual-studio-database-edition-how-to-find-objects-that-reference-other-objects/</link><pubDate>Tue, 23 Jun 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/visual-studio-database-edition-how-to-find-objects-that-reference-other-objects/</guid><description>&lt;p>Another feature of Visual Studio Database Edition I cannot live without, is the possibility to find all objects that references a specific table or stored procedure etc. To see a dependency for an object simply click on the SchemaView and then you can right click on a table, and choose &lt;em>View Dependencies&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image30.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image-thumb30.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/06/image-thumb30.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>This command will open a menu that shows all objects that references this specific object, as well as all database objects that are referenced by this object. This function is of invaluable use when you need to change or modify something, and gives you an invaluable sight on dependency between database structure.&lt;/p></description></item><item><title>Creating a build with Tfs</title><link>https://www.codewrecks.com/post/old/2009/06/creating-a-build-with-tfs/</link><pubDate>Mon, 22 Jun 2009 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/creating-a-build-with-tfs/</guid><description>&lt;p>I worked for long time with NANT + CC.net as continuous integration tools. I used subversion as Source Control System and use Mantis or Redmine for issue tracking.&lt;/p>
&lt;p>The main disadvantage of using such a configuration is the need to make each tool communicate with others, the good part is that these tools are open source. Team Foundation Server on the other side is a Commercial tool, so you have to pay it, but it gives you a lot of features in a single unified tool, and this is Great. Let&amp;rsquo;s see as an example how to set up a continuous integration server for a simple project.&lt;/p></description></item><item><title>Publish a project with ClickOnce via NANT and CCNet</title><link>https://www.codewrecks.com/post/old/2009/06/publish-a-project-with-clickonce-via-nant-and-ccnet/</link><pubDate>Thu, 18 Jun 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/publish-a-project-with-clickonce-via-nant-and-ccnet/</guid><description>&lt;p>I have a project that needs to be published automatically through IIS directory, clickonce and CC.net machine. The easiest way to make this happens is to follow these simple instructions.&lt;/p>
&lt;p>First of all goes into the machine where the CC.Net runs, prepare the IIS directory where the clickonce generated setup will be copied, open the solution into visual studio, goes to the project you want to publish and set everything needed for clickonce, set version to 1.0.0.0 and publish through visual studio IDE. This will create the folder structure in IIS and the application is published for the first time with the version number 1.0.0.0. Now take the publish.htm file and copy into the trunk of your project into a specific directory (I used Configuration\ClickOnce), rename it in OriginalPublish.htm, edit it and find the place where visual studio ide wrote the string 1.0.0.0, replace it with the string VERSIONNUMBERTOKEN.&lt;/p></description></item><item><title>Cannot create project in a newly installed TFS</title><link>https://www.codewrecks.com/post/old/2009/06/cannot-create-project-in-a-newly-installed-tfs/</link><pubDate>Mon, 15 Jun 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/cannot-create-project-in-a-newly-installed-tfs/</guid><description>&lt;p>I&amp;rsquo;ve just installed Tfs For Workgroup in a small virtual machine to make some experiments. After setting up the machine (Windows 2008) I installed TFS SErvice pack 1 then tfs power toys and finally I opened up visual studio in my desktop machine. I simply connect to the team foundation server and tried to create a new &lt;em>Team Project&lt;/em>, inserted some values for my test project and then tried to create the project, but here is the result&lt;/p></description></item><item><title>Do not forget Array</title><link>https://www.codewrecks.com/post/old/2009/06/do-not-forget-array/</link><pubDate>Thu, 11 Jun 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/do-not-forget-array/</guid><description>&lt;p>I wrote a stupid util that does this operation: it scans a folder with 500.000 + files (in various subfolder), all files have name that contains an integer that is an id of a row in a database. I need to find orphan files, so I simply take file name, es: myfile_1002.txt, extracts the number 1002 and then verify if in a specific table of the database there is a row with index 1002.&lt;/p></description></item><item><title>XElement and hexadecimal value 0x0C is an invalid character</title><link>https://www.codewrecks.com/post/old/2009/05/xelement-and-hexadecimal-value-0x0c-is-an-invalid-character/</link><pubDate>Wed, 27 May 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/xelement-and-hexadecimal-value-0x0c-is-an-invalid-character/</guid><description>&lt;p>I&amp;rsquo;ve a little library that build excel files in openXml format. It is based on LINQ to XML, and permits you to open an excel file with open xml sdk, then manipulate the content and showing it to the user.&lt;/p>
&lt;p>Today for a particular set of data I got&lt;/p>
&lt;blockquote>
&lt;p>hexadecimal value 0x0C, is an invalid character&lt;/p>&lt;/blockquote>
&lt;p>This is a standard error of Xml, due to the fact that there are some character in ASCII set that cannot be included in XML content. Since I read data from a db, it happens that some strings contain char 0x0C ( &lt;strong>\f&lt;/strong> ). To accomplish  this with the minimum effort I simply write such a class&lt;/p></description></item><item><title>Castle Wcf facility integration on windows service or console</title><link>https://www.codewrecks.com/post/old/2009/04/castle-wcf-facility-integration-on-windows-service-or-console/</link><pubDate>Mon, 27 Apr 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/castle-wcf-facility-integration-on-windows-service-or-console/</guid><description>&lt;p>Castle has a &lt;a href="http://www.castleproject.org/container/facilities/trunk/wcf/index.html">great facility&lt;/a> to resolve Wcf services with castle windsor. This is really useful because it helps you when your concrete service classes have dependency to be resolved. There are a lot of tutorials or blog posts on how to configure it when you want to host service in IIS, but little bit about how to do self hosting, for example in a console application or in a windows service. Here is how to accomplish this. Suppose you have this little service&lt;/p></description></item><item><title>The importance of overriding ToString for tests</title><link>https://www.codewrecks.com/post/old/2009/04/the-importance-of-overriding-tostring-for-tests/</link><pubDate>Fri, 24 Apr 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/the-importance-of-overriding-tostring-for-tests/</guid><description>&lt;p>Standard behavior of ToString is to print class or structure name. Sometimes if you never need to call tostring for class in application you will avoid to override this basic behavior. Suppose you have this simple structure.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Range&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Int32 Left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Int32 Rigth;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This is a simple structure with two field, now I have this test.&lt;/p></description></item><item><title>Optimizing Regular expression</title><link>https://www.codewrecks.com/post/old/2009/04/optimizing-regular-expression/</link><pubDate>Fri, 24 Apr 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/optimizing-regular-expression/</guid><description>&lt;p>I have an application where I do a lot of search for pattern in text and I use a lot of regular expression. The program runs well, until the amount of text it has to search into is grown tremendously. It reaches a point where the standard daily task that was completed in a couple of hours now span for more than one day, and I need to run it each day, so I need to optimize.&lt;/p></description></item><item><title>Cannot obtain Metadata from when trying to create references with serviceutilexe</title><link>https://www.codewrecks.com/post/old/2009/04/cannot-obtain-metadata-from-when-trying-to-create-references-with-serviceutilexe/</link><pubDate>Wed, 15 Apr 2009 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/cannot-obtain-metadata-from-when-trying-to-create-references-with-serviceutilexe/</guid><description>&lt;p>I have a simple wcf service hosted in IIS6, when I launch serviceutil.exe ( &lt;strong>svcutil.exe&lt;/strong> &lt;strong>http://10.8.50.1:7507/FileReceiver.svc?wsdl&lt;/strong> )  to create a proxy I get a complex and long error, but the first part of the error tells me&lt;/p>
&lt;blockquote>
&lt;p>Error: Cannot obtain Metadata from http://10.8.50.1:7507/FileReceiver.svc?wsdl&lt;/p>&lt;/blockquote>
&lt;p>I lost about half an hour triying to figure out what is wrong. First of all I tried to expose metadata, but this is not possible in IIS6 or at least I got some errors, and nothing works. After half an hour of frustration, I made a supposition, &lt;em>maybe it is a problem of premission?&lt;/em>. I changed the identity of the worker process to administrator, and magically everything works as expected&amp;hellip;&lt;/p></description></item><item><title>Adapting a model to make binding simpler</title><link>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</link><pubDate>Tue, 17 Mar 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</guid><description>&lt;p>I have a domain model composed by Clients, each client has a series of associated Typology objects and each Typology object has a certain number of associated Target. Now I need to bind this model to a series of three combo in WPF, but I have this little problem&lt;/p>
&lt;p>The model is not directly accessible, I have already a service that has functions like GetAllCustomer, GetTyplogyForCustomer(Int32 customerId) and GetTargetForTyplogy(Int32 typologyId). Each method returns a list of the corresponding object, but they are DTO and not real object, so the Customer, Typology and Target returned from the service have no relation between them. Moreover I do not want to load everything when the application starts, because it will be extremely slow, I want to be able to load data as it needed, with lazy load. I created a couple of classes that I can use to lazily load entities&lt;/p></description></item><item><title>Hosting a WCF service based on MSMQ in IIS7</title><link>https://www.codewrecks.com/post/old/2009/03/hosting-a-wcf-service-based-on-msmq-in-iis7/</link><pubDate>Tue, 17 Mar 2009 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/hosting-a-wcf-service-based-on-msmq-in-iis7/</guid><description>&lt;p>Today I had a strange problem, I needed to host a MSMQ service in IIS7, I followed the instruction on &lt;a href="http://dotnet.dzone.com/news/msmq-wcf-and-iis-getting-them-">this post&lt;/a>. Everything worked ok, I pumped some messages on the queue and the service received them with no problem&amp;hellip;at least initially. After a bit of time of inactivity, the server stopped to read message from the queue and I have no clue of what is happening. Messages are stored in the queue, but they never got processed.&lt;/p></description></item><item><title>Assembly generation failed Referenced assembly 8216xxx8217 does not have a strong name</title><link>https://www.codewrecks.com/post/old/2009/03/assembly-generation-failed-referenced-assembly-xxx-does-not-have-a-strong-name/</link><pubDate>Fri, 13 Mar 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/assembly-generation-failed-referenced-assembly-xxx-does-not-have-a-strong-name/</guid><description>&lt;p>I have a solution where projects are not signed, now I need to sign them, but clearly when I begin to insert signing I end with some errors like&lt;/p>
&lt;blockquote>
&lt;p>Assembly generation failed Referenced assembly ‘xxx’ does not have a strong name&lt;/p>&lt;/blockquote>
&lt;p>These errors are caused because your projects are referencing dll that are not strongly signed. For those dll that are open source you can simply recompile everything with a strong name, for those one that comes in compiled form only you need to disassemble and reassemble again with a strong name. To make everything simple I usually use this batch&lt;/p></description></item><item><title>Hilite words in webbrowser now for WPF control</title><link>https://www.codewrecks.com/post/old/2009/03/hilite-words-in-webbrowser-now-for-wpf-control/</link><pubDate>Wed, 11 Mar 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/hilite-words-in-webbrowser-now-for-wpf-control/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/13/highlight-words-in-webbrowser-control/">Some days ago&lt;/a>, I blogged about how to hilite words in a webBrowser control for windows forms. Now I need to do the same thing on &lt;a href="http://blogs.msdn.com/llobo/archive/2008/06/12/wpf-webbrowser.aspx">WPF WebBrowser&lt;/a> control, but instead of doing direct modification of DOM, a &lt;a href="http://www.nablasoft.com/guardian">friend&lt;/a> suggested me a &lt;a href="http://javascript.about.com/library/blhilite2.htm">Javascript script&lt;/a> to hilite words in document. My original technique, discussed in &lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/13/highlight-words-in-webbrowser-control/">old post&lt;/a>, is not so good because it replaces text in the whole content of the document, and sometimes it breaks script etc. Now I need to put everything in WPF and here is how you can accomplish the task.&lt;/p></description></item><item><title>Entity Framework relations and entityKey</title><link>https://www.codewrecks.com/post/old/2009/02/entity-framework-relations-and-entitykey/</link><pubDate>Wed, 18 Feb 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/entity-framework-relations-and-entitykey/</guid><description>&lt;p>Suppose you generate an Entity Framework model on standard northwind database, you have a customer id and you want to generate an order for that customer. A possible solution is&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (ModelTestBase context = &lt;span style="color:#66d9ef">new&lt;/span> ModelTestBase())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Orders order = &lt;span style="color:#66d9ef">new&lt;/span> Orders();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.Freight = &lt;span style="color:#ae81ff">1.0&lt;/span>M;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.RequiredDate = order.OrderDate = DateTime.Now;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.Customers = context.Customers.Where(c =&amp;gt; c.CustomerID == &lt;span style="color:#e6db74">&amp;#34;ALFKI&amp;#34;&lt;/span>).First();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.AddToOrders(order);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.SaveChanges();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This code is perfectly valid, but is not the smartest thing to do, if you analyze traffic with profiler you can verify that this code executes a select to retrieve the customer, and then inserts the order into orders table. The question is, since I already have the ID of the customer &lt;em>why I need to retrieve the whole customer instance from database only to set a relation?&lt;/em>. When you need to setup a relations EF needs only to know the key of related object, it does not really cares about other properties of Customers object, it needs only the key to set the foreign key, a better solution is the following&lt;/p></description></item><item><title>Highlight words in webbrowser control</title><link>https://www.codewrecks.com/post/old/2009/02/highlight-words-in-webbrowser-control/</link><pubDate>Fri, 13 Feb 2009 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/highlight-words-in-webbrowser-control/</guid><description>&lt;p>In windows forms the WebBrowser control permits to include a fully funcional browser into your application. The interesting things is that you can interact with the html of the site with no problem. As an example you can load a page and highlight some words into the text, here is the result of loading &lt;a href="http://www.nablasoft.com">www.nablasoft.com&lt;/a> and I want to highlight &amp;ldquo;laureati&amp;rdquo; and &amp;ldquo;passione&amp;rdquo;.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image-thumb3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image-thumb3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>As you can see I’ve highlighted the two words, the code is really simple.&lt;/p></description></item><item><title>Unity and AOP in enterprise library</title><link>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</link><pubDate>Sat, 31 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/18/custom-handler-to-use-with-policy-injection-application-block/">Part 4 – Custom Handler to use with Policy Injection Application Block&lt;/a>&lt;br>
&lt;u>&lt;font color="#acb613">&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/26/combine-policy-injection-application-block-with-unity/">Part 5 – Combine policy Injection Application Block with Unity&lt;/a>&lt;/font>&lt;/u>&lt;/p>
&lt;p>In last post I showed how Policy Injection Application Block is now only a tiny wrapper around Unity. So Unity is the enterprise library section that does both AOP and Dependency Injection, this make me a little bit confused :) so I decided to forget about PIAB, just to avoid confusion.&lt;/p></description></item><item><title>Combine Policy Injection Application Block with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</link><pubDate>Mon, 26 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/18/custom-handler-to-use-with-policy-injection-application-block/">Part 4 – Custom Handler to use with Policy Injection Application Block&lt;/a>&lt;/p>
&lt;p>In previous parts I showed how to configure unity container and how to create a custom handler for policy injection application block, now it is time to speak about integration between PIAB and Unity container.&lt;/p></description></item><item><title>Custom Handler to use with Policy Injection Application Block</title><link>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</link><pubDate>Sun, 18 Jan 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</guid><description>&lt;p>Previous Posts:&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;/p>
&lt;p>In this fourth part I’ll examine how to build a simple custom handler that will be used with &lt;a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">Policy Injection Application Block&lt;/a>. The purpose of the handler is simply dumping to console the name of the called method as well all the parameters with theirs values. Here is the class.&lt;/p></description></item><item><title>Unity policy injection application block and AOP</title><link>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</link><pubDate>Sat, 17 Jan 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</guid><description>&lt;p>This is the third on a series of post I’m doing while exploring the Unity IoC container.&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;/p>
&lt;p>Now it is time of &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP&lt;/a> and using Policy Injection Application Block. &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP&lt;/a> it is a very interesting technique, used to inject behavior on a class at runtime. To use AOP with Unity and policy injection application block you should &lt;em>wrap&lt;/em> the instances returned by the Unity container as shown in this snippet.&lt;/p></description></item><item><title>Other experiments with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</link><pubDate>Sat, 17 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</guid><description>&lt;p>Yesterday I give a look at unity, an Inversion Of Control container made by Microsoft, today I’m experimenting a little more to have more confidence with it.&lt;/p>
&lt;p>An IoC container not only permits to resolve a concrete entity, but it also permits you to configure it. Here is how you can set a simple property on an object.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;type&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ITest&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">mapTo=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TestB&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;OtherTest&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;typeConfig&lt;/span> &lt;span style="color:#a6e22e">extensionType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Microsoft.Practices.Unity.Configuration.TypeInjectionElement,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Microsoft.Practices.Unity.Configuration&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;property&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Prop&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">propertyType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;System.String&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;value&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;VAL&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/property&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/typeConfig&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/type&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>With typeConfig I can setup properties for my objects, now suppose that I have an array of string as property, you can use &amp;lt;array&amp;gt; tag for configuration.&lt;/p></description></item><item><title>Always check for objects thread safety when you are doing multi thread programs</title><link>https://www.codewrecks.com/post/old/2008/12/always-check-for-objects-thread-safety-when-you-are-doing-multi-thread-programs/</link><pubDate>Thu, 04 Dec 2008 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/12/always-check-for-objects-thread-safety-when-you-are-doing-multi-thread-programs/</guid><description>&lt;p>Yesterday I fight with a strange bug, I have a simple class that calculate Sha256 of a string, It was used in a old part of a project where a single thread does a series of operations. Some months later the program is heavily evolved, and there is a new part that uses async pattern to do some operations, since I need to have a Sha256 value I reused the old function called Utils.CalculateSha256.&lt;/p></description></item><item><title>Impedence between domain objects and Ui Layer</title><link>https://www.codewrecks.com/post/old/2008/11/impedence-between-domain-objects-and-ui-layer/</link><pubDate>Thu, 20 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/impedence-between-domain-objects-and-ui-layer/</guid><description>&lt;p>When you work with domain model your domain objects become more complex than a simple containers for table values. This makes somewhat problematic using these object directly with the UI, especially when you use native binding. Let&amp;rsquo;s make an example, I have this object called &lt;strong>Domain&lt;/strong> &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image10.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb10.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb10.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>As you can see the Domain class has a property called ContentBlackList that is a List of String. The setter is private and in the getter the list is created lazily, then I have a &lt;a href="http://www.codewrecks.com/blog/index.php/2008/10/21/some-details-on-older-post-about-usertype/">User Type&lt;/a> to map this property into a single field of a table in a list of string separated by the charachter #. The object works well, until I want to bind this property directly to a textbox in a form.&lt;/p></description></item><item><title>Missing RemovedItem from BindingList and BindingSource</title><link>https://www.codewrecks.com/post/old/2008/11/missing-removeditem-from-bindinglist-and-bindingsource/</link><pubDate>Tue, 18 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/missing-removeditem-from-bindinglist-and-bindingsource/</guid><description>&lt;p>If you work with Windows Forms you cannot live without binding :D, but something is missing from the base structure. I want to create a simple form with a &lt;a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.bindingsource.aspx">BindingSource&lt;/a>, then bind a list of object to a grid and some textboxes to create a master detail form, moreover I set up a simple navigator to make simple for the user navigating the structure, the navigator has the addnew and remove button and the user likes them.&lt;/p></description></item><item><title>Visual studio 2010</title><link>https://www.codewrecks.com/post/old/2008/11/visual-studio-2010/</link><pubDate>Fri, 07 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/visual-studio-2010/</guid><description>&lt;p>Well, in this period I have a little time to spent on this, but I could not resist,&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image4.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb4.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/11/image-thumb4.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>With my new 500GB usb disk now I have enough space to work with the virtual machine of the Visual Studio 2010 CTP :D&lt;/p>
&lt;p>alk.&lt;/p>
&lt;script type="text/javascript">var dzone_url = 'http://www.codewrecks.com/blog/index.php/2008/11/07/visual-studio-2010/';&lt;/script>&lt;script type="text/javascript">var dzone_title = 'Visual studio 2010';&lt;/script>&lt;script type="text/javascript">var dzone_blurb = 'Visual studio 2010';&lt;/script>&lt;script type="text/javascript">var dzone_style = '2';&lt;/script>&lt;script language="javascript" src="http://widgets.dzone.com/widgets/zoneit.js">&lt;/script> 
&lt;p>&lt;a href="http://www.dotnetkicks.com/kick/?url=http://www.codewrecks.com/blog/index.php/2008/11/07/visual-studio-2010/">&lt;a target="_blank" href="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http://www.codewrecks.com/blog/index.php/2008/11/07/visual-studio-2010/&amp;amp;amp;bgcolor=0080C0&amp;amp;amp;fgcolor=FFFFFF&amp;amp;amp;border=000000&amp;amp;amp;cbgcolor=D4E1ED&amp;amp;amp;cfgcolor=000000"> &lt;img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http://www.codewrecks.com/blog/index.php/2008/11/07/visual-studio-2010/&amp;amp;amp;bgcolor=0080C0&amp;amp;amp;fgcolor=FFFFFF&amp;amp;amp;border=000000&amp;amp;amp;cbgcolor=D4E1ED&amp;amp;amp;cfgcolor=000000" alt="DotNetKicks Image" />&lt;/a>&lt;/a>&lt;/p></description></item><item><title>Performance of logging system</title><link>https://www.codewrecks.com/post/old/2008/11/performance-of-logging-system/</link><pubDate>Fri, 07 Nov 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/performance-of-logging-system/</guid><description>&lt;p>When you insert a logging system into your application you should do some preliminary test for performance issue. The most important thing is that logging infrastructure should not introduce too much overhead when the log is disabled. With log4net you have different way to handle the log, suppose you have a logger and the DEBUG level is disabled; you can use one of these three form&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>log1.Debug(&lt;span style="color:#e6db74">&amp;#34;TEST&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (log1.IsDebugEnabled) log1.Debug(&lt;span style="color:#e6db74">&amp;#34;TEST&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Boolean isDebugEnabled = log1.IsDebugEnabled;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (isDebugEnabled) log1.Debug(&lt;span style="color:#e6db74">&amp;#34;TEST&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>The first version rely on the fact that log4net infrastructure internally checks if debug is enabled so you can call Debug function directly. The second technique is to check if log1.IsDebugEnabled before calling log1.Debug(), and the third stores the IsDebugEnabled in a local variable to check that variable instead of calling IsDebugEnabled each time. If you do one million log calls you will obtain these rough measurements in milliseconds.&lt;/p></description></item><item><title>Improving the WCF logger</title><link>https://www.codewrecks.com/post/old/2008/11/improving-the-wcf-logger/</link><pubDate>Thu, 06 Nov 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/improving-the-wcf-logger/</guid><description>&lt;p>One of the first improvement to the WCF logger is the ability to choose the list of logger to monitor during registration. A real application can generate tons of logs, suppose you are interested only in looking at the NHibernate generated query. The solution is to add another registration method and internally use an object that keeps care of the registration and senting log progress. Here is the new interface&lt;/p></description></item><item><title>Live logging with log4net and WCF part 2</title><link>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</link><pubDate>Wed, 05 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2008/11/05/a-custom-publishsubscriber-appender-for-log4net/">previous post&lt;/a> I showed how to create a publish/subscribe logger with WCF and log4net, now I show you my first use of this particular appender.&lt;/p>
&lt;p>When you work with nhibernate you can use show-sql configuration parameter to instruct nhibernate to show generated sql, but how can you see this output in a running windows application? You should know that NHibernate has various log4Net logger, and you can instruct the session to dump all sql code to a logger, here it is a possible configuration&lt;/p></description></item><item><title>Again about differences about Binary versus Xml Serialization</title><link>https://www.codewrecks.com/post/old/2008/11/again-about-differences-about-binary-versus-xml-serialization/</link><pubDate>Sat, 01 Nov 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/again-about-differences-about-binary-versus-xml-serialization/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2008/10/31/binary-versus-xml-serialization-size/">previous post&lt;/a> I deal with the size of binary serialization vs Xml Serialization, but as my friend &lt;a href="http://www.codemetropolis.com/">Marco&lt;/a> commented, those two techniques are really different and should not be compared directly.&lt;/p>
&lt;p>Binary serialization is a technique used to obtain a binary representation of an object, and then rebuild that object from it back to a real instance in memory.&lt;/p>
&lt;p>&lt;em>&lt;a href="http://en.wikipedia.org/wiki/Serialization">Serialization&lt;/a>&lt;/em> is a process that permits to convert the state of an object into a form that can be stored into some durable medium (file, DB) to rebuild original object in the future or to send the object to another process or computer through network channels.&lt;/p></description></item><item><title>Binary versus Xml Serialization size</title><link>https://www.codewrecks.com/post/old/2008/10/binary-versus-xml-serialization-size/</link><pubDate>Fri, 31 Oct 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/binary-versus-xml-serialization-size/</guid><description>&lt;p>Yesterday a &lt;a href="http://dotnetmarche.org/members/Roberto-Sileoni.aspx">friend&lt;/a> of &lt;a href="http://dotnetmarche.org/">DotNetMarche&lt;/a> asked me this question: &lt;em>I have the need to store serialized objects into database , I can choose between binary or xml format, which is smaller in size?&lt;/em>&lt;/p>
&lt;p>My first answer was &lt;em>Binary should occupy less space because it is more compact&lt;/em> but he told me that DBA checked that xml entities actually uses less space than binary ones.&lt;/p>
&lt;p>This morning I did some test with a simple class&lt;/p></description></item><item><title>Again on Expression Tree vs Reflection</title><link>https://www.codewrecks.com/post/old/2008/10/again-on-expression-tree-vs-reflection/</link><pubDate>Thu, 09 Oct 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/again-on-expression-tree-vs-reflection/</guid><description>&lt;p>In last post &lt;a href="http://www.nablasoft.com/Alkampfer/index.php/2008/10/04/expression-tree-vs-reflection">Expression Tree vs Reflection&lt;/a> I showed how to use Expression Tree to dynamically build a function object at runtime  that you can use to invoke methods of unknown objects. This is a peculiar use of Expression Tree, but you can obtain the same result with Lightweight Code Generation (as some people commented in the post). Moreover the LCG approach is probably faster because the expression tree uses LCG in the Compile method, so if you directly generate your code in IL, there is no need of intermediate Expression Tree object. (You have also full control on IL). Remember that when I say that LCG is faster, I&amp;rsquo;m speaking about the time needed to build the dynamic function, and not the real time needed to invoke the function. To compare the two techniques here is an example, I want to be able to write code like this.&lt;/p></description></item><item><title>Faster invoke method of unknown objects with Expression tree part2</title><link>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</link><pubDate>Mon, 06 Oct 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</guid><description>&lt;p>In the &lt;a href="http://www.codewrecks.com/blog/index.php/2008/10/04/expression-tree-vs-reflection/">last post&lt;/a> I described a technique that uses Expression Tree to invoke dynamically methods of objects of types unknown at compile time. You can use this technique to build the &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/10/expressiontreereflection.zip">ExpressionTreeReflection&lt;/a> class.&lt;/p>
&lt;p>You can now write code like this&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>private static readonly Type suType = Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>private static readonly Object suInstance = Activator.CreateInstance(Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Test]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public void TestFuncNoArgInt32()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Func&lt;span style="color:#f92672">&amp;lt;Object&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Int32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> func = ExpressionTreeReflection.ReflectFunction&lt;span style="color:#f92672">&amp;lt;Int32&amp;gt;&lt;/span>(suType, &amp;#34;AMethod&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.That(func(suInstance), Is.EqualTo(1));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>You load a type unknown at compile time, the only information you know is the signature of one of its method, in the example is called AMethod and accepts no parameters and returns an Int32. The ReflectFunction() method of ExpressionTreeReflection helps you to build a Func&amp;lt;Object, Int32&amp;gt; you can use to call the method. This function accepts as first argument an instance of the object that contain the method to invoke, then all needed parameters. The first advantage is that you have a more strongly typed way to dynamically invoke the function instead of using reflection. Here is the code that invoke a function that need a string parameter.&lt;/p></description></item><item><title>Some thoughts on security books</title><link>https://www.codewrecks.com/post/old/2008/09/some-thoughts-on-security-books/</link><pubDate>Thu, 11 Sep 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/some-thoughts-on-security-books/</guid><description>&lt;p>I’m not a security expert and I have a basic knowledge of the subject, such as knowing STRIDE, a little bit of SDL and some background on cryptography. If I look at my bookshelf I see that I have some security books on various argument, and I’m wonder if they are enough or if I need to buy some other books.&lt;/p>
&lt;p>There are a lot of good books on security but I think that the argument deserves some special treatment. What I mean is that “ &lt;strong>We does not need more security books but more security in each Book&lt;/strong> “. For some technologies like asp.net there are great books of more than 1000 pages, that contains little or no information about security issues. You can buy &lt;a href="http://www.amazon.com/Building-Microsoft-ASP-NET-Applications-Pro-Developer/dp/0735618909/ref=sr_1_3?ie=UTF8&amp;amp;amp;s=electronics&amp;amp;amp;qid=1221134899&amp;amp;amp;sr=8-3">some&lt;/a> &lt;a href="http://www.amazon.com/Secure-ASP-NET-AJAX-Development/dp/B000OZ0NLW/ref=sr_1_2?ie=UTF8&amp;amp;amp;s=books&amp;amp;amp;qid=1221134899&amp;amp;amp;sr=8-2">other&lt;/a> &lt;a href="http://www.amazon.com/Developing-More-Secure-Microsoft%C2%AE-Applications-Developer/dp/0735623317/ref=sr_1_1?ie=UTF8&amp;amp;amp;s=books&amp;amp;amp;qid=1221134899&amp;amp;amp;sr=8-1">books&lt;/a> on the subject, but in the end developers tend to ignore security aspects of technologies.&lt;/p></description></item><item><title>How to implement INotifyPropertyChanged with CodeDom</title><link>https://www.codewrecks.com/post/old/2008/08/how-to-implement-inotifypropertychanged-with-codedom/</link><pubDate>Thu, 14 Aug 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/how-to-implement-inotifypropertychanged-with-codedom/</guid><description>&lt;p>In a little series of posts I showed how to create runtime class that extend a base entity to implement INotifyPropertyChanged. Despite the fact that dynamic code generation is surely not the best option to implement such an interface, I’m still interested in showing how to do it.&lt;/p>
&lt;p>The greatest problem of Run-Time code generation with Reflection.Emit or Castle.DynamicProxy is that you cannot use generated class in your code, this is simply due to the fact that the type exists only at runtime. Another approach is to generate source code at design time, this makes possible to use the generated type wherever you want, and extend it thanks to Partial keyword.&lt;/p></description></item><item><title>PostCompiling code Today my mind wanders</title><link>https://www.codewrecks.com/post/old/2008/08/postcompiling-code-today-my-mind-wanders/</link><pubDate>Thu, 07 Aug 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/postcompiling-code-today-my-mind-wanders/</guid><description>&lt;p>In these days in our italian blogs we were ruminating about the possibility to have some sort of automation to implements automatically INotifyPropertyChanged for our classes, without having to explicitly write code.&lt;/p>
&lt;p>Why we could want such an automation? The answer is: to make our domain more “&lt;em>Infrastructure Ignorant&lt;/em>“, the goal is use POCO object for our domain, moving the infrastructure stuff (Like the INotifyPropertyChanged) somewhere else.&lt;/p>
&lt;p>First of all, I’m not an advocate of “POCO at any cost!”, I’m quite sure that the best approach is implementing such interfaces directly in your domain classes, maybe with the use of custom snippet like &lt;a href="http://www.codemetropolis.com/">Marco&lt;/a> suggests. But the technical part of such a problem really intrigues me a lot.&lt;/p></description></item><item><title>Implement InotifyPropertyChanged with CastleDynamicProxy</title><link>https://www.codewrecks.com/post/old/2008/08/implement-inotifypropertychanged-with-castledynamicproxy/</link><pubDate>Mon, 04 Aug 2008 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/implement-inotifypropertychanged-with-castledynamicproxy/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2008/08/04/implement-inotifypropertychanged-with-dynamic-code-generation/">previous post&lt;/a>, I simply show how to dynamically generate a class that inherits from a given class, and implement INotifyPropertyChanged for all virtual properties of the object. The example used Reflection.Emit, and I must admit that for people not acquainted with MSIL, the code can be really hard to write. Thanks to &lt;a href="http://www.castleproject.org/">Castle project&lt;/a> we can also use the DynamicProxy library to obtain the same result, but with really less code and less effort.&lt;/p></description></item><item><title>Implement INotifyPropertyChanged with dynamic code generation</title><link>https://www.codewrecks.com/post/old/2008/08/implement-inotifypropertychanged-with-dynamic-code-generation/</link><pubDate>Mon, 04 Aug 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/implement-inotifypropertychanged-with-dynamic-code-generation/</guid><description>&lt;p>Code for this post can be found &lt;a href="http://www.codewrecks.com/blog/storage/ingen.zip">here&lt;/a>.&lt;/p>
&lt;p>&lt;a href="http://blogs.ugidotnet.org/pape">Andrea Saltarello&lt;/a>, in &lt;a href="http://blogs.ugidotnet.org/pape/archive/2008/07/29/beyond-persistence-ignorance-real-poco.aspx">his post&lt;/a> of some days ago, told about POCO object and dynamic implementation of INotifyPropertyChanged.&lt;/p>
&lt;p>The problem is, how to implement INotifyPropertyChanged with dynamic code generation? The answer is that is quite simple even if we do not relay on Castle.DynamicProxy, here is a simple domain class.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> String Property
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> property; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { property = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String property;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> Int32 AnotherProp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> anotherProp; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { anotherProp = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Int32 anotherProp; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>Now let’s see how you can create a dynamic type that inherits from it, and overrides all virtual properties implementing the INotifyPropertyChanged interface. The first step is to define the event PropertyChanged, so you need three methods, one for the add an event listener, the other for removing the event listener and the final one to raise the event. First step, create all the method info I’ll need for dynamic generation&lt;/p></description></item><item><title>Cleaner Xml Serialization</title><link>https://www.codewrecks.com/post/old/2008/06/cleaner-xml-serialization/</link><pubDate>Wed, 25 Jun 2008 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/cleaner-xml-serialization/</guid><description>&lt;p>Suppose you have a simple class&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[Serializable, XmlRoot(&amp;#34;LogEntry&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LogFeeder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Guid sourceId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String _Data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String _Log;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [XmlAttribute(&amp;#34;DetailSourceId&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Guid SourceId {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> sourceId; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { sourceId = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [XmlAttribute(&amp;#34;Data&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Data {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> _Data; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { _Data = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [XmlAttribute(&amp;#34;Log&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Log {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> _Log; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> { _Log = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> LogIUriFeeder() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> LogIUriFeeder(Guid sourceId, &lt;span style="color:#66d9ef">string&lt;/span> data, &lt;span style="color:#66d9ef">string&lt;/span> log) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.sourceId = sourceId;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _Data = data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _Log = log;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>If you serialize with XmlSerializer you got this output as default&lt;/p></description></item><item><title>Entity Framework and lazy load</title><link>https://www.codewrecks.com/post/old/2008/05/entity-framework-and-lazy-load/</link><pubDate>Fri, 30 May 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/entity-framework-and-lazy-load/</guid><description>&lt;p>In an &lt;a href="http://www.codewrecks.com/blog/index.php/2008/04/06/adonet-entity-framework-and-lazy-load/">old post of mine&lt;/a> I expressed my perplexity with the fetching strategy of Entity Framework. We can discuss on the fact that automatic lazy load can be useful or not, but I expressed my opinion that, if you decide not to include automatic lazy load, and you implement manual load, if the developer forget to call load() an exception should be raised. This because if you forget to load a collection and access it, you find it empty, and this is misleading.&lt;/p></description></item><item><title>Cache e webrequest</title><link>https://www.codewrecks.com/post/old/2008/05/cache-e-webrequest/</link><pubDate>Fri, 16 May 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/cache-e-webrequest/</guid><description>&lt;p>The webRequest object is fantastic to download content from the web, but it has some strange behaviour. Today I implemented cache in a component of mine, it needs to monitor a series of web pages, and clearly it is not useful to download full content of the page if the page itself is not changed. The solution is to use a cache.&lt;/p>
&lt;p>First you need to know how does it work cache for web pages, I’m not an expert but it is quite simple, you need to check in the response header for a couple of header, here these tags for &lt;a href="http://www.nablasoft.com">www.nablasoft.com&lt;/a>&lt;/p></description></item><item><title>Strings with Null characters</title><link>https://www.codewrecks.com/post/old/2008/04/strings-with-null-characters/</link><pubDate>Fri, 25 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/strings-with-null-characters/</guid><description>&lt;p>Sometimes.NET surprise me even if it is a really long time I work with it, some days ago I discovered that a string can contains Null characters. This seems strange to me because chars are value type, and a value type sould never assume value nothing, but it can for string.&lt;/p>
&lt;p>I have an asp.net application written in Visual Basic, that takes some string from database and display them in simple literal control inside a template column of a gridview. It happens that the third page of the grid shows only the first 5 elements, and the rest of the lines does not gets rendered at all when I use an updatePanel. After some minutes of thinking I inspect the code and I see that a string that comes from the database has lenght 970 but the debugger and the UI shows only the first 262 chars.&lt;/p></description></item><item><title>Unknown feature of visual studio 2005 8230 javascript debugger</title><link>https://www.codewrecks.com/post/old/2008/04/unknown-feature-of-visual-studio-2005-javascript-debugger/</link><pubDate>Fri, 25 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/unknown-feature-of-visual-studio-2005-javascript-debugger/</guid><description>&lt;p>One of my friends told me that one of the most interesting news of Visual studio 2008 is the ability to debug javascript ….. but this is possible even with visual studio 2005.&lt;/p>
&lt;p>Just try to write the line&lt;/p>
&lt;p>&lt;em>debugger;&lt;/em>&lt;/p>
&lt;p>into javascript code and when you run the page you are prompted to attach a debugger, just attach the visual studio with the solution open and the game is done ;). Do not forget to keep open the &lt;em>script explorer&lt;/em>windows, you can find it in Debug-&amp;gt;Windows-&amp;gt;Script Explorer, this windows gives you a list of all the script loaded into Internet Explorer and you can use to put breakpoint into.&lt;/p></description></item><item><title>Working with MSHTML</title><link>https://www.codewrecks.com/post/old/2008/04/working-with-mshtml/</link><pubDate>Fri, 25 Apr 2008 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/working-with-mshtml/</guid><description>&lt;p>If you need to parse an html content, the MSHTML library can be a viable solution, it is quite simple to use even if it has some peculiarity, the first thing to do is to load data from a source, maybe you have the HTML content on a string, (perhaps you downloaded the page with a WebRequest), here is the code to load all the content of a page and then take only the content of the page, whitout all the html and script tags&lt;/p></description></item><item><title>Dynamic load type with TypeGetType and TypeLoadException</title><link>https://www.codewrecks.com/post/old/2008/04/dynamic-load-type-with-typegettype-and-typeloadexception/</link><pubDate>Fri, 18 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/dynamic-load-type-with-typegettype-and-typeloadexception/</guid><description>&lt;p>I love dynamically creating object with Activator.CreateInstance, in a project of mine I created a little scheduler that accept object of type ICOmmand, it load assembly from disk, permits you to configure the command reading some custom attributes, and so on.&lt;/p>
&lt;p>When You use the scheduler to schedule a command it is frequent that the command is contained in an Assembly that references some other assemblies, if the person that use the scheduler forget to include all dependencies when the code call Type.GetType(typeName, true) to resolve the type from name, it raise a TypeLoadException. The bad thing about this exception is that it does not give a lot of help, it tells you &amp;ldquo;Impossibile to load type X&amp;rdquo; and stop.&lt;/p></description></item><item><title>LINQ expression tree and linq to nhibernate</title><link>https://www.codewrecks.com/post/old/2008/04/linq-expression-tree-and-linq-to-nhibernate/</link><pubDate>Wed, 09 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-expression-tree-and-linq-to-nhibernate/</guid><description>&lt;p>When I first begin investigating lambda expressions I was fascinated by expression tree, so I decided to spent some time familiarizing with them. I try to create an alternate implementation of LINQ to NHibernate, I started from the excellent project of &lt;a href="http://www.ayende.com">Ayende&lt;/a> and I tried to create a new implementation from scratch. It is far from being a real and usable library, but it could be interesting to see how expression trees works. you can find it in subversion &lt;a href="http://nablasoft.googlecode.com/svn/trunk/NHibernate.Linq.Alt" title="https://nablasoft.googlecode.com/svn/trunk/NHibernate.Linq.Alt">http://nablasoft.googlecode.com/svn/trunk/NHibernate.Linq.Alt&lt;/a>.&lt;/p></description></item><item><title>AdoNET Entity Framework and lazy load</title><link>https://www.codewrecks.com/post/old/2008/04/adonet-entity-framework-and-lazy-load/</link><pubDate>Sun, 06 Apr 2008 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/adonet-entity-framework-and-lazy-load/</guid><description>&lt;p>This morning I installed Ado.net entity framework Beta2. I begin to run some example on &lt;a href="http://msdn2.microsoft.com/en-us/library/bb399731.aspx">School Database&lt;/a>, and here the first surprise happens.&lt;/p>
&lt;p>In Linq2Sql and in NHibernate lazy load happens automatically, and at least if I have a relation some fetch strategy is chosen to load related entities, it seems that in EF this does not happens. Here is a little example&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>ObjectQuery&lt;span style="color:#f92672">&amp;lt;&lt;/span>Department&lt;span style="color:#f92672">&amp;gt;&lt;/span> query &lt;span style="color:#f92672">=&lt;/span> conn.CreateQuery&lt;span style="color:#f92672">&amp;lt;&lt;/span>Department&lt;span style="color:#f92672">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Select value d from Department AS d where d.Name = @name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query.&lt;span style="color:#66d9ef">Parameters&lt;/span>.&lt;span style="color:#66d9ef">Add&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> ObjectParameter(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Economics&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foreach (Department dep &lt;span style="color:#66d9ef">in&lt;/span> query) &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Department {0} has following courses&amp;#34;&lt;/span>, dep.Name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Int32 I &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foreach(Course &lt;span style="color:#66d9ef">c&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> dep.Course) &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;{0}-{1}&amp;#34;&lt;/span>, &lt;span style="color:#f92672">++&lt;/span>I, &lt;span style="color:#66d9ef">c&lt;/span>.Title);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>The code is really simple, I query the database for a department and then print the name of the department and related courses. When I run the example the result is surprising, no errors happens, but the course collection is empty. The reason is that automatic fetching is not enabled and if you want to access course objects you have manually to call load of EntityCollection.&lt;/p></description></item><item><title>Cruise control net and Unable to execute file svnexe</title><link>https://www.codewrecks.com/post/old/2008/04/cruise-control-net-and-unable-to-execute-file-svnexe/</link><pubDate>Fri, 04 Apr 2008 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/cruise-control-net-and-unable-to-execute-file-svnexe/</guid><description>&lt;p>The sourceControl task of cc.net should specify the path of the executable of svn.exe as in the following example.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;sourcecontrol&lt;/span> &lt;span style="color:#a6e22e">type=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;svn&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;workingDirectory&amp;gt;&lt;/span>C:\CruiseControl.NET\Projects\xxx\src&lt;span style="color:#f92672">&amp;lt;/workingDirectory&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;trunkUrl&amp;gt;&lt;/span>svn://10.8.0.1/xxx&lt;span style="color:#f92672">&amp;lt;/trunkUrl&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;username&amp;gt;&lt;/span>CCnet&lt;span style="color:#f92672">&amp;lt;/username&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;password&amp;gt;&lt;/span>xxxx&lt;span style="color:#f92672">&amp;lt;/password&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;autoGetSource&amp;gt;&lt;/span>true&lt;span style="color:#f92672">&amp;lt;/autoGetSource&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;executable&amp;gt;&lt;/span>c:\Program Files\Subversion\bin\svn.exe&lt;span style="color:#f92672">&amp;lt;/executable&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/sourcecontrol&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>If you omit the &amp;lt;executable&amp;gt; part of the source control it happens that if you do not have subversion in your path, cc.net cannot find svn.exe. The error is something like &amp;ldquo;Unable to execute file C:\CruiseControl.NET\Projects\xxx\svn.exe&amp;rdquo; and it could be misleading since cc.net try to execute svn in the directory of the project.&lt;/p></description></item><item><title>Subtree substitution thanks to microsoft ExpressionVisitor</title><link>https://www.codewrecks.com/post/old/2008/03/subtree-substitution-thanks-to-microsoft-expressionvisitor-2/</link><pubDate>Wed, 05 Mar 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/subtree-substitution-thanks-to-microsoft-expressionvisitor-2/</guid><description>&lt;p>Previous part: &lt;a href="http://www.nablasoft.com/Alkampfer/?p=141">Part1&lt;/a>, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=145">Part2&lt;/a>, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=149">Part3&lt;/a>.&lt;/p>
&lt;p>One of the most important feature of the microsoft ExpressionVisitor I’ve told you before is the ability to substitute expression. Let’s for example see how the VisitBinary is implemented.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> Expression VisitBinary(BinaryExpression b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> Expression left = &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Left);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> Expression right = &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span> Expression conversion = b.Conversion == &lt;span style="color:#66d9ef">null&lt;/span> ? &lt;span style="color:#66d9ef">null&lt;/span> : &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Conversion);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (left != b.Left || right != b.Right || conversion != b.Conversion)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (b.NodeType == ExpressionType.Coalesce &amp;amp;&amp;amp; b.Conversion != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Expression.Coalesce(left, right, conversion &lt;span style="color:#66d9ef">as&lt;/span> LambdaExpression);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Expression.MakeBinary(b.NodeType, left, right, b.IsLiftedToNull, b.Method);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">14&lt;/span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>As you can notice, in the line 6 the code is checking if the subtree returned from the left or right branch evaluation are different from the original one, if yes it simply substitute the expression. This is important because we can build visitor that actually replaces part of the tree making traversal simplier. One of the most interesing application is given in this &lt;a href="http://blogs.msdn.com/mattwar/archive/2007/10/09/linq-building-an-iqueryable-provider-part-viii.aspx">looooong tutorial&lt;/a>. Here the author use extensively this feature to build a mini linq to sql provider.&lt;/p></description></item><item><title>Subtree substitution thanks to microsoft ExpressionVisitor</title><link>https://www.codewrecks.com/post/old/2008/03/subtree-substitution-thanks-to-microsoft-expressionvisitor/</link><pubDate>Wed, 05 Mar 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/subtree-substitution-thanks-to-microsoft-expressionvisitor/</guid><description>&lt;p>Previous part: &lt;a href="http://www.nablasoft.com/Alkampfer/?p=141">Part1&lt;/a>, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=145">Part2&lt;/a>, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=149">Part3&lt;/a>.&lt;/p>
&lt;p>One of the most important feature of the microsoft ExpressionVisitor I’ve told you before is the ability to substitute expression. Let’s for example see how the VisitBinary is implemented.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">virtual&lt;/span> Expression VisitBinary(BinaryExpression b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> Expression left = &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Left);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> Expression right = &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span> Expression conversion = b.Conversion == &lt;span style="color:#66d9ef">null&lt;/span> ? &lt;span style="color:#66d9ef">null&lt;/span> : &lt;span style="color:#66d9ef">this&lt;/span>.Visit(b.Conversion);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (left != b.Left || right != b.Right || conversion != b.Conversion)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (b.NodeType == ExpressionType.Coalesce &amp;amp;&amp;amp; b.Conversion != &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Expression.Coalesce(left, right, conversion &lt;span style="color:#66d9ef">as&lt;/span> LambdaExpression);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Expression.MakeBinary(b.NodeType, left, right, b.IsLiftedToNull, b.Method);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">14&lt;/span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>As you can notice, in the line 6 the code is checking if the subtree returned from the left or right branch evaluation are different from the original one, if yes it simply substitute the expression. This is important because we can build visitor that actually replaces part of the tree making traversal simplier. One of the most interesing application is given in this &lt;a href="http://blogs.msdn.com/mattwar/archive/2007/10/09/linq-building-an-iqueryable-provider-part-viii.aspx">looooong tutorial&lt;/a>. Here the author use extensively this feature to build a mini linq to sql provider.&lt;/p></description></item><item><title>Against on ExpressionTree</title><link>https://www.codewrecks.com/post/old/2008/02/against-on-expressiontree/</link><pubDate>Tue, 19 Feb 2008 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/against-on-expressiontree/</guid><description>&lt;p>Previous part: &lt;a href="http://www.nablasoft.com/Alkampfer/?p=141">Part1&lt;/a>, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=145">Part2&lt;/a>&lt;/p>
&lt;p>Ok, lets move on on the anatomy of an expression, let’s take as example the following screenshot.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>The original expression is customer =&amp;gt; customer.Property.StartsWith(“A”), and the expression is dissected in a node of type Lambda that contains a Call node. The &lt;em>Call&lt;/em> node is a node that express the invocation of a method, and internally contains all the needed information.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> Expression VisitMethodCall(MethodCallExpression m)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder parameterList = &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (ParameterInfo pi &lt;span style="color:#66d9ef">in&lt;/span> m.Method.GetParameters()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterList.Append(pi.ParameterType.Name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parameterList.Append(&lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (parameterList.Length &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>) parameterList.Length -= &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Current.Text = String.Format(&lt;span style="color:#e6db74">&amp;#34;{0} [{3} {1}.{2}({4})]&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Current.Text, m.Method.DeclaringType.Name, m.Method.Name, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m.Method.ReturnType.Name, parameterList.ToString());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">base&lt;/span>.VisitMethodCall(m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>The real node type is MethodCallExpression and internally contains the &lt;em>MethodInfo&lt;/em> object that will be invocated, in this example the StartsWith of class String. The base visitor has this code for the &lt;em>Call&lt;/em>node&lt;/p></description></item><item><title>C 30 Expression Tree Again part 2</title><link>https://www.codewrecks.com/post/old/2008/02/c-30-expression-tree-again-part-2/</link><pubDate>Sat, 16 Feb 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/c-30-expression-tree-again-part-2/</guid><description>&lt;p>In the &lt;a href="http://www.nablasoft.com/Alkampfer/?p=141">preceding post&lt;/a> I showed that a lambda expression can be converted by the compiler in an object of type Expression that actually models the expression tree. With this post we can begin to have more fun, first of all I modified the visitor to show the exact tree of the expression. Here is a screenshot&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb2.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb2.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>As you can see the structure of the lambda is more clear, the original lambda contains an Add Expression that in turns contains two parameter expression. The lambda has a collection of parameters that can be inspected at runtime, I simply show them in a listview and permit to the user to set a value. When you set values for parameters you can press the Execute button and “voilÃ “, the expression is executed. The code to execute the function is the following.&lt;/p></description></item><item><title>BindingListFind and NotImplementedException</title><link>https://www.codewrecks.com/post/old/2007/10/bindinglistfind-and-notimplementedexception/</link><pubDate>Fri, 12 Oct 2007 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/10/bindinglistfind-and-notimplementedexception/</guid><description>&lt;p>BindingList&amp;lt;T&amp;gt; is a great class to do binding to list of custom objects, it implements IBindingList for you, giving the ability to use the BindingList&amp;lt;T&amp;gt; as datasource for the BindingSource control. But when you cast the BindingList&amp;lt;T&amp;gt; to the IBindingList interface and try to call Find() Method you’ll get a NotImplementedException, how can it be possible?. The reason for this can be found &lt;a href="http://msdn2.microsoft.com/en-us/library/ms132695.aspx">here&lt;/a>, but the real question is, it is possible to build a better BindingList that supports a generic Find() for properties of a business object?&lt;/p></description></item><item><title>Generate code with CodeDom</title><link>https://www.codewrecks.com/post/old/2007/09/generate-code-with-codedom/</link><pubDate>Thu, 13 Sep 2007 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/09/generate-code-with-codedom/</guid><description>&lt;p>Code generators are really useful because they could cut down the time needed to write tedious code. There are a very good code generator called CodeSmith, with an old version that is freeware, but it is possible to generate code with own code with the help of CodeDom. CodeDom namespace contains a lot of classes useful to define code that can be generated in various languages by a specific CodeDomProvider, let’s see an example.&lt;/p></description></item><item><title>IRepositoryT and query objects</title><link>https://www.codewrecks.com/post/old/2007/08/irepository-and-query-objects/</link><pubDate>Sun, 05 Aug 2007 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/08/irepository-and-query-objects/</guid><description>&lt;p>When you use a generic Interface for repository pattern there is always the problem of Query object. If you use nhibernate you can use Criteria API, but if you want to make your code not dependent by the ORM used, you often need to implement your Criteria Query. The most annoying problem with this approach is duplication of code, this because you usually create your query object and the concrete repository must translate from the Custom Query Object to the query object supported by the ORM framework.&lt;/p></description></item><item><title>NGenerics</title><link>https://www.codewrecks.com/post/old/2007/06/ngenerics/</link><pubDate>Fri, 29 Jun 2007 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/06/ngenerics/</guid><description>&lt;p>If you like me are tired of.NET standard IList&amp;lt;T&amp;gt; that does not offer a lot of method to do sorting, filtering and more, you can have a look at &lt;a href="http://www.codeplex.com/NGenerics/">NGenerics&lt;/a>, a complete library composed of a lot of classes to satisfy all the need you can have to store data. You have algorithms for Graph for math, data structures and a lot more. What I really love are the classes for sorting, ranging from bubblesort, quicksort and a lot more.&lt;/p></description></item><item><title>Standard configuration for net 20</title><link>https://www.codewrecks.com/post/old/2007/06/standard-configuration-for-net-20/</link><pubDate>Thu, 14 Jun 2007 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/06/standard-configuration-for-net-20/</guid><description>&lt;p>I’m trying to develop a little framework to include in future projects, actually I had classes and project spread around partition D F and G, and I realized that I’m not really a tidy person :D. At this moment I only had written some classes to handle access to db with direct Sql, and I really liked used Anonymous delegate as did ayende in one of his post. At a certain point I faced the problem to decide where to save the setting of the project, for example the main connectionString. I must admit that I really love the XML configuration of.Net, so instead of using plain application setting I plan to use a custom configuration. I started with a simple class to handle global section of the configuration.&lt;/p></description></item></channel></rss>