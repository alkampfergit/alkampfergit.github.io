<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AzDo on Codewrecks</title><link>https://www.codewrecks.com/tags/azdo/</link><description>Recent content in AzDo on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 21 Jan 2025 08:12:42 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/azdo/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure DevOps Pills: Hide not used features from Team Projects</title><link>https://www.codewrecks.com/post/azdo/pills/hide-not-used-feature/</link><pubDate>Tue, 21 Jan 2025 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/hide-not-used-feature/</guid><description>&lt;p>Azure DevOps is a really complete set of functionalities to manage your Development Team and more. As you can see from Figure 1, it has five main Macro Set of Features that you can use. All these features are visible in the &lt;strong>five icons in the lower right part of the card of each Team Project&lt;/strong>&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/azdo-blocks.png"> &lt;img src="../images/azdo-blocks.png" alt="AzDo five main features blocks" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>AzDo five main features blocks&lt;/em>&lt;/p>
&lt;p>The very same five macro Feature set is visible on the left menu when you work with the detail of the Team Project. These part are, left to right&lt;/p></description></item><item><title>Azure DevOps Pills: Cleanup on premise pipeline agents</title><link>https://www.codewrecks.com/post/azdo/pills/cleanup-build-agent/</link><pubDate>Mon, 02 Dec 2024 08:00:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/cleanup-build-agent/</guid><description>&lt;p>Managing pipeline/build agents is something that &lt;strong>you should avoid if possible, preferring &lt;a href="https://www.codewrecks.com/post/old/2019/12/azure-devops-agent-with-docker-compose/">docker based agents&lt;/a> or Microsoft hosted agents&lt;/strong>. Sometimes this is not a viable options, especially if you have lots of integration tests, that runs on mongodb/elasticsearch/etc etc. While it &lt;strong>is quite simple to create a pipeline that uses docker to run these prerequisites&lt;/strong> speed is sometimes a problem that makes this solution not so feasible.&lt;/p>
&lt;p>Azure DevOps has a cost for pipeline that is based on concurrent execution, so it is quite &lt;strong>important that pipelines run fast to use less license but, more important, to give a quick feedback to the team&lt;/strong>. For this reason, we use physical machines, with quick NVMe Disks, RAM and Mongodb / Elastic / SQL installed on bare metal for maximum speed for integration tests.&lt;/p></description></item><item><title>Azure DevOps: Cleanup Docker images for your Pull Requests</title><link>https://www.codewrecks.com/post/azdo/pipeline/clean-docker-images-for-your-pull-requests/</link><pubDate>Tue, 09 Jul 2024 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/clean-docker-images-for-your-pull-requests/</guid><description>&lt;p>This article is a prosecution of &lt;a href="https://www.codewrecks.com/post/azdo/pipeline/build-and-create-docker-for-your-pr/">the previous one on creating Docker Images for your Pull Requests&lt;/a> and deals with cleanup of your Docker Registry.&lt;/p>
&lt;h2 id="authentication-to-azure">Authentication to Azure&lt;/h2>
&lt;p>In Azure DevOps you can use connected services to connect to Azure Accounts or external services, but since I&amp;rsquo;m using mainly PowerShell scripts inside my repository, &lt;strong>I often prefer using a Service Principal&lt;/strong>. This is a good practice because you can limit the access of the service principal to only the resources it needs to access, and you can revoke the access at any time.&lt;/p></description></item><item><title>Azure DevOps: Create Docker images for a Pull Request</title><link>https://www.codewrecks.com/post/azdo/pipeline/build-and-create-docker-for-your-pr/</link><pubDate>Sun, 07 Jul 2024 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/build-and-create-docker-for-your-pr/</guid><description>&lt;p>The whole Pull Request process mechanism has a single purpose, &lt;strong>have a better quality of the code that reach develop or generally speaking main branch&lt;/strong>. The ability to share the code and being able to get feedback from other members of the team is invaluable, but it is enough?&lt;/p>
&lt;p>The basic concept is: develop is a branch that should be &lt;strong>considered production&lt;/strong> and it is not uncommon for teams to deploy develop branch automatically in internal production servers, a procedure called &lt;strong>dogfooding&lt;/strong>. Here in Nebula Team we deploy automatically develop branch in our internal production servers, and sometimes you intercept bug before they hit master and production of all customer.&lt;/p></description></item><item><title>Azure DevOps: Package source mapping in pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/package-sources-mapping-and-pipeline/</link><pubDate>Tue, 21 May 2024 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/package-sources-mapping-and-pipeline/</guid><description>&lt;p>If you use more than one Nuget Feed in your solution and especially if you are using central package versioning, you probably got a warning telling you to use &lt;strong>Package Source Mapping&lt;/strong>. The process is straightforward, it consist in modifying your nuget.config file &lt;strong>to specify for each package the source feed where nuget can find the package&lt;/strong>.&lt;/p>
&lt;p>Here is an example for a solution I&amp;rsquo;m working:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#66d9ef">?&lt;/span>xml version=&lt;span style="color:#e6db74">&amp;#34;1.0&amp;#34;&lt;/span> encoding=&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>?&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;packageRestore&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;automatic&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;True&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/packageRestore&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;activePackageSource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;nuget.org&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;https://api.nuget.org/v3/index.json&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;ProximoAzDo&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;https://pkgs.dev.azure.com/xxx/_packaging/yyy@Local/nuget/v3/index.json&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/activePackageSource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;packageSources&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;nuget.org&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;https://api.nuget.org/v3/index.json&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;add key=&lt;span style="color:#e6db74">&amp;#34;ProximoAzDo&amp;#34;&lt;/span> value=&lt;span style="color:#e6db74">&amp;#34;https://pkgs.dev.azure.com/xxx/_packaging/yyy@Local/nuget/v3/index.json&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/packageSources&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;packageSourceMapping&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;packageSource key=&lt;span style="color:#e6db74">&amp;#34;nuget.org&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;package pattern=&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/packageSource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;packageSource key=&lt;span style="color:#e6db74">&amp;#34;ProximoAzDo&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;package pattern=&lt;span style="color:#e6db74">&amp;#34;Jarvis*&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;package pattern=&lt;span style="color:#e6db74">&amp;#34;Proximo*&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/packageSource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/packageSourceMapping&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/configuration&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see I have &lt;strong>two different feed, one is nuget.org and the other is a private feed hosted in Azure DevOps&lt;/strong>. In the ProximoAzdo I can simply specify with wildcard the name of the packages that are to be taken from that specific feed, while the nuget.org has the generic * and is used for anyhing else.&lt;/p></description></item><item><title>Streamlining Cloud Deployment: Azure DevOps and AWS Integration Strategies</title><link>https://www.codewrecks.com/post/azdo/pipeline/deploy-in-s3-in-aws/</link><pubDate>Thu, 14 Dec 2023 08:50:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/deploy-in-s3-in-aws/</guid><description>&lt;p>Let&amp;rsquo;s assume we need to deploy in a cloud environment and prefer &lt;strong>not to install an agent on each physical environment&lt;/strong>. For example, managing numerous agents across multiple virtual machines becomes cumbersome from an Azure DevOps standpoint. While we can surely create an environment for each distinct installation, usually this create some burden administrating the agents.&lt;/p>
&lt;p>In such a scenario, the optimal approach is to &lt;strong>create simple PowerShell or Bash installation scripts that will be distributed along pipeline artifacts&lt;/strong>. These scripts simply will deploy artifacts in local machine without need of an agent. The only challenge that remains is how to transfer the pipeline artifacts and scripts to the target machines.&lt;/p></description></item><item><title>Azure DevOps: Checkout specific branch to avoid gitversion errors in pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/checkout-code-in-build-pipeline/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/checkout-code-in-build-pipeline/</guid><description>&lt;p>If you create a new Azure DevOps Pipeline and include running GitVersion, sometimes you may encounter an error like the following:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>INFO [11/15/23 19:00:57:95] Begin: Calculating base versions 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO [11/15/23 19:00:57:96] Begin: Attempting to inherit branch configuration from parent branch 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO [11/15/23 19:00:57:97] End: Attempting to inherit branch configuration from parent branch (Took: 3.55ms) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO [11/15/23 19:00:57:97] End: Calculating base versions (Took: 12.03ms) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ERROR [11/15/23 19:00:57:99] An unexpected error occurred: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>System.NullReferenceException: Object reference not set to an instance of an object. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.Handles.ObjectHandle.op_Implicit(ObjectHandle handle) in 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/_/LibGit2Sharp/Core/Handles/Objects.cs:line 509 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.Proxy.git_commit_author(ObjectHandle obj) in /_/LibGit2Sharp/Core/Proxy.cs:line 289 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.LazyGroup`1.Dependent`2.LibGit2Sharp.Core.LazyGroup&amp;lt;T&amp;gt;.IEvaluator&amp;lt;TInput&amp;gt;.Evaluate(TInput 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>input) in /_/LibGit2Sharp/Core/LazyGroup.cs:line 88 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.LazyGroup`1.&amp;lt;Evaluate&amp;gt;b__6_0(T input) in /_/LibGit2Sharp/Core/LazyGroup.cs:line 36 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.GitObjectLazyGroup.EvaluateInternal(Action`1 evaluator) in 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/_/LibGit2Sharp/Core/GitObjectLazyGroup.cs:line 20 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.LazyGroup`1.Evaluate() in /_/LibGit2Sharp/Core/LazyGroup.cs:line 34 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.LazyGroup`1.Dependent`2.Evaluate() in /_/LibGit2Sharp/Core/LazyGroup.cs:line 80 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Core.LazyGroup`1.Dependent`2.get_Value() in /_/LibGit2Sharp/Core/LazyGroup.cs:line 73 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at LibGit2Sharp.Commit.get_Committer() in /_/LibGit2Sharp/Commit.cs:line 87 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at GitVersion.Commit..ctor(Commit innerCommit) in 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>D:\a\GitVersion\GitVersion\src\GitVersion.LibGit2Sharp\Git\Commit.cs:line 17 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at GitVersion.Commit.&amp;lt;&amp;gt;c.&amp;lt;.ctor&amp;gt;b__3_0(Commit parent) in 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>D:\a\GitVersion\GitVersion\src\GitVersion.LibGit2Sharp\Git\Commit.cs:line 16 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source) &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>When executing get version within a local directory, the operation typically proceeds without issues. However, complications can arise during the Azure DevOps pipeline process.&lt;/p></description></item><item><title>Azure DevOps: Script Caching in Azure DevOps</title><link>https://www.codewrecks.com/post/azdo/pipeline/release-on-linux-cached-script/</link><pubDate>Mon, 30 Oct 2023 08:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/release-on-linux-cached-script/</guid><description>&lt;p>I&amp;rsquo;m authoring a release pipeline in Azure DevOps on an AWS ARM linux machine, I&amp;rsquo;ve installed the agent and created the script. The pipeline uses artifacts produced by &lt;strong>another build pipeline and depends on a git repository that contains script&lt;/strong>. Here is how resources are declared in the pipeline.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">resources&lt;/span>: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pipelines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">pipeline&lt;/span>: &lt;span style="color:#ae81ff">UniqueHost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">Publish-UniqueHost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repositories&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repository&lt;/span>: &lt;span style="color:#ae81ff">JarvisSetupScripts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">git&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ref&lt;/span>: &lt;span style="color:#ae81ff">feature/AWS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">JarvisSetupScripts&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Usually the question is: &lt;strong>why you store scripts in another repository?&lt;/strong>. The classic approach is writing release scripts inside the very same repository as source files, then include release script inside the build so &lt;strong>release pipeline depends only on one or more pipeline&lt;/strong>. Personally having the script in a different repositories easy script authoring, because you can simply modify the script, push, and then immediately re-trigger the pipeline to verify that everything is working as expected.&lt;/p></description></item><item><title>Simplifying Library Debugging with Azure DevOps Symbol Server</title><link>https://www.codewrecks.com/post/azdo/pipeline/streamline-library-debugging/</link><pubDate>Tue, 21 Mar 2023 08:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/streamline-library-debugging/</guid><description>&lt;p>When developing a code library, it is good practice to &lt;strong>publish it on a package manager like NuGet&lt;/strong>. A common objection to this approach is that using a library published as a package can make it difficult to debug the original code. However, this is not a significant issue as it &lt;strong>encourages you to write unit tests within the same project in which you develop your library&lt;/strong>, ensuring that the library is well-tested and free of regressions. Nevertheless, there are times when it is convenient to debug the source code of the library while using in a real project. This is true especially for complex libraries where it is difficult to create unit tests that covers all options.&lt;/p></description></item><item><title>Azure DevOps: pipeline permission to use an agent pool</title><link>https://www.codewrecks.com/post/azdo/pipeline/pipeline-permissions-agent-pool/</link><pubDate>Wed, 25 Jan 2023 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/pipeline-permissions-agent-pool/</guid><description>&lt;p>Scenario: We created a &lt;strong>new Agent Pool&lt;/strong> in Azure DevOps called &amp;ldquo;linux&amp;rdquo; and we added some &lt;strong>docker based agents&lt;/strong>, and finally we add this new pool into the available pool for a couple of builds. To verify that agents can indeed run the builds we scheduled run onto this new pool &lt;strong>but pipeline execution failed&lt;/strong>. The error is depicted in &lt;strong>Figure 1&lt;/strong>&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/build-failed-not-allowed-to-run-on-agent.png"> &lt;img src="../images/build-failed-not-allowed-to-run-on-agent.png" alt="Failed build details after changing pool to linux" />&lt;/a>&lt;/p></description></item><item><title>Azure DevOps: check typescript linting for a Pull Request</title><link>https://www.codewrecks.com/post/azdo/pipeline/pipeline-check-lint/</link><pubDate>Fri, 30 Dec 2022 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/pipeline-check-lint/</guid><description>&lt;p>Pull Requests is the moment when new code undergo formal review to verify that &lt;strong>it mets the basic quality requirement decided by the team&lt;/strong>. Most of the work can be done automatically, thanks to Azure DevcOps pipeline and various tools.&lt;/p>
&lt;p>Some of the checks can be fully automated by special &lt;strong>addin, like integration with SonarCloud&lt;/strong> so you basically does not need to do anything and you have some nice checks done to new code during PR. Sometimes you want to run custom code or checks, and it is really simple to do with few powershell lines and pipelines.&lt;/p></description></item><item><title>Azure DevOps Server: restart upgrade wizard</title><link>https://www.codewrecks.com/post/azdo/misc/restart-upgrade-wizard-azure-devops-server/</link><pubDate>Fri, 16 Dec 2022 06:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/misc/restart-upgrade-wizard-azure-devops-server/</guid><description>&lt;p>There are lots of reason why you have an &lt;strong>on-premise installation of Azure DevOps&lt;/strong>, and if you manage it, you must devote some time to keep it upgraded to the latest version.&lt;/p>
&lt;blockquote>
&lt;p>Keep your Azure DevOps server instance up to date constantly to avoid too big updates.&lt;/p>&lt;/blockquote>
&lt;p>Upgrade procedures are really simple, you just &lt;strong>launch the setup.exe from the latest version and follow the wizard&lt;/strong>. Actually not every person knows that the upgrade is basically a set of steps.&lt;/p></description></item><item><title>Azure DevOps: Conditional variable value in pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/conditional-variable-in-pipeline/</link><pubDate>Tue, 21 Jun 2022 08:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/conditional-variable-in-pipeline/</guid><description>&lt;p>Let&amp;rsquo;s examine a simple situation, in Azure DevOps you do not have a way to change pipeline priority, thus, if &lt;strong>you need to have an agent always ready for high-priority builds, you can resort using more agent Pools&lt;/strong>. Basically you have N license for pipeline, so you can create N-1 agents in the default Pool and &lt;strong>create another pool, lets call it Fast, where you have an agent installed in a High Performance machine&lt;/strong>. When you need to have a pipeline run that has high priority you can schedule to run in Fast Pool and the game is done.&lt;/p></description></item><item><title>Azure DevOps: run test in PowerShell and publish results</title><link>https://www.codewrecks.com/post/azdo/pipeline/run-test-in-powershell/</link><pubDate>Sat, 01 Jan 2022 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/run-test-in-powershell/</guid><description>&lt;p>Creating full build in PowerShell has &lt;a href="https://www.codewrecks.com/post/azdo/pipeline/powershell-build/">lots of advantages&lt;/a> because you can simply &lt;strong>launch the script and having the build run in any environment&lt;/strong>. This simplifies tremendously debugging build scripts and moving Continuous Integration from one engine to other (Ex from Azure DevOps to GitHub actions).&lt;/p>
&lt;p>Clearly you need to thing in advance how to integrate &lt;strong>with your current CI engine&lt;/strong> because usually you will need to communicate information to the engine.&lt;/p></description></item><item><title>Azure DevOps: Azure File copy troubleshooting</title><link>https://www.codewrecks.com/post/azdo/pipeline/azure-file-copy/</link><pubDate>Wed, 20 Oct 2021 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/azure-file-copy/</guid><description>&lt;p>If you need to copy files in a Azure Blob or in an Azure Virtual machine within a Azure DevOps pipeline, Azure File Copy Task is the right task to use, but sometimes you could find some problem that make it fails. In this post I&amp;rsquo;ll state some common errors I found using it and how to solve.&lt;/p>
&lt;h4 id="wrong-number-of-arguments-please-refer-to-the-help-page-on-usage-of-this-command">Wrong number of arguments, please refer to the help page on usage of this command&lt;/h4>
&lt;p>If you specify &lt;strong>additional command to the task you can have this error&lt;/strong>, actually I was not able to fully troubleshooting the reason, but I discovered that version 4 of the task is somewhat erratic, so it is really &lt;strong>better using version 3 that seems to me really more stable&lt;/strong>.&lt;/p></description></item><item><title>Passing boolean parameters to PowerShell scripts in Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/powershell-boolean/</link><pubDate>Sun, 08 Aug 2021 20:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/powershell-boolean/</guid><description>&lt;p>Let&amp;rsquo;s start from the problem, I have an Azure DevOps pipeline that calls a PowerShell script and the team needs to change the pipeline allowing &lt;strong>a boolean parameter to be passed to the PowerShell script when you queue the pipeline&lt;/strong>. The first tentative produces this error:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>C:\a\_work\&lt;span style="color:#ae81ff">56&lt;/span>\s\build.dotnet.ps1 &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cannot &lt;span style="color:#66d9ef">process&lt;/span> argument transformation on parameter &lt;span style="color:#e6db74">&amp;#39;forceInstallPackage&amp;#39;&lt;/span>. Cannot 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert value &lt;span style="color:#e6db74">&amp;#34;System.String&amp;#34;&lt;/span> to type &lt;span style="color:#e6db74">&amp;#34;System.Boolean&amp;#34;&lt;/span>. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Boolean parameters accept only Boolean values and numbers, &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The original code of the pipeline is the following one.&lt;/p></description></item><item><title>Azure DevOps: Use specific version of java in a pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/java-requirement-sonarcloud/</link><pubDate>Mon, 26 Apr 2021 17:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/java-requirement-sonarcloud/</guid><description>&lt;p>I have lots of pipelines with SonarCloud analysis, and in the last months I&amp;rsquo;ve started receiving warning for an old version of Java used in pipeline. &lt;strong>SonarCloud task scanner is gentle enough to warn you for months before dropping the support&lt;/strong>, nevertheless there is always the possibility that you forgot to update some agents so some pipeline starts failing with error&lt;/p>
&lt;blockquote>
&lt;p>The version of Java (1.8.xxx) you have used to run this analysis is deprecated and we stopped accepting it.&lt;/p></description></item><item><title>Continuous integration: PowerShell way</title><link>https://www.codewrecks.com/post/azdo/pipeline/powershell-build/</link><pubDate>Sat, 17 Apr 2021 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/powershell-build/</guid><description>&lt;p>I&amp;rsquo;m a great fan of Azure DevOps pipelines, I use them extensively, but I also a fan of simple building strategies, not relying on some specific build engine.&lt;/p>
&lt;blockquote>
&lt;p>For Continuous Integration, being too much dependent on a specific technology could be limiting.&lt;/p>&lt;/blockquote>
&lt;p>I&amp;rsquo;ve started CI with &lt;strong>many years ago with CC.NET&lt;/strong> and explored various engines, from MsBuild to Nant then Psake, cake etc. I&amp;rsquo;ve also used various CI tools, from TFS to AzureDevOps to TeamCity and others. My overall reaction to those tools was usually good, but &lt;strong>I always feel wrong to be bound to some specific technology&lt;/strong>. What about a customer using something I do not know like Travis CI? Also, when you need to do CI at customer sites, it is hard to force a particular technology. It is too easy to tell to a customer: just use X because it is the best, when the reality is that your knowledge of X is really good so it is your first choice.&lt;/p></description></item><item><title>Execute jobs depending on changed files on commit</title><link>https://www.codewrecks.com/post/azdo/pipeline/execution-condition-file-changed/</link><pubDate>Fri, 15 Jan 2021 17:50:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/execution-condition-file-changed/</guid><description>&lt;p>Configuring a build to build each commit to constantly verify quality of code is usually a good idea, but sooner or after, in big solutions, you start filling pipeline queue. The main problem is that, &lt;strong>when the team grows, the number of commits for each day of work increase and you start having problem in build queue&lt;/strong>. If build queue is more than one hour long, it is still acceptable, but if the queue is even more, it become clear that you should find a solution.&lt;/p></description></item><item><title>Authenticate to Azure DevOps private Nuget Feed</title><link>https://www.codewrecks.com/post/azdo/pipeline/nuget-feed-authenticate/</link><pubDate>Tue, 29 Dec 2020 10:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/nuget-feed-authenticate/</guid><description>&lt;p>When you build a project that depends on Azure DevOps hosted nuget feed, usually if the feed &lt;strong>is on the same organization of the pipeline and you are using Nuget task, everything regarding authentication happens automatically&lt;/strong>. A really different situation arise if you are using Nuget directly from Command Line or PowerShell script. A typical situation is: everything seems to work perfectly in your machine but during pipeline run you receive 401 (unauthenticated) error or the build hangs with a message like this:&lt;/p></description></item><item><title>Azure DevOps: Execute GitHub code analysis in a pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/github-code-analysis/</link><pubDate>Mon, 28 Dec 2020 08:50:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/github-code-analysis/</guid><description>&lt;p>Ok, I know that many of you are questioning: Why using Azure DevOps to analyze code with CodeQL? Using GitHub actions is the preferred way to do so why bother with running in another CI? The scenario is simple, a company has everything on Azure DevOps, it wants to retain everything there but it &lt;strong>want to be able to gain advantage from GitHub CodeQL analysis&lt;/strong>. This scenario is not so uncommon, and you &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/running-codeql-code-scanning-in-your-ci-system">have a nice GitHub guide&lt;/a> on how to run CodeQL code scanning in your CI System.&lt;/p></description></item><item><title>Azure DevOps: Convert your classic pipeline in YAML</title><link>https://www.codewrecks.com/post/azdo/pipeline/convert-to-yaml/</link><pubDate>Tue, 22 Dec 2020 18:50:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/convert-to-yaml/</guid><description>&lt;p>When I teach to customer Azure DevOps pipeline, I always suggest them to avoid the classic editor and &lt;strong>direct learn the tool using yaml pipeline&lt;/strong>; while we can agree that classic GUI based editor is simpler, it also miss many of the advantages of YAML and have limited use.&lt;/p>
&lt;p>Yaml based pipeline have a lot of advantages, first of all they are included in the code (I really love have everything in my repository), you can simple copy and paste in new projects, &lt;strong>templates are really powerful&lt;/strong> and also your pipeline definition follow your branches.&lt;/p></description></item><item><title>Azure DevOps Pills: View progress in backlog</title><link>https://www.codewrecks.com/post/azdo/pills/progress-by-item/</link><pubDate>Sun, 29 Nov 2020 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/progress-by-item/</guid><description>&lt;p>If you start managing your backlog with Azure Boards, you probably will end having Epics-&amp;gt;Features-&amp;gt;User stories breakdown and as manager you have a usual question to answer &lt;strong>where are we on this epics or feature and when you expect it to be finished&lt;/strong>.&lt;/p>
&lt;p>While this is not a simple question to answer looking only at the tool, you need to know that Azure Boards can give you a &lt;strong>quick help visualizing completed work in a dedicated column&lt;/strong>.&lt;/p></description></item><item><title>Azure DevOps Pills: PowerShell in pipeline with Linux agents</title><link>https://www.codewrecks.com/post/azdo/pipeline/linux-powershell/</link><pubDate>Sun, 01 Nov 2020 13:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/linux-powershell/</guid><description>&lt;p>This is a really basic fact, but it is often underestimated. PowerShell core is now available on Linux and this means that you can use PowerShell for your Azure DevOps pipeline even if the pipeline &lt;strong>will be executed on Linux machine&lt;/strong>. If I have this task in a pipeline&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">task&lt;/span>: &lt;span style="color:#ae81ff">PowerShell@2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">displayName&lt;/span>: &lt;span style="color:#ae81ff">Simple task&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">targetType&lt;/span>: &lt;span style="color:#ae81ff">inline&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">script&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;Simple task for simple stage pipeline&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;Value for variable Configuration is $(configuration) value for parameterA is ${{ parameters.ParameterA }}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;Change Variable value configuration to &amp;#39;debug&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;##vso[task.setvariable variable=configuration]debug&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>I can schedule the pipeline on a Linux hosted agent, and everything runs smoothly.&lt;/p></description></item><item><title>Azure DevOps pills: Avoid triggering pipelines continuous integration with commit message</title><link>https://www.codewrecks.com/post/azdo/pipeline/no-ci/</link><pubDate>Sat, 24 Oct 2020 10:00:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/no-ci/</guid><description>&lt;p>There are situation when you need to push frequently on a Git repository, a typical example is when you are &lt;strong>authoring a yaml pipeline and you are experimenting stuff&lt;/strong>; in such a situation you modify the pipeline, push, test and go on. It is quite common to push really frequently and this usually saturate standard pipelines.&lt;/p>
&lt;p>It is not uncommon to have a standard pipeline of build and test running for each commit and for each branch. In such a situation &lt;strong>if you push too often you risk to saturate all of your build agents&lt;/strong>.&lt;/p></description></item><item><title>Azure DevOps Pills: Update java in agent machines if you use SonarCloud integration</title><link>https://www.codewrecks.com/post/azdo/pills/update-java-for-sonarcloud-agents/</link><pubDate>Sat, 12 Sep 2020 12:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/update-java-for-sonarcloud-agents/</guid><description>&lt;p>If you have Azure DevOps pipelines that uses SonarCloud analyzer, you should update java version for your agents if you are using version 8 because support is going to drop.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/java-out-to-datepng.png"> &lt;img src="../images/java-out-to-datepng.png" alt="Warning message for old java version installed" />&lt;/a>
&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Warning message for old java version installed&lt;/em>&lt;/p>
&lt;p>You have not many days left to solve this issue before your builds &lt;strong>starts failing because Sonar Cloud analyzer will no longer work&lt;/strong>. The solution is simple, you can simply download an updated version of Open JDK in all agent machines. To check actual java version used you can simply check the JAVA_HOME capability directly in agent administration page.&lt;/p></description></item><item><title>Azure DevOps Pills: Integration with SonarCloud</title><link>https://www.codewrecks.com/post/azdo/pills/sonarcloud-integration/</link><pubDate>Thu, 20 Aug 2020 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/sonarcloud-integration/</guid><description>&lt;p>I&amp;rsquo;ve dealt in the past on &lt;a href="http://www.codewrecks.com/blog/index.php/2018/10/10/azure-devops-pipelines-and-sonar-cloud-gives-free-analysis-to-your-os-project/">how to integrate SonarCloud analysis in a TFS/AzDo pipeline&lt;/a> but today it is time to update that post with some interesting nice capabilities.&lt;/p>
&lt;p>If you look in Figure 1 you can see that &lt;strong>now SonarCloud has a direct integration with Azure DevOps pull requests&lt;/strong>, all you need to do is add a Personal Access Token with code access privilege and you are ready to go.&lt;/p></description></item><item><title>Azure DevOps Pills: Process rules for state transition</title><link>https://www.codewrecks.com/post/azdo/pills/state-rules/</link><pubDate>Wed, 19 Aug 2020 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/state-rules/</guid><description>&lt;p>One of the most requested feature for Azure DevOps is the ability to restrict state transition for custom processes. Whenever a company starts creating its own process, Work Item States is always a big area of discussions. Which state we need? Who can change state from X to Y? &lt;strong>Until few weeks ago, only if you have Azure DevOps server with old process model based on XML you can restrict transition between states. Now this feature is available even for cloud version.&lt;/strong>&lt;/p></description></item><item><title>Release a product composed by multiple projects and builds</title><link>https://www.codewrecks.com/post/azdo/pipeline/release-multiple-build/</link><pubDate>Sat, 30 May 2020 15:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/release-multiple-build/</guid><description>&lt;h2 id="situation">Situation&lt;/h2>
&lt;p>We have a legacy project, born when Asp.Net WebForm was still a thing and Asp.NET MVC was still not released. This project grow during the years, in more that one subversion and git repositories. It was finally time to start setting some best practice in action and, to avoid complexity, we end with a &lt;strong>single Git Repositories with six subfolders and six different solutions, each one that contains a part of the final product&lt;/strong>.&lt;/p></description></item><item><title>Test error but build green when test are re-run</title><link>https://www.codewrecks.com/post/azdo/pipeline/reruntest/</link><pubDate>Thu, 23 Apr 2020 19:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/reruntest/</guid><description>&lt;p>Suppose you have a result of an Azure DevOps Pipeline that contains this strange result: you have a clear indication that test run failed (1), but the overall build is green, both the entire build (2) and the single stage (3).&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/re-run-result.png"> &lt;img src="../images/re-run-result.png" alt="Confusing result of a build" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>Confusing result of a build&lt;/em>&lt;/p>
&lt;p>In such a situation you wonder what happened, the overall build is green, but &lt;strong>the clear indication that test run failed gives you some bad feeling that something was not really ok.&lt;/strong> In this situation the problem is that, if you click on Test Run Failed error message you will be redirected to a clear log that states that test run failed.&lt;/p></description></item></channel></rss>