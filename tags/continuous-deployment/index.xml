<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Deployment on Codewrecks</title><link>https://www.codewrecks.com/tags/continuous-deployment/</link><description>Recent content in Continuous Deployment on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 13 Feb 2014 21:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/continuous-deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Publish NuGet Package to a private NuGet Server with TFS Build and Symbol Server</title><link>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</link><pubDate>Thu, 13 Feb 2014 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</guid><description>&lt;p>Previous post on the series&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2014/01/11/customize-tfs-2013-build-with-powershell-scripts/">Versioning assembly during TFS 2013 build with Powershell Scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2014/02/01/automatically-build-and-publish-nuget-packages-during-tfs-build/">Automatically Build and Publish NuGet Packages during TFS Build&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/04/manage-symbol-server-on-azure-or-on-premise-vm-and-tf-service/">Manage Symbol Server on Azure (or on-premise) VM and TF Service&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>After you set automatic publishing of NuGet packages with automatic assembly and NuGet version numbering in a TFS Build, you surely want to * &lt;strong>enable publishing symbols on a Symbol Server&lt;/strong> *. This will permits you to &lt;strong>put a reference to your NuGet Package and then being able to debug the code thanks to Symbol Server support with TFS&lt;/strong>. Publishing symbols is just a matter of specifying a shared folder to store symbols in build configuration, but if you enable it in previous build where you publish with Powershell, it does not work. The reason is, &lt;strong>you are running PowerShell script that publish NuGet package after build (or after test), but in the build Workflow, source indexing happens after these steps&lt;/strong>.&lt;/p></description></item><item><title>Deploy from a Team Foundation Server build to Web Site without specifying password in the build</title><link>https://www.codewrecks.com/post/old/2013/11/deploy-from-a-team-foundation-server-build-to-web-site-without-specifying-password-in-the-build/</link><pubDate>Fri, 29 Nov 2013 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/11/deploy-from-a-team-foundation-server-build-to-web-site-without-specifying-password-in-the-build/</guid><description>&lt;p>In a previous article I explained how &lt;a href="http://www.codewrecks.com/blog/index.php/2013/08/01/deploy-asp-net-web-site-on-iis-from-tfs-build/">to deploy an ASP.NET Web Site from a TFS Build&lt;/a> thanks to MSDeploy engine. One of the &lt;strong>great complain you can have with this solution is the need to specify UserName and password in build configuration&lt;/strong> and the need to use the AllowUntrustedCertificate=true.&lt;/p>
&lt;p>The problem of the certificate is the simpler of the two to solve, &lt;strong>you just need to use a certificate that is trusted inside your organization or a certificate issued by a trusted certificate authority (es godaddy)&lt;/strong> , instead of the default one that is generated by MsDeploy configuration in IIS. This is most an administrative stuff and I’m not going to cover it in this post.&lt;/p></description></item><item><title>Build Deploy Web Performance test with TFS build</title><link>https://www.codewrecks.com/post/old/2013/08/build-deploy-web-performance-test-with-tfs-build/</link><pubDate>Fri, 16 Aug 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/build-deploy-web-performance-test-with-tfs-build/</guid><description>&lt;p>To fully understand this article you need to read previous articles of the series&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/05/deploying-on-azure-web-sites-from-on-premise-tfs/">Deploy on Azure Web Sites from on-premise TFS&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2013/08/01/deploy-asp-net-web-site-on-iis-from-tfs-build/">Deploy Asp.net web site on IIS from TFS Build&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2013/08/05/manage-test-data-in-visual-studio-database-project/">Manage Test Data in Visual Studio Database Project&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In those articles I’ve explained how you can &lt;strong>automatically publish your web site to a standard IIS hosted web site or to an Azure Web Site&lt;/strong>. The cool part is that you just need to add extra MsBuild arguments to TFS Build process definition and the game is done. For Azure Web Sites you also have a dedicated template for publishing that will also manage an integration with the Azure Web site dashboard (as you can see in the following figure)&lt;/p></description></item><item><title>Deploy AspNET web site on IIS from TFS Build</title><link>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</link><pubDate>Thu, 01 Aug 2013 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</guid><description>&lt;p>In the last article of the series, I dealt with &lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/05/deploying-on-azure-web-sites-from-on-premise-tfs/">Deploying on Azure Web Sites from on-premise TFS&lt;/a>, but the very same technique can be used to &lt;strong>automatically deploy from a standard TFS Build to a standard Web Site hosted in IIS and not in Azure&lt;/strong>. For this demo I’ve prepared a VM on azure, but the configuration is the very same if the VM is on-premise or if you use a physical machine to run IIS. The only difference between deploy on Azure Web Site is that we are deploying on a Web site hosted on IIS.&lt;/p></description></item><item><title>Continuous Deployment on Windows Azure with Database projects</title><link>https://www.codewrecks.com/post/old/2013/05/continuous-deployment-on-windows-azure-with-database-projects/</link><pubDate>Wed, 22 May 2013 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/05/continuous-deployment-on-windows-azure-with-database-projects/</guid><description>&lt;p>I’ve already blogged about &lt;a href="http://www.codewrecks.com/blog/index.php/2013/03/15/tf-service-deploy-on-azure-web-site-with-database-project/">Deploying on Azure Web Site with Database Project&lt;/a> in the past, but in that article I showed how to accomplish it with customization of the Build Template. That technique is useful because quite often you need to &lt;strong>run custom scripts or tools to do additional deploy related procedures to the site&lt;/strong> , but &lt;em>if your need is simply deploying schema change to an Azure Database with a Database Project you can accomplish it even without the need to touch the Build Workflow&lt;/em>.&lt;/p></description></item><item><title>Deploy Click Once application on Azure Blob Container with TFS Build</title><link>https://www.codewrecks.com/post/old/2013/04/deploy-click-once-application-on-azure-blob-container-with-tfs-build/</link><pubDate>Sat, 20 Apr 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/04/deploy-click-once-application-on-azure-blob-container-with-tfs-build/</guid><description>&lt;p>Windows Azure Web sites has a lot of options to automatically deploy web sites, but if you have desktop application deployed with click-once &lt;strong>you have nothing out of the box to do continuous deployment in Windows Azure&lt;/strong>. Lets see how solve this problem.&lt;/p>
&lt;h2 id="deploying-on-windows-azure-blob-storage">Deploying on Windows Azure Blob Storage&lt;/h2>
&lt;p>To deploy Click Once applications on Windows azure, the simplest solution is &lt;strong>using a Blob Container&lt;/strong>. All you need to do is creating new public Blob Container and copy inside the blob the result of a Click Once publication.&lt;/p></description></item></channel></rss>