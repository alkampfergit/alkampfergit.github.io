<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Integration on Codewrecks</title><link>https://www.codewrecks.com/tags/continuous-integration/</link><description>Recent content in Continuous Integration on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 May 2019 05:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/continuous-integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Converting Existing pipeline to YAML how to avoid double builds</title><link>https://www.codewrecks.com/post/old/2019/05/converting-existing-pipeline-to-yaml-how-to-avoid-double-builds/</link><pubDate>Sat, 04 May 2019 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/05/converting-existing-pipeline-to-yaml-how-to-avoid-double-builds/</guid><description>Actually YAML build is the preferred way to create Azure DevOps Build Pipeline and converting existing build is really simple thanks to the “View YAML” button that can simply convert every existing pipeline in a YAML definition.
figure 1: Converting existing Pipeline in YAML is easy with the View YAML button present in editor page.
The usual process is, start a new feature branch to test pipeline conversion to YAML, create the YAML file and a Pipeline based on it, then start testing.</description></item><item><title>How to edit a YAML Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/old/2019/04/how-to-edit-a-yaml-azure-devops-pipeline/</link><pubDate>Sun, 14 Apr 2019 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/04/how-to-edit-a-yaml-azure-devops-pipeline/</guid><description>I cannot stress you enough on how better is the experience of having builds defined in code than having build definition on the server , so I’m here to convince you to move to the new YAML build system in Azure DevOps :).
Having build definition in Code gives you many benefits, the first is that builds evolve with code branches.
If you still think that editing a YAML file is a daunting experience because you have tons of possible tasks and configuration to use, take a peek to the Azure Pipeline extension Visual Studio Code Addin, that brings intellisense for your pipeline editing in Visual Studio Code.</description></item><item><title>Converting PowerShell Task in YAML</title><link>https://www.codewrecks.com/post/old/2018/08/converting-powershell-task-in-yaml/</link><pubDate>Tue, 07 Aug 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/converting-powershell-task-in-yaml/</guid><description>YAML Builds have many advantages over traditional build definitions, especially because YAML build definitions follows branching of code , a killer feature that is fantastic if you use GitFlow.
YAML Build definitions are stored in code, this allows them to follow branches, minimizing the need to maintain builds that should build code in different moment in time.
As an example I have a build where I have tasks to publish some Web Sites, if I had a new Web Site to publish, I can add another task in YAML build, but the build still work for older branches, especially for the master branch that represent my code in production.</description></item><item><title>Manage Artifacts with TFS Build vNext</title><link>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</link><pubDate>Tue, 30 Jun 2015 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</guid><description>Artifacts and Build vNext Another big improvement of Build vNext in TFS and VSO is the ability to **explicitly manage the content of artifactsduring a build **. With the term Artifacts in Continuous Integration we are referring to every result of of the build that is worth publishing together with build result, to be further consumed by consumers of the build. Generally speaking think to artifacts as build binary outputs.</description></item><item><title>Store secure password in TFS Build Definition</title><link>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</link><pubDate>Sat, 12 Jul 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</guid><description>Some days ago I had some tweet exchange with Giulio about a post of Gordon on storing security info in TFS Build Definition. The question is: * how can I store password in build definition without people being able to view them simply editing the build definition itself? *
With TFS 2013 a nice new Build template that allow customization with scripts is included and this is my preferred build customization scenario.</description></item><item><title>Automatically build and publish nuget packages during TFS Build</title><link>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</link><pubDate>Sat, 01 Feb 2014 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</guid><description>Previous post on the series
Versioning assembly during TFS 2013 build with Powershell Scripts Using powershell to cusotmize build is simple and easy, once you have versioning in place (previous article), if you are realizing some form of reusable library it is time to think on how to distribute it to people. One of the obvious choice is using Nuget. Luckily enough, setting up a nuget server in an azure website is just a matter of</description></item><item><title>Versioning assembly during TFS 2013 build with Powershell Scripts</title><link>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</link><pubDate>Sat, 11 Jan 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</guid><description>One of the most important news in TFS Build 2010 is the introduction of Workflow Foundation that replaced standard MSBuild scripts used in TFS 2008. Workflow foundation can be really powerful, but indeed it is somewhat scaring and quite often customizing a build can be complex.
You can find some blog post of mine on the subject:
Writing a Custom Activity for TFS 2010 Builds Run Test With TypeMock isolator in TFS 2010 Build Wrap a MsBuild Custom task inside a custom Action Years are passed, but I still see people scared when it is time to customize the build , especially because the Workflow can be a little bit intimidating.</description></item><item><title>Deploy remotely with TFS build</title><link>https://www.codewrecks.com/post/old/2010/07/deploy-remotely-with-tfs-build/</link><pubDate>Sat, 10 Jul 2010 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/deploy-remotely-with-tfs-build/</guid><description>It is time to connect together a couple of posts of mine, in the first I simply explained how to deploy a web application to a remote machine with the use of Beyondexec2, in another one I explained how to create a simple tfs build, that actually does not build anything, but execute a simple workflow.
In this post I&amp;rsquo;ll cover a primitive build workflow to deploy the result of another build.</description></item><item><title>Wrap a MsBuild Custom task inside a custom action</title><link>https://www.codewrecks.com/post/old/2010/01/wrap-a-msbuild-custom-task-inside-a-custom-action/</link><pubDate>Tue, 19 Jan 2010 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/wrap-a-msbuild-custom-task-inside-a-custom-action/</guid><description>If you have an MSBuild custom task that you want to reuse in a TFS 2010 build workflow, you have two solution. The first is using the MsBuild activity as I described in this post, but this approach has a lot of limitations.
First of all it is clumsy, because you have to pass custom task parameters as arguments to msbuild, but the worst problem is that you lose the ability to use output properties of the custom task.</description></item><item><title>Log warning and errors in a custom action</title><link>https://www.codewrecks.com/post/old/2010/01/log-warning-and-errors-in-a-custom-action/</link><pubDate>Mon, 18 Jan 2010 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/log-warning-and-errors-in-a-custom-action/</guid><description>Some time ago I blogged about logging in custom action for TFS build 2010, I left out some details. Suppose you want to create a warning or an error and not a simple message, you need to create a specialized version of the LogWarning that logs a real warning.
You can do the same with errors.
These two methods permit you to log warnings and errors during a custom build action execution, let&amp;rsquo;s see how they affect the output.</description></item><item><title>Logging in Custom Build action for Tfs Build 2010</title><link>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</link><pubDate>Thu, 14 Jan 2010 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</guid><description>In a previous post I dealt with the creation of a Custom Activity to use in TFS2010 builds, in that example I did not dealt about logging. Logging is a vital task to do in custom action, because it is quite difficult to attach a debugger to the Build Agent, and if a build fails, it is really important to be able to understand what is gone wrong.
If you want to log from a custom action you can use this simple function</description></item><item><title>Branching policies</title><link>https://www.codewrecks.com/post/old/2009/09/branching-policies/</link><pubDate>Tue, 15 Sep 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/09/branching-policies/</guid><description>I just read this post of Martin Fowler, and I found it very interesting. In my opinion, even small projects will greatly benefit from Continuous Integration. Despite of the Branching policies that you choose, having a machine for CI is vital during the lifetime of a project.
Usually I do not like very much CherryPicking even if sometimes it cannot be avoided. In the Promiscuous Integration model, people are doing CherryPicking from other branches and this scares me.</description></item></channel></rss>