<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Integration on Codewrecks</title><link>https://www.codewrecks.com/tags/continuous-integration/</link><description>Recent content in Continuous Integration on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 04 May 2019 05:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/continuous-integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Converting Existing pipeline to YAML how to avoid double builds</title><link>https://www.codewrecks.com/post/old/2019/05/converting-existing-pipeline-to-yaml-how-to-avoid-double-builds/</link><pubDate>Sat, 04 May 2019 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/05/converting-existing-pipeline-to-yaml-how-to-avoid-double-builds/</guid><description>&lt;p>Actually YAML build is the preferred way to create Azure DevOps Build Pipeline and &lt;strong>converting existing build is really simple thanks to the “View YAML” button that can simply convert every existing pipeline in a YAML definition.&lt;/strong> &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/04/image-12.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/04/image_thumb-12.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/04/image_thumb-12.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;strong>figure 1:&lt;/strong> &lt;em>Converting existing Pipeline in YAML is easy with the View YAML button present in editor page.&lt;/em>&lt;/p>
&lt;p>The usual process is, start a new feature branch to test pipeline conversion to YAML, create the YAML file and a Pipeline based on it, then start testing. Now a problem arise: &lt;strong>until the YAML definition is not merged in ANY branch of your Git repository, you should keep the old UI Based Build and the new YAML build togheter.&lt;/strong> What happens if a customer calls you because it has a bug in an old version, you create a support branch and then realize that in that branch the YAML build definition is not present. What if the actual YAML script is not valid for that code? &lt;strong>The obvious solution is to keep the old build around until you are 100% sure that the build is not needed anymore.&lt;/strong> &amp;gt; &lt;strong>During conversion from legacy build to YAML it is wise to keep the old build around for a while.&lt;/strong> This usually means that you start to &lt;strong>gradually remove triggers for branches until you merge all the way to master or the last branch&lt;/strong> , then you leave the definition around without trigger for a little while, finally you delete it.&lt;/p></description></item><item><title>How to edit a YAML Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/old/2019/04/how-to-edit-a-yaml-azure-devops-pipeline/</link><pubDate>Sun, 14 Apr 2019 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/04/how-to-edit-a-yaml-azure-devops-pipeline/</guid><description>&lt;p>I cannot stress you enough on &lt;strong>how better is the experience of having builds defined in code than having build definition on the server&lt;/strong> , so I’m here to convince you to move to the new YAML build system in Azure DevOps :).&lt;/p>
&lt;blockquote>
&lt;p>Having build definition in Code gives you many benefits, the first is that builds evolve with code branches.&lt;/p>&lt;/blockquote>
&lt;p>If you still think that editing a YAML file is a daunting experience because you have tons of possible tasks and configuration to use, &lt;strong>take a peek to the&lt;/strong> &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azure-devops.azure-pipelines">&lt;strong>Azure Pipeline&lt;/strong>&lt;/a> &lt;strong>extension Visual Studio Code Addin, that brings intellisense for your pipeline editing in Visual Studio Code.&lt;/strong> I strongly encourage you to have a look at the &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&amp;amp;amp;tabs=schema">YAML schema reference&lt;/a> to have a complete knowledge of the syntax, but for most people a quick approach to the tool is enough, leaving the deep dive for when they need to do complex stuff.&lt;/p></description></item><item><title>Converting PowerShell Task in YAML</title><link>https://www.codewrecks.com/post/old/2018/08/converting-powershell-task-in-yaml/</link><pubDate>Tue, 07 Aug 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/converting-powershell-task-in-yaml/</guid><description>&lt;p>YAML Builds have many advantages over traditional build definitions, especially because &lt;strong>YAML build definitions follows branching of code&lt;/strong> , a killer feature that is fantastic if you use GitFlow.&lt;/p>
&lt;blockquote>
&lt;p>YAML Build definitions are stored in code, this allows them to follow branches, minimizing the need to maintain builds that should build code in different moment in time.&lt;/p>&lt;/blockquote>
&lt;p>As an example I have a build where I have tasks to publish some Web Sites, if I had a new Web Site to publish, I can add another task in YAML build, but the build still work for older branches, especially for the master branch that represent my code in production.&lt;/p></description></item><item><title>Manage Artifacts with TFS Build vNext</title><link>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</link><pubDate>Tue, 30 Jun 2015 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</guid><description>&lt;h2 id="artifacts-and-build-vnext">Artifacts and Build vNext&lt;/h2>
&lt;p>Another big improvement of Build vNext in TFS and VSO is the ability to **explicitly manage the content of &lt;em>artifacts&lt;/em>during a build **. With the term Artifacts in Continuous Integration we are referring to every result of of the build that is worth publishing together with build result, to be further consumed by consumers of the build. Generally speaking think to artifacts as build binary outputs.&lt;/p></description></item><item><title>Store secure password in TFS Build Definition</title><link>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</link><pubDate>Sat, 12 Jul 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</guid><description>&lt;p>Some days ago I had some tweet exchange with &lt;a href="https://twitter.com/giulio_vian">Giulio&lt;/a> about a post of &lt;a href="https://twitter.com/GordonBeeming">Gordon&lt;/a> on &lt;strong>storing security info in TFS Build Definition&lt;/strong>. The question is: * &lt;strong>how can I store password in build definition without people being able to view them simply editing the build definition itself?&lt;/strong> *&lt;/p>
&lt;p>With TFS 2013 a nice new Build template that allow customization with scripts is included and this is my preferred build customization scenario. Now I question myself on &lt;em>How can I pass a password to a script in build definition in a secure way?&lt;/em> When you are on Active Directory, the best solution is using AD authentication. &lt;strong>My build server runs with credentials of user cyberpunk\TfsBuild where cyberpunk is the name of my domain&lt;/strong> and the build is executed with that credentials. Any software that supports AD authentication can then give rights to TfsBuild users and there is no need to specify password in build definition.&lt;/p></description></item><item><title>Automatically build and publish nuget packages during TFS Build</title><link>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</link><pubDate>Sat, 01 Feb 2014 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</guid><description>&lt;p>Previous post on the series&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2014/01/11/customize-tfs-2013-build-with-powershell-scripts/">Versioning assembly during TFS 2013 build with Powershell Scripts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Using powershell to cusotmize build is simple and easy, once you have versioning in place (previous article), if you are realizing some form of reusable library it is time to &lt;strong>think on how to distribute it to people. One of the obvious choice is using Nuget.&lt;/strong> Luckily enough, setting up a nuget server in an azure website is just a matter of&lt;/p></description></item><item><title>Versioning assembly during TFS 2013 build with Powershell Scripts</title><link>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</link><pubDate>Sat, 11 Jan 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</guid><description>&lt;p>One of the most important &lt;strong>news in TFS Build 2010 is the introduction of Workflow Foundation&lt;/strong> that replaced standard MSBuild scripts used in TFS 2008. Workflow foundation can be really powerful, but indeed it is somewhat scaring and quite often &lt;strong>customizing a build can be complex&lt;/strong>.&lt;/p>
&lt;p>You can find some blog post of mine on the subject:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/02/25/writing-a-custom-activity-for-tfs-2010-build-workflow/">Writing a Custom Activity for TFS 2010 Builds&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/27/run-test-with-typemockisolator-during-a-tfs2010-build/">Run Test With TypeMock isolator in TFS 2010 Build&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/19/wrap-a-msbuild-custom-task-inside-a-custom-action/">Wrap a MsBuild Custom task inside a custom Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Years are passed, but &lt;strong>I still see people scared when it is time to customize the build&lt;/strong> , especially because the Workflow can be a little bit intimidating. In TFS2013 the build is still managed by Workflow Foundation, but the new workflow basic template now supports simply customization with scripts.&lt;/p></description></item><item><title>Deploy remotely with TFS build</title><link>https://www.codewrecks.com/post/old/2010/07/deploy-remotely-with-tfs-build/</link><pubDate>Sat, 10 Jul 2010 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/deploy-remotely-with-tfs-build/</guid><description>&lt;p>It is time to connect together a couple of posts of mine, &lt;a href="http://www.codewrecks.com/blog/index.php/2010/07/06/deploy-on-remote-machine-during-builds/">in the first&lt;/a> I simply explained how to deploy a web application to a remote machine with the use of Beyondexec2, &lt;a href="http://www.codewrecks.com/blog/index.php/2010/07/07/use-tfs-2010-build-to-execute-arbitrary-task/">in another one&lt;/a> I explained how to create a simple tfs build, that actually does not build anything, but execute a simple workflow.&lt;/p>
&lt;p>In this post I&amp;rsquo;ll cover a primitive build workflow to deploy the result of another build. The starting point is having a build called &lt;em>Demo&lt;/em> that builds a web site and create the installer package, plus the script described &lt;a href="http://www.codewrecks.com/blog/index.php/2010/07/06/deploy-on-remote-machine-during-builds/">here&lt;/a>. You need to insert the scripts and the PsExec utility in the source code of your team project, to be available from the build agent during the build, as shown in &lt;strong>Figure 1&lt;/strong>. Note: in this example I&amp;rsquo;ll use the &lt;a href="http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx">PsExec&lt;/a> tools instead of beyondexecv2, but they are exactly equivalent, PsExex is more maintained tool and works better when execute in services.&lt;/p></description></item><item><title>Wrap a MsBuild Custom task inside a custom action</title><link>https://www.codewrecks.com/post/old/2010/01/wrap-a-msbuild-custom-task-inside-a-custom-action/</link><pubDate>Tue, 19 Jan 2010 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/wrap-a-msbuild-custom-task-inside-a-custom-action/</guid><description>&lt;p>If you have an MSBuild custom task that you want to reuse in a TFS 2010 build workflow, you have two solution. The first is using the MsBuild activity as I described in &lt;a href="http://www.codewrecks.com/blog/index.php/2009/11/09/use-msbuild-custom-action-in-tfs2010-build-with-a-custom-project/">this post&lt;/a>, but this approach has a lot of limitations.&lt;/p>
&lt;p>First of all it is clumsy, because you have to pass custom task parameters as arguments to msbuild, but the worst problem is that you lose the ability to use output properties of the custom task. Suppose you have a TinyUrl custom task, that takes an url as input and gives back the tined version, this custom task has this implementation.&lt;/p></description></item><item><title>Log warning and errors in a custom action</title><link>https://www.codewrecks.com/post/old/2010/01/log-warning-and-errors-in-a-custom-action/</link><pubDate>Mon, 18 Jan 2010 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/log-warning-and-errors-in-a-custom-action/</guid><description>&lt;p>Some time ago &lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/14/logging-in-custom-build-action-for-tfs-build-2010/">I blogged about&lt;/a> logging in custom action for TFS build 2010, I left out some details. Suppose you want to create a warning or an error and not a simple message, you need to create a specialized version of the LogWarning that logs a real warning.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image22.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image_thumb22.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image_thumb22.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>You can do the same with errors.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image23.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image_thumb23.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/01/image_thumb23.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>These two methods permit you to log warnings and errors during a custom build action execution, let&amp;rsquo;s see how they affect the output. First of all you can verify that when you log an error the build partially succeeds&lt;/p></description></item><item><title>Logging in Custom Build action for Tfs Build 2010</title><link>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</link><pubDate>Thu, 14 Jan 2010 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</guid><description>&lt;p>In a &lt;a href="http://www.codewrecks.com/blog/index.php/2009/12/07/custom-activities-in-tfs2010/">previous post&lt;/a> I dealt with the creation of a Custom Activity to use in TFS2010 builds, in that example I did not dealt about logging. Logging is a vital task to do in custom action, because it is quite difficult to attach a debugger to the Build Agent, and if a build fails, it is really important to be able to understand what is gone wrong.&lt;/p>
&lt;p>If you want to log from a custom action you can use this simple function&lt;/p></description></item><item><title>Branching policies</title><link>https://www.codewrecks.com/post/old/2009/09/branching-policies/</link><pubDate>Tue, 15 Sep 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/09/branching-policies/</guid><description>&lt;p>I just read &lt;a href="http://martinfowler.com/bliki/FeatureBranch.html">this post&lt;/a> of &lt;a href="http://martinfowler.com">Martin Fowler&lt;/a>, and I found it very interesting. In my opinion, even small projects will greatly benefit from &lt;a href="http://martinfowler.com/articles/continuousIntegration.html">Continuous Integration&lt;/a>. Despite of the Branching policies that you choose, having a machine for CI is vital during the lifetime of a project.&lt;/p>
&lt;p>Usually I do not like very much &lt;a href="http://chestofbooks.com/computers/revision-control/subversion-svn/Cherrypicking-Branchmerge-Cherrypicking.html">CherryPicking&lt;/a> even if sometimes it cannot be avoided. In the Promiscuous Integration model, people are doing CherryPicking from other branches and this scares me. The purpose of a branch is to keep changes isolated until they are ready to be moved in the trunk, or to keep copies of specific version of the software, and usually merging between branches can be problematic. Some Source control system do not permit to merge changes between branches that are not contiguous.&lt;/p></description></item></channel></rss>