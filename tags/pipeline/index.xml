<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipeline on Codewrecks</title><link>https://www.codewrecks.com/tags/pipeline/</link><description>Recent content in Pipeline on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 16 Jan 2024 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/pipeline/index.xml" rel="self" type="application/rss+xml"/><item><title>Pill: Include files in your publish profile for C# projects</title><link>https://www.codewrecks.com/post/azdo/pills/msbuild-copy-file/</link><pubDate>Tue, 16 Jan 2024 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/msbuild-copy-file/</guid><description>&lt;p>When publishing an ASP.NET core web project, it&amp;rsquo;s often necessary to include certain files &lt;strong>external to the Visual Studio solution but that are logical part of the project&lt;/strong>. A typical example is frontend build from angular projects. For web projects, it&amp;rsquo;s also common to include some static resources that might be outside of the web project, like images or files.&lt;/p>
&lt;p>At this point, we want the Azure DevOps pipeline to &lt;strong>correctly include all these external files in the final artifacts.&lt;/strong>&lt;/p></description></item><item><title>Running GitVersion in Azure DevOps pipeline with dontet tool</title><link>https://www.codewrecks.com/post/azdo/pipeline/gitversion-powershell/</link><pubDate>Mon, 11 Dec 2023 10:00:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/gitversion-powershell/</guid><description>&lt;p>For me, running GitVersion as part of a Pipeline is a golden standard. I barely &lt;strong>remember a pipeline that does not use GitVersion&lt;/strong> as first task. The reason is simple, it allows me, at least, to give a better naming to build names. Instead of having meaningless date base number I have a semantic build &lt;strong>that immediately gives me the idea of what was built&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>At least GitVersion can give a better name to a build, so why not using it?&lt;/p></description></item><item><title>Azure DevOps: Script Caching in Azure DevOps</title><link>https://www.codewrecks.com/post/azdo/pipeline/release-on-linux-cached-script/</link><pubDate>Mon, 30 Oct 2023 08:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/release-on-linux-cached-script/</guid><description>&lt;p>I&amp;rsquo;m authoring a release pipeline in Azure DevOps on an AWS ARM linux machine, I&amp;rsquo;ve installed the agent and created the script. The pipeline uses artifacts produced by &lt;strong>another build pipeline and depends on a git repository that contains script&lt;/strong>. Here is how resources are declared in the pipeline.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">resources&lt;/span>: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pipelines&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">pipeline&lt;/span>: &lt;span style="color:#ae81ff">UniqueHost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">Publish-UniqueHost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">repositories&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">repository&lt;/span>: &lt;span style="color:#ae81ff">JarvisSetupScripts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">git&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ref&lt;/span>: &lt;span style="color:#ae81ff">feature/AWS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">JarvisSetupScripts&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Usually the question is: &lt;strong>why you store scripts in another repository?&lt;/strong>. The classic approach is writing release scripts inside the very same repository as source files, then include release script inside the build so &lt;strong>release pipeline depends only on one or more pipeline&lt;/strong>. Personally having the script in a different repositories easy script authoring, because you can simply modify the script, push, and then immediately re-trigger the pipeline to verify that everything is working as expected.&lt;/p></description></item><item><title>Azure Pipelines starts failing indexing symbols</title><link>https://www.codewrecks.com/post/azdo/pipeline/index-symbols-suddently-failing/</link><pubDate>Mon, 31 Jul 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/index-symbols-suddently-failing/</guid><description>&lt;p>A build in Azure Devops recently started to fail during the index symbol task. The error wasn&amp;rsquo;t immediately clear. The error messages are really not informative, One such message was, &amp;ldquo;Request ed7b95f6b6f439e769a3e85422b7172be872403388fae1974fb4233dfd13da66 is sealed. Only expirationDate may be modified.&amp;rdquo;&lt;/p>
&lt;p>Honestly, this error didn&amp;rsquo;t tell me much. &lt;strong>My general advice when facing such perplexing errors is to examine the entire log. Given the vast size of the log&lt;/strong>, it&amp;rsquo;s wise to start with the most common areas where useful information can be found. In the case of most .NET-related tools, I began by inspecting what appeared to be a stack trace. A stack trace in the log often indicates something has gone wrong.&lt;/p></description></item><item><title>Azure DevOps: pipeline permission to use an agent pool</title><link>https://www.codewrecks.com/post/azdo/pipeline/pipeline-permissions-agent-pool/</link><pubDate>Wed, 25 Jan 2023 07:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/pipeline-permissions-agent-pool/</guid><description>&lt;p>Scenario: We created a &lt;strong>new Agent Pool&lt;/strong> in Azure DevOps called &amp;ldquo;linux&amp;rdquo; and we added some &lt;strong>docker based agents&lt;/strong>, and finally we add this new pool into the available pool for a couple of builds. To verify that agents can indeed run the builds we scheduled run onto this new pool &lt;strong>but pipeline execution failed&lt;/strong>. The error is depicted in &lt;strong>Figure 1&lt;/strong>&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/build-failed-not-allowed-to-run-on-agent.png"> &lt;img src="../images/build-failed-not-allowed-to-run-on-agent.png" alt="Failed build details after changing pool to linux" />&lt;/a>&lt;/p></description></item><item><title>Azure DevOps: Conditional variable value in pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/conditional-variable-in-pipeline/</link><pubDate>Tue, 21 Jun 2022 08:00:42 +0000</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/conditional-variable-in-pipeline/</guid><description>&lt;p>Let&amp;rsquo;s examine a simple situation, in Azure DevOps you do not have a way to change pipeline priority, thus, if &lt;strong>you need to have an agent always ready for high-priority builds, you can resort using more agent Pools&lt;/strong>. Basically you have N license for pipeline, so you can create N-1 agents in the default Pool and &lt;strong>create another pool, lets call it Fast, where you have an agent installed in a High Performance machine&lt;/strong>. When you need to have a pipeline run that has high priority you can schedule to run in Fast Pool and the game is done.&lt;/p></description></item><item><title>Passing boolean parameters to PowerShell scripts in Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/azdo/pipeline/powershell-boolean/</link><pubDate>Sun, 08 Aug 2021 20:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/powershell-boolean/</guid><description>&lt;p>Let&amp;rsquo;s start from the problem, I have an Azure DevOps pipeline that calls a PowerShell script and the team needs to change the pipeline allowing &lt;strong>a boolean parameter to be passed to the PowerShell script when you queue the pipeline&lt;/strong>. The first tentative produces this error:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>C:\a\_work\&lt;span style="color:#ae81ff">56&lt;/span>\s\build.dotnet.ps1 &lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cannot &lt;span style="color:#66d9ef">process&lt;/span> argument transformation on parameter &lt;span style="color:#e6db74">&amp;#39;forceInstallPackage&amp;#39;&lt;/span>. Cannot 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>convert value &lt;span style="color:#e6db74">&amp;#34;System.String&amp;#34;&lt;/span> to type &lt;span style="color:#e6db74">&amp;#34;System.Boolean&amp;#34;&lt;/span>. 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Boolean parameters accept only Boolean values and numbers, &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>The original code of the pipeline is the following one.&lt;/p></description></item><item><title>Continuous integration: PowerShell way</title><link>https://www.codewrecks.com/post/azdo/pipeline/powershell-build/</link><pubDate>Sat, 17 Apr 2021 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/powershell-build/</guid><description>&lt;p>I&amp;rsquo;m a great fan of Azure DevOps pipelines, I use them extensively, but I also a fan of simple building strategies, not relying on some specific build engine.&lt;/p>
&lt;blockquote>
&lt;p>For Continuous Integration, being too much dependent on a specific technology could be limiting.&lt;/p>&lt;/blockquote>
&lt;p>I&amp;rsquo;ve started CI with &lt;strong>many years ago with CC.NET&lt;/strong> and explored various engines, from MsBuild to Nant then Psake, cake etc. I&amp;rsquo;ve also used various CI tools, from TFS to AzureDevOps to TeamCity and others. My overall reaction to those tools was usually good, but &lt;strong>I always feel wrong to be bound to some specific technology&lt;/strong>. What about a customer using something I do not know like Travis CI? Also, when you need to do CI at customer sites, it is hard to force a particular technology. It is too easy to tell to a customer: just use X because it is the best, when the reality is that your knowledge of X is really good so it is your first choice.&lt;/p></description></item><item><title>Authenticate to Azure DevOps private Nuget Feed</title><link>https://www.codewrecks.com/post/azdo/pipeline/nuget-feed-authenticate/</link><pubDate>Tue, 29 Dec 2020 10:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/nuget-feed-authenticate/</guid><description>&lt;p>When you build a project that depends on Azure DevOps hosted nuget feed, usually if the feed &lt;strong>is on the same organization of the pipeline and you are using Nuget task, everything regarding authentication happens automatically&lt;/strong>. A really different situation arise if you are using Nuget directly from Command Line or PowerShell script. A typical situation is: everything seems to work perfectly in your machine but during pipeline run you receive 401 (unauthenticated) error or the build hangs with a message like this:&lt;/p></description></item><item><title>Azure DevOps pills: Avoid triggering pipelines continuous integration with commit message</title><link>https://www.codewrecks.com/post/azdo/pipeline/no-ci/</link><pubDate>Sat, 24 Oct 2020 10:00:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/no-ci/</guid><description>&lt;p>There are situation when you need to push frequently on a Git repository, a typical example is when you are &lt;strong>authoring a yaml pipeline and you are experimenting stuff&lt;/strong>; in such a situation you modify the pipeline, push, test and go on. It is quite common to push really frequently and this usually saturate standard pipelines.&lt;/p>
&lt;p>It is not uncommon to have a standard pipeline of build and test running for each commit and for each branch. In such a situation &lt;strong>if you push too often you risk to saturate all of your build agents&lt;/strong>.&lt;/p></description></item><item><title>Release a product composed by multiple projects and builds</title><link>https://www.codewrecks.com/post/azdo/pipeline/release-multiple-build/</link><pubDate>Sat, 30 May 2020 15:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/release-multiple-build/</guid><description>&lt;h2 id="situation">Situation&lt;/h2>
&lt;p>We have a legacy project, born when Asp.Net WebForm was still a thing and Asp.NET MVC was still not released. This project grow during the years, in more that one subversion and git repositories. It was finally time to start setting some best practice in action and, to avoid complexity, we end with a &lt;strong>single Git Repositories with six subfolders and six different solutions, each one that contains a part of the final product&lt;/strong>.&lt;/p></description></item><item><title>Test error but build green when test are re-run</title><link>https://www.codewrecks.com/post/azdo/pipeline/reruntest/</link><pubDate>Thu, 23 Apr 2020 19:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/reruntest/</guid><description>&lt;p>Suppose you have a result of an Azure DevOps Pipeline that contains this strange result: you have a clear indication that test run failed (1), but the overall build is green, both the entire build (2) and the single stage (3).&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/re-run-result.png"> &lt;img src="../images/re-run-result.png" alt="Confusing result of a build" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>Confusing result of a build&lt;/em>&lt;/p>
&lt;p>In such a situation you wonder what happened, the overall build is green, but &lt;strong>the clear indication that test run failed gives you some bad feeling that something was not really ok.&lt;/strong> In this situation the problem is that, if you click on Test Run Failed error message you will be redirected to a clear log that states that test run failed.&lt;/p></description></item></channel></rss>