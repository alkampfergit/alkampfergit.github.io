<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Process Template on Codewrecks</title><link>https://www.codewrecks.com/tags/process-template/</link><description>Recent content in Process Template on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 01 Apr 2017 06:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/process-template/index.xml" rel="self" type="application/rss+xml"/><item><title>Development and Related Work missing on new UI form after upgrade to TFS 2017</title><link>https://www.codewrecks.com/post/old/2017/04/development-and-related-work-missing-on-new-ui-form-after-upgrade-to-tfs-2017/</link><pubDate>Sat, 01 Apr 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/04/development-and-related-work-missing-on-new-ui-form-after-upgrade-to-tfs-2017/</guid><description>I’ve dealt on How to enable the new work Item in TFS 2017, and you could have noticed some differences from Visual Studio Team Service Work Item layout, or even with new Team Projects created after the upgrade. In Figure 1 you can see in the left the detail of a PBI on a Team Project that exists before the upgrade to TFS 2017, in the right the PBI on a Team Project created after the upgrade.</description></item><item><title>Customize process template experience in TFS 2013</title><link>https://www.codewrecks.com/post/old/2013/07/customize-process-template-experience-in-tfs-2013/</link><pubDate>Wed, 10 Jul 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/07/customize-process-template-experience-in-tfs-2013/</guid><description>Customizing process template is a real cool part of Team Foundation Server, because it permits you to follow the “ do not adapt your process to the tool but adapt the tool to your process ” scenario. There are a lot of best practices and a really good guide published by TFS Rangers, in this post I want to show how you can use a PowerShell script in a Tfs2013 Build to automatically update your Template at each push of a new definition.</description></item><item><title>Deep dive in Process templatersquos states and transitions</title><link>https://www.codewrecks.com/post/old/2011/09/deep-dive-in-process-templates-states-and-transitions/</link><pubDate>Mon, 19 Sep 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/09/deep-dive-in-process-templates-states-and-transitions/</guid><description>1 – Customize Tfs Process Template
2 – Basic of TFS Process Template Customization
3 – Adding Field to a Work Item Definition
4 – Customize Work Item Fields with Rules
5 – Interesting rules to customize work items.
6 – Customize States and Transitions of a Work Item
In previous post I did a brief introduction to the concept of States and Transitions of Work Items and it is time to do a little deep dive to understand how you can configure complex rules on transition between states.</description></item><item><title>Customize State and Transitions of a Work Item</title><link>https://www.codewrecks.com/post/old/2011/06/customize-state-and-transitions-of-a-work-item/</link><pubDate>Thu, 30 Jun 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/customize-state-and-transitions-of-a-work-item/</guid><description>1 – Customize Tfs Process Template
2 – Basic of TFS Process Template Customization
3 – Adding Field to a Work Item Definition
4 – Customize Work Item Fields with Rules
5 – Interesting rules to customize work items.
Now that we know how to add information to a Work Item definition, it is time to deal with “state” management. Each Work Item has a field called * Status *that is completely different from any other field, because has an associated workflow that manages transactions from various allowed status values.</description></item><item><title>Interesting rules to customize Work Items</title><link>https://www.codewrecks.com/post/old/2011/06/interesting-rules-to-customize-work-items/</link><pubDate>Mon, 27 Jun 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/interesting-rules-to-customize-work-items/</guid><description>1 – Customize Tfs Process Template
2 – Basic of TFS Process Template Customization
3 – Adding Field to a Work Item Definition
4 – Customize Work Item Fields with Rules
In fourth chapter we familiarized with Rules and how you can customize a Work Items adding rules to it. You can find a complete list of Rules at this link, but I want to show you the most useful ones (at least in my opinion).</description></item><item><title>Basic of TFS Process Template customization</title><link>https://www.codewrecks.com/post/old/2011/06/basic-of-tfs-process-template-customization/</link><pubDate>Thu, 23 Jun 2011 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/basic-of-tfs-process-template-customization/</guid><description>1 – Customize Tfs Process Template
In the first post I showed how to download the definition of a process template into a local folder and how to open it with the Process Template Editor; in this post I&amp;rsquo;ll show you some of the very basic customizations that you can do with the PTE.
In the Methodology section you can simply change the name of the Process Template as well as including a textual description.</description></item><item><title>Customize TFS Process Template</title><link>https://www.codewrecks.com/post/old/2011/06/customize-tfs-process-template/</link><pubDate>Wed, 22 Jun 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/customize-tfs-process-template/</guid><description>One of the best aspect of TFS is that it is customizable: we can interact with API, customize builds, handle events and many other interaction, but one of the most important is the ability to customize the process template.
This capability is fundamental, because permit to adapt TFS to own process, the mantra is ** do not adapt your process to the tool, but adapt the tool to your process **.</description></item></channel></rss>