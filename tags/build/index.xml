<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Build on Codewrecks</title><link>https://www.codewrecks.com/tags/build/</link><description>Recent content in Build on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 25 Feb 2020 17:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/build/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Actions plus Azure Docker Registry</title><link>https://www.codewrecks.com/post/old/2020/02/github-actions-plus-azure-docker-registry/</link><pubDate>Tue, 25 Feb 2020 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/02/github-actions-plus-azure-docker-registry/</guid><description>I have some projects that needs SqlServer and MongoDb or ElasticSearch to run some integration tests, these kind of requirements made difficult to use hosted agent for build (in Azure DevOps) or whatever build system you are using where a provider gives you pre-configured machine to run your workflow. Usually each build engine made possible for you to run your own agent and GitHub actions makes no difference ( you can read here about self installed action runners https://help.</description></item><item><title>Consume Azure DevOps feed in TeamCity</title><link>https://www.codewrecks.com/post/old/2019/12/consume-azure-devops-feed-in-teamcity/</link><pubDate>Wed, 04 Dec 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/12/consume-azure-devops-feed-in-teamcity/</guid><description>Azure DevOps has an integrated feed management you can use for nuget, npm, etc; the feed is private and only authorized users can download / upload packages. Today I had a little problem setting up a build in Team City that uses a feed in Azure Devops, because it failed with 201 (unauthorized)
The problem with Azure DevOps NuGet feeds, is how to authenticate other toolchain or build server.
This project still have some old build in TeamCity, but when it starts consuming packages published in Azure Devops, TeamCity builds start failing due 401 (unauthorized) error.</description></item><item><title>Quick Peek at Microsoft Security Code Analysis Credential Scanner</title><link>https://www.codewrecks.com/post/old/2019/11/quick-peek-at-microsoft-security-code-analysis-credential-scanner/</link><pubDate>Sat, 23 Nov 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/quick-peek-at-microsoft-security-code-analysis-credential-scanner/</guid><description>Microsoft Security Code Analysis contains a set of Tasks for Azure DevOps pipeline to automate some security checks during building of your software. Automatic security scanning tools are not a substitute in any way for human security analysis, remember: if you develop code ignoring security, no tool can save you.
Despite this fact, there are situation where static analysis can really give you benefit, because it can avoid you some simple and silly errors, that can lead to troubles.</description></item><item><title>Multiline PowerShell on YAML pipeline</title><link>https://www.codewrecks.com/post/old/2019/11/multiline-powershell-on-yaml-pipeline/</link><pubDate>Tue, 19 Nov 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/multiline-powershell-on-yaml-pipeline/</guid><description>Sometimes having a few lines of PowerShell in your pipeline is the only thing you need to quickly customize a build without using a custom task or having a PowerShell file in source code. One of the typical situation is: write a file with some content that needs to be determined by a PowerShell script, in my situation I need to create a configuration file based on some build variable.</description></item><item><title>Release app with Azure DevOps Multi Stage Pipeline</title><link>https://www.codewrecks.com/post/old/2019/10/release-app-with-azure-devops-multi-stage-pipeline/</link><pubDate>Mon, 21 Oct 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/release-app-with-azure-devops-multi-stage-pipeline/</guid><description>MultiStage pipelines are still in preview on Azure DevOps, but it is time to experiment with real build-release pipeline, to taste the news. The Biggest limit at this moment is that you can use Multi Stage to deploy in Kubernetes or in the cloud, but there is not support for agent in VM (like standard release engine). This support will be added in the upcoming months but if you use azure or kubernetes as a target you can already use it.</description></item><item><title>Azure DevOps gems YAML Pipeline and Templates</title><link>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</link><pubDate>Sun, 18 Aug 2019 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</guid><description>If you read my blog you already know that I’m a great fan of YAML Pipeline instead of using Graphic editor in the Web UI, there are lots of reasons why you should use YAML; one for all the ability to branch Pipeline definition with code, but there is another really important feature: templates.
There is a really detailed documentation on MSDN on how to use this feature, but I want to give you a complete walkthrough on how to start to effectively use templates.</description></item><item><title>Install latest node version in Azure Pipelines</title><link>https://www.codewrecks.com/post/old/2019/06/install-latest-node-version-in-azure-pipelines/</link><pubDate>Wed, 12 Jun 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/06/install-latest-node-version-in-azure-pipelines/</guid><description>I have a build in Azure DevOps that suddenly starts failing on some agents during the build of an angular application. Looking at the log I found that error
You are running version v8.9.4 of Node.js, which is not supported by Angular CLI 8.0+.
Ok, the error is really clear, some developer upgraded Angular version on the project and node version installed in some of the build servers is old. Now the obvious situation is logging in ALL build servers, upgrade node js installation and the build should run on every agent.</description></item><item><title>Another gem of Azure Devops multistage pipelines</title><link>https://www.codewrecks.com/post/old/2019/05/another-gem-of-azure-devops-multistage-pipelines/</link><pubDate>Sat, 18 May 2019 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/05/another-gem-of-azure-devops-multistage-pipelines/</guid><description>With deployment of Sprint 151 we have an exciting news for Azure DevOps called multi stage pipelines. If you read my blog you should already know that I’m a huge fan of having YAML build definition, but until now, for the release part, you still had to have the standard graphical editor. Thanks to Multi Stage Pipelines now you can have both build and release definition directly in a single YAML file.</description></item><item><title>Error publishing NET core app in Azure Devops YAML Build</title><link>https://www.codewrecks.com/post/old/2019/04/error-publishing-net-core-app-in-azure-devops-yaml-build/</link><pubDate>Tue, 30 Apr 2019 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/04/error-publishing-net-core-app-in-azure-devops-yaml-build/</guid><description>Short story, I’ve created a simple YAML build for a.NET core project where one of the task will publish a simple.NET core console application. After running the build I’ve a strange error in the output
No web project was found in the repository. Web projects are identified by presence of either a web.config file or wwwroot folder in the directory.
This is extremely strange, because the project is not a web project, it is a standard console application written for.</description></item><item><title>Troubleshoot YAML Build first run</title><link>https://www.codewrecks.com/post/old/2019/04/troubleshoot-yaml-build-first-run/</link><pubDate>Sat, 13 Apr 2019 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/04/troubleshoot-yaml-build-first-run/</guid><description>Scenario : You create a branch in your git repository to start with a new shiny YAML Build definition for Azure Devops, you create a yaml file, push the branch in Azure Devops and Create a new Build based on that YAML definition. Everything seems ok, but when you press the run button you got and error
Could not find a pool with name Default. The pool does not exist or has not been authorized for use.</description></item><item><title>Build and Deploy AspNet App with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2019/03/build-and-deploy-asp-net-app-with-azure-devops/</link><pubDate>Thu, 28 Mar 2019 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/03/build-and-deploy-asp-net-app-with-azure-devops/</guid><description>I’ve blogged in the past about deploying ASP.NET application, but lots of new feature changed in Azure DevOps and it is time to do some refresh of basic concepts. Especially in the field of web.config transform there is always lots of confusion and even if I’m an advocate of removing every configuration from files and source, it is indeed something that worth to be examined. &amp;gt; The best approach for configuration is removing then from source control, use configuration services, etc and move away from web.</description></item><item><title>YAML Build in Azure DevOps</title><link>https://www.codewrecks.com/post/old/2019/03/yaml-build-in-azure-devops/</link><pubDate>Sat, 16 Mar 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/03/yaml-build-in-azure-devops/</guid><description>I’ve blogged in the past about YAML build in azure DevOps, but in that early days, that kind of build was a little bit rough and many people still preferred the old build based on visual editing in a browser. One of the main complaint was that the build was not easy to edit and there were some glitch, especially when it is time to access external services.
After months from the first version, the experience is really improved and I strongly suggest you to start trying to migrate existing build to this new system, to take advantage of having definition of build directly in the code, a practice that is more DevOps oriented and that allows you to have different build tasks for different branches.</description></item><item><title>Sonar Analysis of Python with Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/old/2019/01/sonar-analysis-of-python-with-azure-devops-pipeline/</link><pubDate>Sat, 05 Jan 2019 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/01/sonar-analysis-of-python-with-azure-devops-pipeline/</guid><description>Once you have test and Code Coverage for your build of Python code, last step for a good build is adding support for Code Analysis with Sonar/SonarCloud. SonarCloud is the best option if your code is open source, because it is free and you should not install anything except the free addin in Azure Devops Marketplace.
From original build you need only to add two steps: PrepareAnalysis onSonarCloud and Run SonarCloud analysis, in the same way you do analysis for a.</description></item><item><title>Deploy click-once application on Azure Blob with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</link><pubDate>Fri, 07 Dec 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</guid><description>It was a long time ago I blogged on how to publish a click-once application from a VSTS Build to Azure Blob, long time was passed, and lots of stuff changed. The whole process is now simpler, thanks to many dedicated tasks that avoid doing any manual work.
My new build always start with a GitVersion custom tasks, that populates some environment variables with version numbers generated by GitVersion, this will allow me to simply add an MsBuild task in the build to publish click-once using automatic GitVersion versioning.</description></item><item><title>Run code coverage for Python project with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2018/11/run-code-coverage-for-python-project-with-azure-devops/</link><pubDate>Tue, 20 Nov 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/11/run-code-coverage-for-python-project-with-azure-devops/</guid><description>Creating a simple build that runs Python tests written with PyTest framework is really simple, but now the next step is trying to have code coverage. Even if I’m pretty new to Python, having code coverage in a build is really simple, thanks to a specific task that comes out-of-the-box with Azure DevOps: Publish Code Coverage.
In Azure DevOps you can create build with Web Editor or with simple YAML file, I prefer YAML but since I’ve demonstrated in the old post YAML build for Python, now I’m creating a simple build with standard Web Editor</description></item><item><title>Run Python test with Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/old/2018/11/run-python-test-with-azure-devops-pipeline/</link><pubDate>Mon, 12 Nov 2018 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/11/run-python-test-with-azure-devops-pipeline/</guid><description>The beauty of Azure DevOps is it support to many technologies and all of major language.s I have a simple git repository where I’m experimenting Python code, in that repository I have several directories like 020_xxxx 010_yyy where I’m playing with Python code.
Each folder contains some code and some unit tests written in Pytest, my goal is creating an Azure Pipeline that can automatically run all pytest for me automatically each time I push some code to the repository.</description></item><item><title>Analyze your GitHub project for free with Azure DevOps and SonarCloud</title><link>https://www.codewrecks.com/post/old/2018/11/analyze-your-github-project-for-free-with-azure-devops-and-sonarcloud/</link><pubDate>Sun, 04 Nov 2018 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/11/analyze-your-github-project-for-free-with-azure-devops-and-sonarcloud/</guid><description>I’ve blogged some weeks ago on how to analyze OS code with SonarCloud, but it is time to update the post, because if you want to use SonarCloud you have a dedicated extension in the marketplace.
Figure 1: Official SonarCloud extension in the marketplace.
One of the great feature of Azure DevOps is its extendibility, that allows people external to Microsoft to create extensions to expand the possibility of the tool.</description></item><item><title>Azure DevOps pipelines and Sonar Cloud gives free analysis to your OS project</title><link>https://www.codewrecks.com/post/old/2018/10/azure-devops-pipelines-and-sonar-cloud-gives-free-analysis-to-your-os-project/</link><pubDate>Wed, 10 Oct 2018 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/10/azure-devops-pipelines-and-sonar-cloud-gives-free-analysis-to-your-os-project/</guid><description>In previous post I’ve shown how easy is to create a YAML definition to create a build definition to build your GitHub Open Source project in Azure DevOps, without the need to spend any money nor installing anything on you server.
Once you create a default build that compile and run tests, it would be super nice to create a free account in SonarCloud to have your project code to be analyzed automatically from the Azure Pipeline you’ve just created.</description></item><item><title>Code in GitHub Build in Azure DevOps and for FREE</title><link>https://www.codewrecks.com/post/old/2018/10/code-in-github-build-in-azure-devops-and-for-free/</link><pubDate>Tue, 09 Oct 2018 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/10/code-in-github-build-in-azure-devops-and-for-free/</guid><description>When you create a new open source project in GitHub, one of the first step is to setup continuous integration; the usual question is: What CI engine should I use? Thanks to Azure Dev Ops, you can use free build pipelines to build projects even if they are in GitHub (not hosted in Azure Dev Ops)
Azure Dev Ops, formerly known as VSTS, allows to define free build pipelines to build projects in GitHub</description></item><item><title>VSTS Name change in Azure DevOps effects on Git repositories</title><link>https://www.codewrecks.com/post/old/2018/09/vsts-name-change-in-azure-devops-effects-on-git-repositories/</link><pubDate>Thu, 27 Sep 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/09/vsts-name-change-in-azure-devops-effects-on-git-repositories/</guid><description>As I blogged in the past, it is super easy to build a VSTS Build (Now Azure DevOps Pipeline) to keep two repositories in sync. In that article one of the step is pushing the new code to the destination repositories with an url like: https://$(token)@myaddress.visualstudio.com/DefaultCollection, to automatically include a token to authenticate in the destination repository.
Now some of my build started to fail due to timeout and I immediately suspected the reason: the name change from VSTS to Azure DevOps changed the base url from accountname.</description></item><item><title>Be sure to use latest version of Nuget Restore Task in VSTS Build</title><link>https://www.codewrecks.com/post/old/2018/08/be-sure-to-use-latest-version-of-nuget-restore-task-in-vsts-build/</link><pubDate>Mon, 27 Aug 2018 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/be-sure-to-use-latest-version-of-nuget-restore-task-in-vsts-build/</guid><description>If you have in VSTS some old build that uses Nuget restore task, it is time to check if you are using the new version, because if you still use the 0.x version you are missing some interesting features.
With VSTS build it is always a good habit to periodically check if some of the tasks have new version.
Here is as an example, how the version 0 is configured</description></item><item><title>Run SonarCloud analysis in VSTS TFS Build</title><link>https://www.codewrecks.com/post/old/2018/03/run-sonarcloud-analysis-in-vsts-tfs-build/</link><pubDate>Sun, 25 Mar 2018 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/03/run-sonarcloud-analysis-in-vsts-tfs-build/</guid><description>Running a SonarQube analysis for TFS or VSTS is really easy because we can use a pre-made build tasks that requires few parameters and the game is done. If you have open source project it made lot of sense to use a public account in SonarCloud , so you do not need to maintain a sonar server on-premise and you can also share your public account with the community.
For open source projects, SonarCloud is available for you with zero effort and thanks to VSTS and TFS you can automate the analysis with few steps.</description></item><item><title>VSTS TFS use Wildcards for continuous integration in Git</title><link>https://www.codewrecks.com/post/old/2018/02/vsts-tfs-use-wildcards-for-continuous-integration-in-git/</link><pubDate>Tue, 20 Feb 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/02/vsts-tfs-use-wildcards-for-continuous-integration-in-git/</guid><description>If you setup a build in VSTS / TFS against a git repository, you can choose to trigger the build when some specific branch changed. You can press plus button and a nice combobox appears to select the branch you want to monitor.
Figure 1: Adding a branch as trigger in VSTS / TFS Build
This means that if you add feature/1312_languageSelector, each time a new commit will be pushed on that branch, a new build will trigger.</description></item><item><title>New cool feature of VSTS to limit impact of erratic tests</title><link>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</link><pubDate>Tue, 13 Feb 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</guid><description>I’ve blogged some time ago about running UAT testing with a mix of Build + Release in VSTS. Actually, UAT testing are often hard to write, because they can be erratic. As an example, we have a software composed by 5 services that collaborates together, CQRS and Event Sourcing, so most of the tests are based on a typical pattern: Do something then wait for something to happen.
Writing tests that interact with the UI or are based on several services interacting togheter can be difficult.</description></item><item><title>Converting regular build in YAML build</title><link>https://www.codewrecks.com/post/old/2017/12/converting-regular-build-in-yaml-build/</link><pubDate>Thu, 14 Dec 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/12/converting-regular-build-in-yaml-build/</guid><description>YAML build in VSTS / TFS is one of the most welcomed feature in the Continuous Integration engine , because it really opens many new possibilities. Two of the most important advantages you have with this approach are: build definitions will follow branches, so each branch can have a different definition, then, since the build is in the code, everything is audited, you can pull request build modification and you can test different build in branches as you do with code.</description></item><item><title>YAML build in VSTS</title><link>https://www.codewrecks.com/post/old/2017/11/yaml-build-in-vsts/</link><pubDate>Sun, 26 Nov 2017 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/11/yaml-build-in-vsts/</guid><description>One of the most exciting feature that was recently introduced in VSTS is the ability to create YAML Build. You need to enable this feature because it is still in preview and as usual you can enable for your account from the preview feature management
Figure 1: Enable YAML feature for the entire account
After you enable this feature, when you create a new build you can create a build based on YAML.</description></item><item><title>VSTS build failed test phase but 0 tests failed</title><link>https://www.codewrecks.com/post/old/2017/11/vsts-build-failed-test-but-0-test-failed/</link><pubDate>Sat, 18 Nov 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/11/vsts-build-failed-test-but-0-test-failed/</guid><description>I had a strange situation where I have a build that suddenly starts signal failing tests, but actually zero test failed.
Figure 1: No test failed, but the test phase was marked as failed
As you can see in Figure 1, the Test step is marked failed, but actually I have not a single test failed, indeed a strange situation. To troubleshoot this problem, you need to select the failing step to verify the exact output of the task.</description></item><item><title>Multitarget NetStandard for Windows and Linux</title><link>https://www.codewrecks.com/post/old/2017/10/multitarget-netstandard-for-windows-and-linux/</link><pubDate>Sat, 28 Oct 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/10/multitarget-netstandard-for-windows-and-linux/</guid><description>One of the most important features of DotNetStandard is the ability to run on Linux and Mac, but if you need to use a DotNetStandard compiled library in a project that uses full.NET framework, sometimes you can have little problems. Actually you can reference a dll compiled for DotNetCore from a project that uses full Framework, but in a couple of project we experienced some trouble with some assemblies.
Thanks to multitargeting you can simply instruct DotNet compiler to produce libraries compiled against different versions of frameworks, so you can simply tell the compiler that you want both DotNetStandard 2.</description></item><item><title>Configure a VSTS Linux agent with docker in minutes</title><link>https://www.codewrecks.com/post/old/2017/10/configure-a-vsts-linux-agent-with-docker-in-minutes/</link><pubDate>Sat, 14 Oct 2017 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/10/configure-a-vsts-linux-agent-with-docker-in-minutes/</guid><description>It is really simple to create a build agent for VSTS that runs in Linux and is capable of building and packaging your DotNetCore project, I’ve explained everything in a previous post, but I want to remind you that, with docker, the whole process is really simple.
Anyone knows that setting up a build machine often takes time. VSTS makes it super simple to install the Agent , just download a zip, call a script to configure the agent and the game is done.</description></item><item><title>Pause build and clear long build queue</title><link>https://www.codewrecks.com/post/old/2017/10/pause-build-and-clear-long-build-queue/</link><pubDate>Thu, 12 Oct 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/10/pause-build-and-clear-long-build-queue/</guid><description>In VSTS / TFS Build system, you can change the status of the build, between three states: Enabled, Paused and Disabled. The Paused state is really special, because all the build trigger are still active and builds are queued, but all these queued build does not starts.
Figure 1: Paused build
Paused state should be used with great care, because if you forget a build in this state, you can end up with lots of queued build, as you can see in Figure 2: Figure 2: Really high number of build queued, because the build definition is paused.</description></item><item><title>Check Angular AoT with a TFS Build</title><link>https://www.codewrecks.com/post/old/2017/09/check-angular-aot-with-a-tfs-build/</link><pubDate>Sat, 23 Sep 2017 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/09/check-angular-aot-with-a-tfs-build/</guid><description>Developing with Angular is a real fun, but usually during development you serve the application without any optimization, mainly because you want to speedup the compilation and serving of your Angular application.
When it is time to release the software, usually you build with –prod switch and usually you also use the –aot switch (it seems to me that it is on by default on –prod in latest version of the ng compiler).</description></item><item><title>Choose agent at build queue time</title><link>https://www.codewrecks.com/post/old/2017/09/choose-agent-at-build-queue-time/</link><pubDate>Thu, 07 Sep 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/09/choose-agent-at-build-queue-time/</guid><description>This is a simple feature that is not known very well and deserve a blog post. Sometimes you want to queue a build to a specific agent in a queue and this can be simply done using agent.name as a demand.
Demands are simple key/value pairs that allows the build engine to choose compatible agents and each agent automatically have a couple of capability to store computer name and agent name (they can be different)</description></item><item><title>VSTS agent on Ubuntu 1604 error in configuresh</title><link>https://www.codewrecks.com/post/old/2017/08/vsts-agent-on-ubuntu-16-04-error-in-configure-sh/</link><pubDate>Tue, 22 Aug 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/vsts-agent-on-ubuntu-16-04-error-in-configure-sh/</guid><description>I’ve downloaded the build/release agent from VSTS page to install in my Ubuntu 16.04 system, but when I tried to run the configuration shell script I got the following error
Failed to initialize CoreCLR, HRESULT: 0x80131500 * This happens because I installed the version for Ubuntu 14.04 and not the one specifically compiled for Ubuntu 16.04. In my situation the error happened because the download page of my VSTS account does not list the version for Ubuntu 16.</description></item><item><title>New Nuget Task in VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</link><pubDate>Tue, 22 Aug 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</guid><description>If you edit a build in VSTS where you configured Nuget Packaging and Publishing, you can notice that all the old tasks to pack and publish are marked as deprecated.
Figure 1: Old nuget tasks that are now deprecated.
Deprecating a package is needed when the Author decide to completely replace the entire package, changing also the id. This is needed when the task will be completely redesigned and will work in a complete different way from the old version.</description></item><item><title>Mounting network share in Release Definition</title><link>https://www.codewrecks.com/post/old/2017/08/mounting-network-share-in-release-definition/</link><pubDate>Mon, 21 Aug 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/mounting-network-share-in-release-definition/</guid><description>Using Deployment Groups with Release Management in VSTS is really nice, because you can use a pull release model, where the agent is running on machines that are deployment target, and all scripts are executed locally (instead of using PowerShell Remoting and WinRM).
A typical release definition depends on artifacts produced by a build and with VSTS sometimes it is convenient to store build artifacts in a network share instead that on VSTS.</description></item><item><title>Running UAT and integration tests during a VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</link><pubDate>Sat, 05 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</guid><description>There are a lots of small suggestions I’ve learned from experience when it is time to create a suite of integration / UAT test for your project. A UAT or integration test is a test that exercise the entire application, sometimes composed by several services that are collaborating to create the final result. The difference from UAT tests and Integration test, in my personal terminology, is that the UAT uses direct automation of User Interface, while an integration tests can skip the UI and exercise the system directly from public API (REST, MSMQ Commands, etc).</description></item><item><title>Dump all environment variables during a TFS VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/dump-all-environment-variables-during-a-tfs-vsts-build/</link><pubDate>Fri, 04 Aug 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/dump-all-environment-variables-during-a-tfs-vsts-build/</guid><description>Environment variables are really important during a build, especially because all Build variables are stored as environment variables, and this imply that most of the build context is stored inside them. One of the feature I miss most, is the ability to easily visualize on the result of the build a nice list of all the values of Environment variables. We need also to be aware of the fact that tasks can change environment variables during the build, so we need to be able to decide the exact point of the build where we want variables to be dumped.</description></item><item><title>Writing a VSTS TFS task that uses 7zip</title><link>https://www.codewrecks.com/post/old/2017/07/writing-a-vsts-tfs-task-that-uses-7zip/</link><pubDate>Sat, 29 Jul 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/writing-a-vsts-tfs-task-that-uses-7zip/</guid><description>Writing a Build / Release task for VSTS / TFS is really simple, but when you need third party software you need to be aware of license issue. As an example I have a small task that uses 7zip under the hood to compress / extract with the fantastic 7zip format. 7zip is good because, even if it uses more processing power to compress files, the result is often really smaller than a standard zip, and this is especially good for build agent that are behind a standard ADSL (300 Kbs upload speed).</description></item><item><title>Deploy test agent and run functional test tasks</title><link>https://www.codewrecks.com/post/old/2017/07/deploy-test-agent-and-run-functional-test-tasks/</link><pubDate>Fri, 14 Jul 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/deploy-test-agent-and-run-functional-test-tasks/</guid><description>In VSTS / TFS Build there are a couple of tasks that are really useful to execute UAT or Functional tests during a build. The first one deploy the test agent remotely on a target machine while the second one runs a set of tests on that machine using the agent. If you use multiple Run Functional Test task, please be sure that before each task there is a corresponding Deploy test agent tasks or you will get an error.</description></item><item><title>Publish a website available only in some branches with VSTS build</title><link>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</link><pubDate>Mon, 03 Jul 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</guid><description>I have several builds that publish some web projects using standard msbuild task. Here is a sample configuration.
Figure 1: Publishing a web site with msbuild task.
This is super simple thanks to MsBuild task and a bit of MSBuild arguments, but quite often I face an annoying problem: what about a new project that lives only on certain branches, but I need to publish in the build only if exists?</description></item><item><title>Use conditional task in VSTS TFS Build</title><link>https://www.codewrecks.com/post/old/2017/06/use-conditional-task-in-vsts-tfs-build/</link><pubDate>Sat, 17 Jun 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/use-conditional-task-in-vsts-tfs-build/</guid><description>When you start using Continuous Integration extensively, some builds become complex and sometimes a simple sequence of task is not what you want. Previous build system, based on XAML and Workflow Foundation allows you to specify really complex path of execution, but the side effect is that builds become really complex, they are painful to edit and also, you need to use Visual Studio to edit. Final drawback is that writing and maintaining custom build activities was not so easy, because you need to keep the compiled version in line with build engine version.</description></item><item><title>Running powershell before Get Sources in VSTS TFS Build</title><link>https://www.codewrecks.com/post/old/2017/06/running-powershell-before-get-sources-in-vsts-tfs-build/</link><pubDate>Sat, 10 Jun 2017 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/running-powershell-before-get-sources-in-vsts-tfs-build/</guid><description>I have a VSTS build where I need to run a PowerShell scripts at the very beginning of the build, before the agent starts downloading the sources , and it seems that this cannot be done with a simple task, because there is no way to place a task before the Get Sources default task of VSTS Build.
Luckily enough there is a way to solve this problem, because each task can define a specific script that should be run when the build starts and before each task runs , here is how.</description></item><item><title>Troubleshoot a failing build a Winrm story</title><link>https://www.codewrecks.com/post/old/2017/06/troubleshoot-a-failing-build-a-winrm-story/</link><pubDate>Sat, 03 Jun 2017 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/troubleshoot-a-failing-build-a-winrm-story/</guid><description>Many VSTS build and deploy tasks are based on Winrm to operate on a remote machine , one of the most common is the “Deploy Test Agent on” that will install a test agent on a remote machine.
Figure 1: Task to install a TestAgent on a different machine
If you are not in a domain Winrm can be a really thought opponent, especially because the target machine is not part of the same domain and is not trusted.</description></item><item><title>Publish nuget package during build NET Standard</title><link>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</link><pubDate>Mon, 29 May 2017 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</guid><description>In a previous post I dealt with how to build a Multitargeted dotnetcore solution in VSTS, but the build is not really complete unless you are publishing the result somewhere. Since my example was a simple library, the obvious solution is publishing everything to a nuget feed.
Publishing with nuget is really really simple with VSTS build system , because you should simply use another.NET Core task instance plus a NuGet publisher.</description></item><item><title>Run Pester in VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/05/run-pester-in-vsts-build/</link><pubDate>Sun, 28 May 2017 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/run-pester-in-vsts-build/</guid><description>I’m not a great expert of PowerShell, but during last years I’ve written some custom utilities I’m using for various projects. The main problem is that I’ve scattered all these scripts on multiple projects and usually I need time to find the latest version of a script that does X.
Scattering PowerShell scripts all around your projects lead to error and a maintenance nightmare
To avoid this problem, the obvious solution is starting a consolidation of PowerShell scripts and the obvious location is a Git repository hosted in VSTS.</description></item><item><title>Error during dotnet restore in a VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/05/error-during-dotnet-restore-in-a-vsts-build/</link><pubDate>Sat, 27 May 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/error-during-dotnet-restore-in-a-vsts-build/</guid><description>I’ve a build that runs perfectly on some agents, but fails in others, and the error is in the dotnet restore action. Here is the log of the failure:
1 2 3 4 2017-05-27T10:07:39.3285800Z C:\Program Files\dotnet\sdk\1.0.4\NuGet.targets(97,5): error : The content at &amp;#39;http://nuget.syncfusion.com/javascript&amp;#39; is not a valid JSON object. [C:\vso\_work\14\s\src\NBus.sln] 2017-05-27T10:07:39.3285800Z C:\Program Files\dotnet\sdk\1.0.4\NuGet.targets(97,5): error : Unexpected character encountered while parsing value: &amp;amp;lt;. Path &amp;amp;#039;&amp;amp;#039;, line 0, position 0. [C:\vso\_work\14\s\src\NBus.sln] 2017-05-27T10:07:39.5535786Z ##[error]Error: C:\Program Files\dotnet\dotnet.</description></item><item><title>Build NET standard multitargeted solution in VSTS</title><link>https://www.codewrecks.com/post/old/2017/05/build-net-standard-multitargeted-solution-in-vsts/</link><pubDate>Wed, 24 May 2017 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/build-net-standard-multitargeted-solution-in-vsts/</guid><description>I have a solution with multitargeting enabled to compile for full framework 4.5.2 and.NetStandard 1.6; it works quite well in Visual Studio, but when it is time to create a VSTS / TFS Build, if you using the standard Visual Studio template you got lots of errors.
1 2 3 4 5 Z:\a\g\_work\_temp\.NETStandard,Version=v1.6.AssemblyAttributes.cs (4, 20) Z:\a\g\_work\_temp\.NETStandard,Version=v1.6.AssemblyAttributes.cs(4,20): Error CS0400: The type or namespace name &amp;#39;System&amp;#39; could not be found in the global namespace (are you missing an assembly reference?</description></item><item><title>Check pull request with build without enforcing pull request</title><link>https://www.codewrecks.com/post/old/2017/05/build-pull-requests-without-policies/</link><pubDate>Sat, 20 May 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/build-pull-requests-without-policies/</guid><description>With TFS / VSTS Build system it is possible to configure Git to require that a specific branch is protected, and you need to use Pull Requests to push code into it, and the pull request can be accepted only if a specific build is green. Here is the typical configuration you can do in admin page for your Git repositories.
Figure 1: Branch policies in VSTS/TFS
In Figure 1 it is represented the configuration for branch policies; in this specific configuration I require a specific build to run whenever a member create a pull request against develop branch.</description></item><item><title>Using special agent pool for special builds</title><link>https://www.codewrecks.com/post/old/2017/05/using-special-agent-pool-for-special-builds/</link><pubDate>Wed, 10 May 2017 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/using-special-agent-pool-for-special-builds/</guid><description>When you use Build to generate artifact for installation or whenever you need a build to validate code with tasks that are not easily runnable on client machine you can have delay to install patches to your production system.
Lets examine this situation: You have a build that produces artifacts for installation and upload artifacts to VSTS. Then with Release Management you have release plan that deploy in production. What happens when you need to deploy an hotfix in production?</description></item><item><title>Maintenance for build agent in TFS Build</title><link>https://www.codewrecks.com/post/old/2017/05/maintenance-for-build-agent-in-tfs-build/</link><pubDate>Sat, 06 May 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/maintenance-for-build-agent-in-tfs-build/</guid><description>Each TFS Build agent uses a local directory to download source, do build, prepare artifacts and if you have really high number of builds, you could run out of space in agent disks.
To minimize this problem VSTS contains a Settings tab in pool configuration that allows scheduling of Agent Maintenance job as you can see in Figure 1.
Figure 1: Enabling agent schedule mainteinance
When an agent perform maintenance basically it deletes all working directory that were not used for more than a certain number of days (default 30).</description></item><item><title>Update GitVersion for large repositories</title><link>https://www.codewrecks.com/post/old/2017/04/update-gitversion-for-large-repositories/</link><pubDate>Sat, 22 Apr 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/04/update-gitversion-for-large-repositories/</guid><description>As you know I’m a fanatic user of GitVersion in builds, and I’ve written a simple task to use it in a TFS Build automatically. This is the typical task that you write and forget, because it just works and you usually not have the need to upgrade it. But there is a build where I start to see really high execution timing for the task, as an example GitVersion needs 2 minutes to run.</description></item><item><title>Task versioning for TFS VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/02/task-versioning-for-tfs-vsts-build/</link><pubDate>Sat, 04 Feb 2017 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/02/task-versioning-for-tfs-vsts-build/</guid><description>The build system of TFS / VSTS, introduced with TFS 2015, is evolving quite fast and release after release is always full of interesting new features. One of my favorites is the simple extention point to write a custom task to perform custom operation. The whole process is really simple and is described in this post.
One of the major problem when you manage a task is versioning, because you can have lots of builds using that task and if an update require to break the compatibility with the past, releasing a new version can really be a nightmare of many broken build.</description></item><item><title>Building with agent without Visual Studio installed</title><link>https://www.codewrecks.com/post/old/2017/01/building-with-agent-without-visual-studio-installed/</link><pubDate>Mon, 16 Jan 2017 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/01/building-with-agent-without-visual-studio-installed/</guid><description>I had a build that runs fine on some agents, then I try running the build on a different agent but the build failed with the error.
Error MSB4019: The imported project “C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v14.0\WebApplications\Microsoft.WebApplication.targets” was not found
The problem originated by the fact that the build was configured to compile with VS2015 and use VS2015 test runner, but in build machine the only version of Visual Studio installed is VS2013.</description></item><item><title>Manage Environment Variables during a TFS VSTS Build</title><link>https://www.codewrecks.com/post/old/2016/08/manage-environment-variables-during-a-tfs-vsts-build/</link><pubDate>Sat, 06 Aug 2016 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/08/manage-environment-variables-during-a-tfs-vsts-build/</guid><description>To avoid creating unnecessary build definition, it is a best practice to allow for parameter overriding in every task that can be executed from a build. I’ve dealt on how to parametrize tests to use a different connection string when tests are executed during the build and I’ve used Environment variables for a lot of reasons.
Environment variables are not source controlled, this allows every developer to override settings in own machine without disturbing other developers.</description></item><item><title>Create Parametrized test to allow for simpler Builds</title><link>https://www.codewrecks.com/post/old/2016/06/create-parametrized-test-to-allow-for-simpler-builds/</link><pubDate>Sat, 25 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-parametrized-test-to-allow-for-simpler-builds/</guid><description>When it is time of running unit test in a TFS or TeamCity Build, often you face the problem to run tests with options different from those one used in Developer Machine. As an example we have tons of tests that requires a MongoDb and and ElasticSearch or Solr integration.
While it is quite normal for developers to have everything installed in local dev box, it could be annoying to provide MongoDb and ElasticSearch installed on all agent machines.</description></item><item><title>No agent could be found with the following capabilities</title><link>https://www.codewrecks.com/post/old/2016/05/no-agent-could-be-found-with-the-following-capabilities/</link><pubDate>Sat, 07 May 2016 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/no-agent-could-be-found-with-the-following-capabilities/</guid><description>In TFS 2015 / VSTS new build system each task contains a series of requirements that needs to be matched by agents capabilities for the task to run. Usually you install Visual Studio in the machine with the build agent and you can schedule standard.NET builds without problem, but what happens when the build starts to evolve?
When you start creating more complex build, you can find that your agent does not meets requirements because it miss some of the required capabilities.</description></item><item><title>Uploading custom Build Task to TFS 2015</title><link>https://www.codewrecks.com/post/old/2016/04/uploading-custom-build-task-to-tfs-2015/</link><pubDate>Wed, 27 Apr 2016 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/04/uploading-custom-build-task-to-tfs-2015/</guid><description>In a previous article I wrote on how to write a custom Task For Visual Studio Team Services, but a usual question is: can I use the same technique to write a task to TFS 2015 on-premise? The answer is yes, and it is really simple, thanks to this fantastic article by Jesse, that explain how to use Fiddler to being able to authenticate to on-premise TFS without the hassle of enabling basic authentication.</description></item><item><title>Adding more than one build agent in VSTS</title><link>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</guid><description>Pricing for Build Agents in Visual Studio Team Services states that the first agent is free, subsequent on-premise agent will cost 15$/month. If you, like me, have a demo account, or you want to use more than one agent not simultaneously , you can register more than one agents, and then, from the administration panel, you can disable all agents except one.
Figure 1: Leave only one agent enabled at a time to be license compliant</description></item><item><title>Installing a linux Agent for VSTS build was never so easy</title><link>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</guid><description>If you installed Linux Agents for VSTS vNext build in the past, you already know that it was a simple experience, especially because the agent was installed with npm , so it is a matter of a couple of commands.
The agent is undergoing a substantial change, and in GitHub there is a project about VSTS Cross Platform Agent (CoreCLR), a new version of the agent, entirely written in CoreCLR that will substitute the closed source Windows agent and the actual XPlat agent.</description></item><item><title>Writing a custom task for Build vNext</title><link>https://www.codewrecks.com/post/old/2016/03/writing-a-custom-task-for-build-vnext/</link><pubDate>Wed, 16 Mar 2016 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/writing-a-custom-task-for-build-vnext/</guid><description>I wrote on how to integrate GitFlow and Semantic Versioning for my nuget packages thanks to GitVersion.exe and a simple powershell script, but still the solution is not perfect. The worst drawback is that you need to remember to include all needed PowerShell scripts and GitVersion.exe executable in project source code. This approach does not give best experience and clutter source code with build related executables.
Since the script is valid for any project, it would be a better solution to wrap it in a build task for the new vNext build system.</description></item><item><title>Versioning With Powershell in TFS Build Again</title><link>https://www.codewrecks.com/post/old/2016/02/versioning-with-powershell-in-tfs-build-again/</link><pubDate>Thu, 18 Feb 2016 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/versioning-with-powershell-in-tfs-build-again/</guid><description>I just want to link an interesting script to handle versioning in an Assembly Build created by Brad Foster. It does lots of stuff and it is an interesting example on how to interact with TFS with powershell.
You can find the script here in GitHub.
Gian Maria.</description></item><item><title>Package manager in VSTS</title><link>https://www.codewrecks.com/post/old/2016/02/package-manager-in-vsts/</link><pubDate>Fri, 12 Feb 2016 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/package-manager-in-vsts/</guid><description>One of the cool feature of Visual Studio Team Services is extendibility, you can also find lots of addin in official Marketplace. One of the coolest addin you can find there is an official addin by Microsoft and allows you to host a private Nuget Packages inside your VSTS account. You can find the Addin here: https://marketplace.visualstudio.com/items?itemName=ms.feed it is free and can be installed with a couple of simple clicks.</description></item><item><title>View results of deleted builds in VSTS</title><link>https://www.codewrecks.com/post/old/2016/02/view-results-of-deleted-builds-in-vsts/</link><pubDate>Sat, 06 Feb 2016 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/view-results-of-deleted-builds-in-vsts/</guid><description>One of the nice new feature of the new build system (vNext) introduced in VSTS is the ability to view result summary for deleted builds.
Figure 1: View Deleted builds from VSTS
Clearly not all data is maintained, you cannot retrieve artifacts or logs , so you cannot troubleshoot a failed build, but at least you are able to view build outcome, who triggered it and some global data such as test result summary.</description></item><item><title>Different approaches for publishing Artifacts in build vNext</title><link>https://www.codewrecks.com/post/old/2016/01/different-approaches-for-publishing-artifacts-in-build-vnext/</link><pubDate>Sat, 30 Jan 2016 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/01/different-approaches-for-publishing-artifacts-in-build-vnext/</guid><description>I’ve wrote an old post that explain how you can manage your artifacts with Build vNext, in that post I suggested to use a custom PowerShell script that identify all of your files that needs to be published as artifacts, and move everything inside the Staging Directory.
I believe that this is the perfect approach for complex application, where we have some logic to be applied before publishing an artifact , also it is super easy to compress everything with 7Zip to reduce the usage of your Upload Bandwidth if you have on-premises agent that needs to publish on VSTS (or simply because you want to save space in your shared folder used as a drop folder).</description></item><item><title>Versioning assembly with powershell and build vNext</title><link>https://www.codewrecks.com/post/old/2016/01/versioning-assembly-with-powershell-and-build-vnext/</link><pubDate>Fri, 29 Jan 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/01/versioning-assembly-with-powershell-and-build-vnext/</guid><description>In an old blog post I explained how to version assembly during TFS 2013 build with Powershell Scripts. The goal is modifying assemblyinfo.cs and assemblyinfo.vb with PowerShell in a TFS 2013 build for a project based on TFVC. If you are interested in Git I’ve other post on the subject.
Now that the build system is changed in Visual Studio Team Services and in TFS 2015, people asked me to update that scripts to work with the new build system.</description></item><item><title>Troubleshoot Error TF14044 in build vNext for TFS2015</title><link>https://www.codewrecks.com/post/old/2016/01/troubleshoot-error-tf14044-in-build-vnext-for-tfs2015/</link><pubDate>Fri, 15 Jan 2016 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/01/troubleshoot-error-tf14044-in-build-vnext-for-tfs2015/</guid><description>I upgraded a TFS2012 to TFS2015 Update 1 at a customer site and one of the reason why the customer want to upgrade is the new build system introduced in TFS 2015. Sadly enough, after the upgrade we created a simple build but it failed returning a permission error.
TF14044: Access Denied: User Project Collection Build Service (TEAM FOUNDATION) needs the CreateWorkspace global permission(s).
We were really puzzled, because the user used to run the build (TFSBuild) was correctly set into the Project Collection Build Service account, and that group has all the permissions to create a workspace.</description></item><item><title>Deploying a click-once application with build vNext in Azure Blob Storage</title><link>https://www.codewrecks.com/post/old/2015/12/rename-xmlrpc-php-on-your-wordpress-installation-2/</link><pubDate>Wed, 30 Dec 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/rename-xmlrpc-php-on-your-wordpress-installation-2/</guid><description>Thanks to the new build system in TFS / VSTS, publishing an application with Click-once during a build is really simple.
Versioning the click-once app The project is using Git and GitFlow, thus it comes natural to use GitVersion (as described in a previous post ) to automatically add Semantic Versioning. In previous post I’ve demonstrated how to use this technique to publish Nuget Packages and nothing changes for Click Once applications.</description></item><item><title>Use the right Azure Service Endpoint in build vNext</title><link>https://www.codewrecks.com/post/old/2015/12/use-the-right-azure-service-endpoint-in-build-vnext/</link><pubDate>Tue, 29 Dec 2015 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/use-the-right-azure-service-endpoint-in-build-vnext/</guid><description>Build vNext has a task dedicated to uploading files in azure blob , as you can see from Figure 1: Figure 1: Azure File Copy task configured in a vNext build
The nice parte is the Azure Subscription setting, that allows to choose one of the Azure endpoint configured for the project. Using service endpoint, you can ask to the person that has password/keys for Azure Account to configure an endpoint.</description></item><item><title>Save a build as a Draft</title><link>https://www.codewrecks.com/post/old/2015/12/save-a-build-as-a-draft/</link><pubDate>Tue, 01 Dec 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/save-a-build-as-a-draft/</guid><description>There are a lots of interesting new features in TFS / VSTS Build vNext, but surely, one of the coolest one is the ability to edit a build and save as a draft. Actually available only in the online version (Visual Studio Team Services)
Figure 1: Saving a build as a Draft
Actually, saving build as a draft allows you to edit a build, try a new configuration / task / personalization, without distrupt the old build that works.</description></item><item><title>Integrating GitVersion and Gitflow in your vNext Build</title><link>https://www.codewrecks.com/post/old/2015/10/integrating-gitversion-and-gitflow-in-your-vnext-build/</link><pubDate>Sat, 17 Oct 2015 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/10/integrating-gitversion-and-gitflow-in-your-vnext-build/</guid><description>In previous article I’ve showed how to create a VSO build vNext to automatically publish a nuget package to Myget (or nuget) during a build. [Publishing a Nuget package to Nuget/Myget with VSO Build vNext]. Now it is time to create a more interesting build that automatically version your assemblies and nuget packages based on GitFlow.
GitFlow and GitVersion GitFlow is a simple convention to manage your branches in your Git repository to support a production branch, a developement branch and Feature/Support/Release/hotfix branches.</description></item><item><title>Publishing a Nuget package to NugetMyget with VSO Build vNext</title><link>https://www.codewrecks.com/post/old/2015/09/publishing-a-nuget-package-to-nugetmyget-with-vso-build-vnext/</link><pubDate>Sat, 26 Sep 2015 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/publishing-a-nuget-package-to-nugetmyget-with-vso-build-vnext/</guid><description>Publishing a package to myget or nuget with a TFS/VSO vNext build is a breeze. First of all you should create a .nuspec file that specify everything about your package and include it in your source control. Then Add a variable to the build called NugetVersion as shown in Figure 1. Figure 1: Added NugetVersion variable to build definition.
In this build I disabled continuous integration, because I want to publish my package only when I decided that the code is good enough to be published.</description></item><item><title>Manage Artifacts with TFS Build vNext</title><link>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</link><pubDate>Tue, 30 Jun 2015 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</guid><description>Artifacts and Build vNext Another big improvement of Build vNext in TFS and VSO is the ability to **explicitly manage the content of artifactsduring a build **. With the term Artifacts in Continuous Integration we are referring to every result of of the build that is worth publishing together with build result, to be further consumed by consumers of the build. Generally speaking think to artifacts as build binary outputs.</description></item><item><title>Build vNext and continuous integration on GitHub</title><link>https://www.codewrecks.com/post/old/2015/06/build-vnext-and-continuous-integration-on-github/</link><pubDate>Mon, 08 Jun 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/build-vnext-and-continuous-integration-on-github/</guid><description>One of the great news of build vNext is the ability to create a build that targets source on GitHub project , not only on Git or TFVC repositories that are in current TFS or VSO instance. Given this, plus the fact that VSO has a 5 basic user license for Free, and you can use VSO as Continuous integration Engine for your GitHub projects.
To create a build that targets GitHub source code, you should simply login into your GitHub account, then navigate in your personal settings and finally choose “Personal Access tokens”</description></item><item><title>Build vNext distributing load to different agents</title><link>https://www.codewrecks.com/post/old/2015/06/build-vnext-distributing-load-to-different-agents/</link><pubDate>Sat, 06 Jun 2015 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/build-vnext-distributing-load-to-different-agents/</guid><description>One of the major benefit of the new build infrastructure of TFS and Visual Studio Online is the easy deployment of build agents. The downside of this approach is that your infrastructure become full of agents, and you should have some way to determine which agent(s) to use for a specific build. The problem is:
avoid running builds in machines that are “not appropriate” for that build.
Running on a specific agent If you are customizing a build, or if you are interested in running the build on a specific agent in a specific machine (ex: local agent), the solution is super easy, Just edit build definition and in General tab add a * demand *named Agent.</description></item><item><title>TFS New Build System vNext agents</title><link>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</link><pubDate>Wed, 03 Jun 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</guid><description>With the latest Visual Studio Online update, the new build system is now online for all users. As I said in old post, it is completely rewritten and covering all new features really requires lots of time. Since I’m a great fan of Continuous Integration and Continuous Deploy procedures I’d like to do some post to introduce you this new build system, along with the reason why it is really superior to the old one.</description></item><item><title>VSO vNext build error You cannot run the vsoAgentexe interactively</title><link>https://www.codewrecks.com/post/old/2015/05/vso-vnext-build-error-you-cannot-run-the-vsoagent-exe-interactively/</link><pubDate>Sat, 23 May 2015 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/05/vso-vnext-build-error-you-cannot-run-the-vsoagent-exe-interactively/</guid><description>Error Symptom *: You installed and configured an Agent for the new Visual Studio Online Build System, and you decided not to run as a service, but interactively. When you double click the VsoAgent.exe executable you got this error. You cannot run the vsoAgent.exe interactively from within the Agent folder. Try running it from the parent folder
I’ve encountered this error on my main workstation machine, and I’m not sure why I got this error.</description></item><item><title>Tfs2015 Build agent error Access denied xxxxxyyyyy needs Listen permissions for pool zzzzz to perform the action</title><link>https://www.codewrecks.com/post/old/2015/05/tfs2015-build-agent-error-access-denied-xxxxxyyyyy-needs-listen-permissions-for-pool-zzzzz-to-perform-the-action/</link><pubDate>Sat, 09 May 2015 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/05/tfs2015-build-agent-error-access-denied-xxxxxyyyyy-needs-listen-permissions-for-pool-zzzzz-to-perform-the-action/</guid><description>Tfs 2015 introduces a completely new and redesigned build system and one of the most important change is new lightweight agent system. Instead of installing TFS and then configure Build, to create a new agent you only need to download a zip file, uncompress and launch a PowerShell script. Another great advantage is the ability to run the agent as a service, or running it interactively in a simple console application.</description></item></channel></rss>