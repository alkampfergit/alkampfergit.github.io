<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ContinuousDeployment on Codewrecks</title><link>https://www.codewrecks.com/tags/continuousdeployment/</link><description>Recent content in ContinuousDeployment on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 08 Feb 2019 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/continuousdeployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Manual Release in Azure DevOps useful</title><link>https://www.codewrecks.com/post/old/2019/02/is-manual-release-in-azure-devops-useful/</link><pubDate>Fri, 08 Feb 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/02/is-manual-release-in-azure-devops-useful/</guid><description>&lt;p>When people creates a release in AzureDevOps, they &lt;strong>primarily focus on how to make the release automatic&lt;/strong> , but to be 100% honest, automation in only one side of the release, and probably not the more useful.&lt;/p>
&lt;p>First of all &lt;strong>Release is about auditing and understand which version of the software is released where and by whom&lt;/strong>. In this scenario what is more important is “how I can deploy my software in production”.&lt;/p></description></item><item><title>Add a capability to agent in a Deployment Group</title><link>https://www.codewrecks.com/post/old/2017/07/add-a-capability-to-agent-in-a-deployment-group/</link><pubDate>Fri, 14 Jul 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/add-a-capability-to-agent-in-a-deployment-group/</guid><description>&lt;p>When you deploy a Build agent in VSTS / TFS, in the administration page you have the ability to add custom Capabilities to the agent, as you can see in Figure 1.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image-3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image_thumb-3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image_thumb-3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Adding capabilities to a standard build agent.&lt;/em>&lt;/p>
&lt;p>With the new Release Management, you can install agents in machine that will be added to Deployment Groups. &lt;strong>If you look at the UI, you can see that the capabilities tab is listing all the capabilities of the agent, but you have not the option to specify custom capabilities.&lt;/strong> If you need to add some capabilities, as an example you want to add the VSTest capability because Test Agent was installed manually, &lt;strong>you can simply add an Environment Variable in the machine.&lt;/strong> The agent will translate all the environment variables in Agent Capabilities for you.&lt;/p></description></item><item><title>Release to Azure with Azure ARM templates</title><link>https://www.codewrecks.com/post/old/2016/08/release-to-azure-with-azure-arm-templates/</link><pubDate>Tue, 16 Aug 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/08/release-to-azure-with-azure-arm-templates/</guid><description>&lt;p>Thanks to new Release Management system in VSTS / TFS creating a release to your on-premise environment is really simple (&lt;a href="http://www.codewrecks.com/blog/index.php/2016/06/18/create-a-release-in-tfs-2015-vsts-release-management/">I’ve described the process here&lt;/a>). Another option is creating a test environment in Windows Azure, and if you choose this option life can be even easier.&lt;/p>
&lt;p>In this example &lt;strong>I’m using Azure as IAAS, deploying a software on a Windows Virtual Machine.&lt;/strong> While this is probably not the best approach to cloud (PAAS is surely a better approach) to create a test environment it can be perfectly acceptable.&lt;/p></description></item><item><title>Create a release in TFS 2015 VSTS Release Management</title><link>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</link><pubDate>Sat, 18 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</guid><description>&lt;p>This is the end of the journey of the last serie of posts. I’m now at the situation where I have a build that produces a single zip file with everything I need to deploy the software and a bunch of PowerShell scripts that relase the software using that zip as a source artifact.&lt;/p>
&lt;p>Now it is time to automate the process with Release Management. I want to use RM because the process is automated on a chain of environments, but also I have &lt;strong>traceability, auditing, and verification of the release procedures.&lt;/strong> I’m not going to cover all the steps needed to create the a release definition, I want to focus on how simple is creating a Release Process when you adopt Zip+PowerShell approach. I strongly suggest to have a look &lt;a href="https://www.visualstudio.com/en-us/features/release-management-vs.aspx">at official site&lt;/a> if you never heard of VSTS / TFS Release Management.&lt;/p></description></item><item><title>Checklists are prerequisites for Release Automation</title><link>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</link><pubDate>Thu, 09 Jun 2016 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</guid><description>&lt;p>I’ve dealt in some posts on how to &lt;strong>deploy an application with a PowerShell script&lt;/strong> that uses an archive produced by a build. Automating a release could be simple or complex, depending on the nature of the software to be deployed, but there is a single suggestion that I always keep in my mind:&lt;/p>
&lt;blockquote>
&lt;p>If you don’t have one or more Checklists for manual installation of a software do not even try to autmate installation process&lt;/p></description></item><item><title>Connect your TFS Release Management to Azure subscription with Update 3</title><link>https://www.codewrecks.com/post/old/2014/07/connect-your-tfs-release-management-to-azure-subscription-with-update-3/</link><pubDate>Thu, 31 Jul 2014 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/connect-your-tfs-release-management-to-azure-subscription-with-update-3/</guid><description>&lt;p>In the Update 3, now in RC, you have the ability to configure your Release Management to directly access your Azure Subscription to have a list of all of your environment. The operation is really simple, you need to &lt;strong>go to Administration tab and then choose to Manage Azure&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2014/07/image22.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2014/07/image_thumb22.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2014/07/image_thumb22.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Adding your subscription to Release Management&lt;/em>&lt;/p>
&lt;p>Adding a new Subscription is just a matter to enter some information taken from a valid publish certificate. If you have not available a valid certificate, the easiest way to obtain a new one is going to this url &lt;a href="https://windows.azure.com/download/publishprofile.aspx" title="https://windows.azure.com/download/publishprofile.aspx">https://windows.azure.com/download/publishprofile.aspx&lt;/a>. Once authenticated a new management certificate will be downloaded. Please do not abuse this functionality, or you will end with a lot of certificates.&lt;/p></description></item><item><title>Install and configure a TFS Release Manager Deployer Agent in Azure VM</title><link>https://www.codewrecks.com/post/old/2014/06/install-and-configure-a-tfs-release-manager-deployer-agent-in-azure-vm/</link><pubDate>Wed, 11 Jun 2014 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/06/install-and-configure-a-tfs-release-manager-deployer-agent-in-azure-vm/</guid><description>&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;blockquote>
&lt;p>You have a domain with TFS and -release management, there are no problems deploying agents on machines inside the domain, but you are not able to configure an agent for machines outside the domain.&lt;/p>&lt;/blockquote>
&lt;p>Es: you have some Azure VMs you want to use for your release pipeline and you do not want to join them to the domain with VPN or other mechanism.&lt;/p>
&lt;p>This scenario usually ends in being not able to configure Deployment Agents in those machines due to various authorization problems. The exact symptom range from getting 401 errors when you try to configure Agent on the VM. Another symptom is being able to configure the Deployment Agent, but whenever the service starts you do not see any heartbeat on the server and in the Event viewer of VM you got error like these ones&lt;/p></description></item><item><title>Upgrading Release Management to Update 1</title><link>https://www.codewrecks.com/post/old/2014/03/upgrading-release-management-to-update-1/</link><pubDate>Sat, 15 Mar 2014 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/03/upgrading-release-management-to-update-1/</guid><description>&lt;p>If you want to upgrade Release Management for TFS 2013 to Update 1 you surely noticed that there is no Update 1 upgrade package, but you should first uninstall the old version of Release Management and the install again the version with Update 1.&lt;/p>
&lt;p>While this does not delete any previous settings and simply upgrade the database to the new structure, it is possible that &lt;strong>after upgrading when you try to connect with the Release Management Client you get and error telling you that the Release Management Server is not working&lt;/strong>. Before starting panicking for your installation, you should check if you erroneously choose the Https protocol instead of HTTP&lt;/p></description></item></channel></rss>