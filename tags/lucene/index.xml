<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lucene on Codewrecks</title><link>https://www.codewrecks.com/tags/lucene/</link><description>Recent content in Lucene on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 27 May 2013 07:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/lucene/index.xml" rel="self" type="application/rss+xml"/><item><title>Hilight matched text inside documents indexed with Solr plus Tika</title><link>https://www.codewrecks.com/post/old/2013/05/hilight-matched-text-inside-documents-indexed-with-solr-plus-tika/</link><pubDate>Mon, 27 May 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/05/hilight-matched-text-inside-documents-indexed-with-solr-plus-tika/</guid><description>I’ve already dealt on how to index documents with Solr and Tika and in this article I’ll explain how you can not only search for documents that match your query, but returns even some text extract that shows where the document match the query. To achieve this, you should store the full content of the document inside your index, usually I create a couple of fields, one called Content that will contain the content of the file, and with a copyfield directive ( &amp;lt;copyField source=”content” dest=”text”/&amp;gt; ) automatically copy that value inside the catch all field called text.</description></item><item><title>Import folder of documents with Apache Solr 40 and tika</title><link>https://www.codewrecks.com/post/old/2013/05/import-folder-of-documents-with-apache-solr-4-0-and-tika/</link><pubDate>Sat, 25 May 2013 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/05/import-folder-of-documents-with-apache-solr-4-0-and-tika/</guid><description>In a previous article I showed how simple is to import data from a Sql database into Solr with a Data Import Handler, in this article I’ll use a similar technique to import documents stored inside a folder.
This feature is exposed by the integration with Tika, an open source document analyzer capable of extracting text by various formats of files. Thanks to this library solr is capable of crawling an entire directory, indexing every document inside it with really minimal configuration.</description></item><item><title>Index your blog using tags and lucenenet</title><link>https://www.codewrecks.com/post/old/2012/08/index-your-blog-using-tags-and-lucene-net/</link><pubDate>Sat, 25 Aug 2012 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/index-your-blog-using-tags-and-lucene-net/</guid><description>Getting Started With Lucene.NET Searching and more detail on Documents Fields Advanced Queries with Lucene.NET Case Sensitivity in Lucene.NET Searches Faceted searches with Lucene.NET Assign Tag To Lucene documents In the last part of my series on Lucene I show how simple is adding tags to document to do a simple tag based categorization , now it is time to explain how you can automate this process and how to use some advanced characteristic of lucene.</description></item><item><title>Assign 'tag' to lucene documents</title><link>https://www.codewrecks.com/post/old/2012/08/assign-tag-to-lucene-documents/</link><pubDate>Tue, 21 Aug 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/assign-tag-to-lucene-documents/</guid><description>Getting Started With Lucene.NET Searching and more detail on Documents Fields Advanced Queries with Lucene.NET Case Sensitivity in Lucene.NET Searches Faceted searches with Lucene.NET One of the good aspect of working with lucene.NET is that it is really similar to a NoSql database, because it permits you to store “document” where a document is a generic collection of fields. Lucene has the ability to store not only textual field, but also Numeric Fields to solve interesting scenarios because you are not limited in storing and searching only for text.</description></item><item><title>Faceted searches with LuceneNET</title><link>https://www.codewrecks.com/post/old/2012/07/faceted-searches-with-lucene-net/</link><pubDate>Fri, 20 Jul 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/faceted-searches-with-lucene-net/</guid><description>Getting Started With Lucene.NET Searching and more detail on Documents Fields Advanced Queries with Lucene.NET Case Sensitivity in Lucene.NET Searches One of the coolest feature of Lucene.NET is the ability to do faceted searches with really few lines of code. A faceted search runs a query on an index and calculate the distribution of the results based on a property of the document. Let me show a sample result and then you probably will have a better understanding of this concept.</description></item><item><title>Case sensitivity in lucene search</title><link>https://www.codewrecks.com/post/old/2012/07/case-sensitivity-in-lucene-search/</link><pubDate>Thu, 05 Jul 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/case-sensitivity-in-lucene-search/</guid><description>Getting Started With Lucene.NET Searching and more detail on Documents Fields Advanced Queries with Lucene.NET We ended last post with a good knowledge of how to do complex searches in Lucene.NET indexes but a question remains unresolved, is Lucene.NET search case insensitive or case insensitive?. Suppose you search for
+mime + format
Here is the first result returned from the above query.
Figure 1: Searching for +mime +format returns a document that contains MIME in uppercase.</description></item><item><title>Advanced queries with LuceneNET</title><link>https://www.codewrecks.com/post/old/2012/07/advanced-queries-with-lucene-net/</link><pubDate>Tue, 03 Jul 2012 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/advanced-queries-with-lucene-net/</guid><description>Previous part of the series
Getting Started With Lucene.NET Searching and more detail on Documents Fields In the previous parts I created a lucene.NET index that contains information about StackOverflow posts content and I showed some basic searches. Suppose I create a new index where documents were created with these options
1 2 luceneDocument.Add(new Field(&amp;#34;Id&amp;#34;, reader.GetAttribute(&amp;#34;Id&amp;#34;), Field.Store.YES, Field.Index.NOT_ANALYZED)); luceneDocument.Add(new Field(&amp;#34;content&amp;#34;, reader.GetAttribute(&amp;#34;Body&amp;#34;), Field.Store.COMPRESS, Field.Index.ANALYZED)); With this document I’m able to retrieve the original content because I’ve specified lucene.</description></item><item><title>Getting started with LuceneNET-Searching</title><link>https://www.codewrecks.com/post/old/2012/06/getting-started-with-lucene-netsearching/</link><pubDate>Thu, 21 Jun 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/getting-started-with-lucene-netsearching/</guid><description>Previous part of the series
Getting Started With Lucene.NET In the previous part I’ve showed how easy is to create an index with lucene.net, but in this post I’ll start to explain how to search into it, first of all what I need is a more interesting example, so I decided to download a dump of stack overflow , and I’ve extracted the Posts.Xml file (10 GB of XML file), then I wrote this simple piece of text to create the lucene index.</description></item><item><title>Getting Started with Lucenenet</title><link>https://www.codewrecks.com/post/old/2012/06/getting-started-with-lucene-net/</link><pubDate>Wed, 20 Jun 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/getting-started-with-lucene-net/</guid><description>I started working with Lucene.Net and I should admit that is a real powerful library, but it is really huge and needs a little bit of time to be mastered completely. Probably one of the best resource to keep in mind is the FAQ, because it contains really most of the more common question you can have on Lucene and it is a good place to start. Another good place is the Wiki that contains other useful information and many other link to relevant resources.</description></item></channel></rss>