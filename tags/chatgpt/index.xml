<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ChatGPT on Codewrecks</title><link>https://www.codewrecks.com/tags/chatgpt/</link><description>Recent content in ChatGPT on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 20 May 2023 07:00:00 +0000</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/chatgpt/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Copilot-X in action: Steps instructions in a single prompt</title><link>https://www.codewrecks.com/post/github/copilot-few-shot-part-2/</link><pubDate>Sat, 20 May 2023 07:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-few-shot-part-2/</guid><description>&lt;p>If you look at &lt;a href="https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/">previous post on the subject&lt;/a> &lt;strong>I&amp;rsquo;m experimenting with Copilot Chat to have it automate mundane, repetitive operation&lt;/strong> but that can operate on complex classes. In previous example I demonstrated how you can decompose a complex operation in multiple steps, actually guiding Copilot towards desired result.&lt;/p>
&lt;blockquote>
&lt;p>Now the question is: Once you got it right, is it possible to use a single prompt to have desired result?&lt;/p>&lt;/blockquote>
&lt;p>Well the answer is &lt;strong>it depends&lt;/strong>. It is not simple because the AI needs to perform an intermediate series of steps and the result can:&lt;/p></description></item><item><title>GitHub Copilot-X in action: generation of test object with random data</title><link>https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/</link><pubDate>Sat, 20 May 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/</guid><description>&lt;p>In real world software you often have complex classes, in this situation we have &lt;strong>AtomicReadmodels in a project heavily based on Event Sourcing&lt;/strong>. One challenge they present is the presence of only private setters for all properties - a necessity due to the unconventional nature of these classes, &lt;strong>which rely on parsing domain events for property population&lt;/strong>. This results in difficulties when creating test classes in memory during unit testing, as the private setters block external code from setting properties. Reflection or usage of libraries such as &lt;strong>Fasterflect are usually the solution but not without any annoyances&lt;/strong>.&lt;/p></description></item></channel></rss>