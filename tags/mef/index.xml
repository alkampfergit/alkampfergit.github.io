<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MEF on Codewrecks</title><link>https://www.codewrecks.com/tags/mef/</link><description>Recent content in MEF on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 13 Aug 2012 19:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/mef/index.xml" rel="self" type="application/rss+xml"/><item><title>Making Castle and MEF happy togheter</title><link>https://www.codewrecks.com/post/old/2012/08/making-castle-and-mef-happy-togheter/</link><pubDate>Mon, 13 Aug 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/making-castle-and-mef-happy-togheter/</guid><description>If you use Mef to dynamically load handlers for your services (as described in this post), you will probably need to declare dependencies to various other software service. Since MEF is not born to handle dependencies, you will probably use other libraries for DI, Es. Castle.Windsor. Now the problem is “how can I make MEF and my IoC container living together happily with minimum effort?”. To keep everything simple you will need to understand typical scenario, you want to solve, a first problem you need to solve is “ Mef imported classes should be able to declare dependencies on services defined in my primary IoC container engine§.</description></item><item><title>Little Trick to generate ILogger with MEF based on type</title><link>https://www.codewrecks.com/post/old/2012/07/little-trick-to-generate-ilogger-with-mef-based-on-type/</link><pubDate>Tue, 03 Jul 2012 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/little-trick-to-generate-ilogger-with-mef-based-on-type/</guid><description>I’ve a little application that uses MEF to manage plugins, today I faced this problem, I have classes like this one.
1 2 3 4 public class TestExport { [Import] public ILog Logger { get; set; } This is a standard class that declares an import on log4net.ILog interface and since this little program uses MEF to do all composition I’d like to avoid using Castle or other IoC libraries, but I wish to use MEF to resolve ILog with the constraint that each class should have its own logger , a condition verified by this test.</description></item><item><title>Evolving Request Response service to separate contract and business logic</title><link>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</link><pubDate>Mon, 23 Apr 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</guid><description>Example can be downloaded here . I previously described a scenario where the customer needs a really basic Request Response service in WCF, the goal is being able to take advantage of a request / response structure, but with an approach like: “the simpliest thing that could possibly works”. This technique is usually needed to introduce new architectural concepts in a team without requiring people to learn a huge amount of concepts in a single shot, a scenario that could ends in a team that actively * fight the new architecture because it is too complex *.</description></item><item><title>Customize output windows in Visual Studio</title><link>https://www.codewrecks.com/post/old/2012/01/customize-output-windows-in-visual-studio/</link><pubDate>Mon, 09 Jan 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/01/customize-output-windows-in-visual-studio/</guid><description>I really like WPF for showing directly in the Visual Studio Output folder all binding errors, but one annoying stuff is that the output windows is usually crowded with all sort of stuff, so you have an hard life identifying the binding errors from all the other output contained in there. Since Visual Studio 2010 use WPF to render the output windows and use MEF for extension, modifying the aspect of the content of VS2010 is really simple.</description></item></channel></rss>