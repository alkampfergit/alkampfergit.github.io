<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EF5 on Codewrecks</title><link>https://www.codewrecks.com/tags/ef5/</link><description>Recent content in EF5 on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 20 Dec 2013 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/ef5/index.xml" rel="self" type="application/rss+xml"/><item><title>Using SaveOrUpdate in Entity Framework</title><link>https://www.codewrecks.com/post/old/2013/12/using-saveorupdate-in-entity-framework/</link><pubDate>Fri, 20 Dec 2013 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/12/using-saveorupdate-in-entity-framework/</guid><description>This is a common question for people that used NHibernate before using EF. The problem is, I have an object and I do not want to care about if this is a new object that needs to be added for the first time to the database, or it is an object that needs update or if it was already attached to the context, etc. I want to call a single Upsert method called SaveOrUpdate and let the ORM takes care of the rest.</description></item><item><title>Entity framework and Table splitting with Code First</title><link>https://www.codewrecks.com/post/old/2013/08/entity-framework-and-table-splitting-with-code-first/</link><pubDate>Wed, 28 Aug 2013 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/entity-framework-and-table-splitting-with-code-first/</guid><description>Nhibernate supports lazy loading for single properties and this solves perfectly the situation where a table has on or more field with a lot of data and you absolutely need to avoid loading all that data each time you load the entity. Basically with NH you can define Lazy Properties and the content of that property is loaded from the database only if you access it.
Entity framework does not supports this feature, but it can solve this scenario with Table Splitting, as described by Julie Lerman.</description></item><item><title>Entity Framework 50 first steps and impressions</title><link>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-0-first-steps-and-impressions/</link><pubDate>Tue, 25 Sep 2012 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-0-first-steps-and-impressions/</guid><description>Iâ€™m mostly a NHibernate user, but EF code first approach is intriguing, especially in situation where the customer prefer to use only Microsoft Stack libraries , thus EF 5.0 is a good approach to write quickly an Efficient data access module in really few clicks. Enabling EF5 on your own project is as simple as adding a reference with Nuget, go to package manager and type install-package EntityFramework
and the game is done.</description></item></channel></rss>