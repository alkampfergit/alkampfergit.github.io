<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dotnet on Codewrecks</title><link>https://www.codewrecks.com/tags/dotnet/</link><description>Recent content in Dotnet on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 05 Feb 2022 08:13:30 +0000</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>Symbol server made easy with Azure DevOps</title><link>https://www.codewrecks.com/post/programming/aspnet/working-with-symbols/</link><pubDate>Sat, 05 Feb 2022 08:13:30 +0000</pubDate><guid>https://www.codewrecks.com/post/programming/aspnet/working-with-symbols/</guid><description>I&amp;rsquo;ve blogged in the past about symbol server, to recap here is the scenario.
In your organization you have some sort of common .NET code that is shared between projects, but you have to face and resolve some problems.
How to compile dlls How to distribute dlls How to make debugging easier for the user of the dll. We have clearly some standard solution for all the parts.
Compiling dll You MUST compile dll in a build server.</description></item></channel></rss>