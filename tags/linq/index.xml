<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LINQ on Codewrecks</title><link>https://www.codewrecks.com/tags/linq/</link><description>Recent content in LINQ on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 11 Dec 2013 11:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/linq/index.xml" rel="self" type="application/rss+xml"/><item><title>Insenstive search with Mongo with C and LINQ provider</title><link>https://www.codewrecks.com/post/old/2013/12/insenstive-search-with-mongo-with-c-and-linq-provider/</link><pubDate>Wed, 11 Dec 2013 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/12/insenstive-search-with-mongo-with-c-and-linq-provider/</guid><description>&lt;p>Searching for a &lt;strong>case insensitive match in mongo&lt;/strong> is really simple, because it has full support for regular expression. As an example if you want to find all properties that is equal to a certain text with case insensitive search you can issue this query&lt;/p>
&lt;p>&lt;code>db.xxxx.find( { myProperty: /^text$/i } );&lt;/code>&lt;/p>
&lt;p>This query uses a regular expression and the final i is specification for an insensitive search. The other characters are&lt;/p></description></item><item><title>Entity Framework error Some part of your SQL statement is nested too deeply</title><link>https://www.codewrecks.com/post/old/2013/10/entity-framework-error-some-part-of-your-sql-statement-is-nested-too-deeply/</link><pubDate>Wed, 02 Oct 2013 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/10/entity-framework-error-some-part-of-your-sql-statement-is-nested-too-deeply/</guid><description>&lt;p>Today a colleague told me that he got a strange Entity Framework error&lt;/p>
&lt;blockquote>
&lt;p>Some part of your SQL statement is nested too deeply. Rewrite the query or break it up into smaller queries&lt;/p>&lt;/blockquote>
&lt;p>I immediately ask him what kind of &lt;strong>huge and big query he was issuing to EF&lt;/strong> , but the answer is pretty simple.&lt;/p>
&lt;blockquote>
&lt;p>Context.EntityName.Where(u =&amp;gt; listOfId.Any(s =&amp;gt; s.Equals(u.UserId))).ToList()&lt;/p>
&lt;p>and listOfId is a List&amp;lt;Int32&amp;gt; with 100 integer&lt;/p></description></item><item><title>Order by a property expressed as string in a LINQ Query</title><link>https://www.codewrecks.com/post/old/2012/03/order-by-a-property-expressed-as-string-in-a-linq-query/</link><pubDate>Fri, 23 Mar 2012 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/order-by-a-property-expressed-as-string-in-a-linq-query/</guid><description>&lt;p>This is one of the most common question you got when you show &lt;strong>LINQ to Entities&lt;/strong> or &lt;strong>LINQ to Nhibernate&lt;/strong> to people that are not used to LINQ: &lt;em>How can I order by a property if I have the name of the property expressed as String?&lt;/em> I’ve blogged in the past how you can do &lt;a href="http://www.codewrecks.com/blog/index.php/2009/03/21/entity-framework-dynamic-sorting-and-pagination/">dynamic sorting and pagination in &lt;strong>Entity Framework&lt;/strong>&lt;/a>, but that solution uses ESQL, a dialect to query EF that is similar to &lt;strong>NHibernate&lt;/strong> HQL language.&lt;/p></description></item><item><title>Wcf IXmlSerializable and The XmlReader state should be EndOfFile after this operation</title><link>https://www.codewrecks.com/post/old/2011/08/wcf-ixmlserializable-and-the-xmlreader-state-should-be-endoffile-after-this-operation/</link><pubDate>Tue, 23 Aug 2011 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/08/wcf-ixmlserializable-and-the-xmlreader-state-should-be-endoffile-after-this-operation/</guid><description>&lt;p>I&amp;rsquo;ve a simple class that contains Properties metadata and I need to pass instances of that class with WCF. Since it contains Dictionary of objects I decided to implement IXmlSerializable to decide the exact format of serialization and make it usable with WCF. Since I really hate reading XML stream with &lt;a href="http://msdn.microsoft.com/en-us/library/b8a5e1s5%28v=VS.90%29.aspx">XmlReader&lt;/a>, I decided to implement the ReadXml method using an XElement, thanks to the fact that I can create an XElement from a XmlReader thanks to the Load method.&lt;/p></description></item><item><title>Generic wrapper for LINQ to Tree</title><link>https://www.codewrecks.com/post/old/2011/04/generic-wrapper-for-linq-to-tree/</link><pubDate>Tue, 05 Apr 2011 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/generic-wrapper-for-linq-to-tree/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2011/03/31/create-a-tree-flatten-function-with-linq/">this post&lt;/a> I dealt with a  simple extension function to flatten a tree and in one of the comment &lt;a href="http://bobbbloggg.blogspot.com/">Robert&lt;/a> shared an &lt;a href="http://www.codeproject.com/KB/linq/LinqToTree.aspx">interesting link&lt;/a> that deal with the creation of a wrapper structure to use LINQ style function on tree structure. That article is really interesting, but the adopted solution requires to create a wrapper for every structure you need to iterate into and I decided to spend a couple of minutes to verify how difficult is writing a generic solution.&lt;/p></description></item><item><title>Create a tree flatten function to support LINQ queries</title><link>https://www.codewrecks.com/post/old/2011/03/create-a-tree-flatten-function-with-linq/</link><pubDate>Thu, 31 Mar 2011 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/create-a-tree-flatten-function-with-linq/</guid><description>&lt;p>Quite often I deal with tree structures where each node can contains a set of children nodes. When is time to cycle through all the nodes, to execute some logic, you need to write a standard recursive function, an operation that is quite boring and repetitive. The question is, is it possible to write a LINQ function called Flatten() that permits you to flatten down a tree of arbitrary depth down to an IEnumerable&amp;lt;T&amp;gt;? The answer is yes.&lt;/p></description></item><item><title>Linq distinct with lambda</title><link>https://www.codewrecks.com/post/old/2011/01/linq-distinct-with-lambda/</link><pubDate>Tue, 18 Jan 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/01/linq-distinct-with-lambda/</guid><description>&lt;p>Linq Distinct function accepts an IEqualityComparer&amp;lt;T&amp;gt; used to compare values of the IEnumerable to remove &lt;em>equal&lt;/em> objects to implement the Distinct() function. Sometimes it is more useful to specify a simple Func&amp;lt;T, T, Boolean&amp;gt;, a simple predicate that will implement the concept of Equality between elements. To support such a scenario you can write this simple Extension method.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IEnumerable&amp;lt;T&amp;gt; Distinct&amp;lt;T&amp;gt;(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">this&lt;/span> IEnumerable&amp;lt;T&amp;gt; source,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Func&amp;lt;T, T, Boolean&amp;gt; comparer)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DistinctByLambda&amp;lt;T&amp;gt;(comparer, source);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>All the work is done by the DistinctByLambda class, that accepts a reference to the original IEnumerable sequence of elements and the predicate to verify for equality. Here is the code.&lt;/p></description></item><item><title>Linq provider via IEnumerable</title><link>https://www.codewrecks.com/post/old/2009/11/linq-provider-via-ienumerable/</link><pubDate>Fri, 20 Nov 2009 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/linq-provider-via-ienumerable/</guid><description>&lt;p>If you ever tried to implement a linq provider, you know that this is not a simple &lt;a href="http://blogs.msdn.com/mattwar/pages/linq-links.aspx">task&lt;/a>. This is true for a full linq provider, but sometimes we need only a basic support, and in these situations there is probably a simpler approach.&lt;/p>
&lt;p>Suppose you need to give LINQ support to find user in Active Directory via LDAP, you need to make query for the various properties of the User object, and you need also to make change to some of these properties and propagate those changes back in the AD. Sounds complicated? Maybe not.&lt;/p></description></item><item><title>Manipulate Expression Tree in DtoGenerator</title><link>https://www.codewrecks.com/post/old/2009/08/manipulate-expression-tree-in-dtogenerator/</link><pubDate>Wed, 12 Aug 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/manipulate-expression-tree-in-dtogenerator/</guid><description>&lt;p>I&amp;rsquo;m writing a simple &lt;a href="http://www.codewrecks.com/blog/index.php/2009/07/31/dto-generator-and-repository-integration/">Dto generator&lt;/a>, and today I found a challenging problem. I supported dto composition like this:&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/08/image19.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/08/image-thumb19.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/08/image-thumb19.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>I have a CustomerDto3 that have only CustomerId and ContactName properties, then I want to autogenerate a OrderTestDto that have a Customers property of type CustomerDto3. The syntax on My T4 generator is this one.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>SyntaxCode syntax = &lt;span style="color:#66d9ef">new&lt;/span> SyntaxCode(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">@&amp;#34;bin\Debug\DtoFactory.Exe&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Path.GetDirectoryName(Host.TemplateFile),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;DtoFactory.Dto&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;http://dtonamespace.org&amp;#34;&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syntax.Render(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;DtoFactory.Orders[OrdersTestDto] (OrderID,OrderDate,Customers) (Customers|CustomerDto3)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Generated\\OrderDto3.cs&amp;#34;&lt;/span>); &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>I&amp;rsquo;ve simplified dto creation, and supported generation of each dto in a different file. The main problem supporting this scenario is &lt;em>how to write the assembler of the container class&lt;/em>. I&amp;rsquo;ve started generating this code.&lt;/p></description></item><item><title>Expression tree to the rescue</title><link>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</link><pubDate>Mon, 27 Jul 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/expression-tree-to-the-rescue/</guid><description>&lt;p>I have a little validation library that must support localized error messages, it uses a simple techniques, when you set an error message for a specific validator, if you do not want localization you can simply pass a single string, but if you want message to be localized, you specified two strings, one is the name of the resource that contains the message and the other is the key of the message.&lt;/p></description></item><item><title>Entity Framework first steps</title><link>https://www.codewrecks.com/post/old/2009/01/entity-framework-first-steps/</link><pubDate>Thu, 08 Jan 2009 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/entity-framework-first-steps/</guid><description>&lt;p>For those used to ORM like NHibernate, the approach to Entity Framework is quite simple, but I’ve noticed that for people that never heard of ORM in general, EF tends to create some confusion.&lt;/p>
&lt;p>I see people that make confusion between LINQ and EF, LINQ is the Language Integrated Query, it can be used to query objects in memory, XML, NHibernate and of course EF, but is not the only way to query EF. A less known method to execute query against a EF context is &lt;a href="http://msdn.microsoft.com/en-us/library/bb387145.aspx">EntitySql&lt;/a>, here is an example.&lt;/p></description></item><item><title>Extend BindingList with filter functionality</title><link>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</link><pubDate>Sat, 22 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</guid><description>&lt;p>If you still work with windows forms and cannot move all of your projects to WPF, you probably gets annoyed by the limitation of the standard BindingList&amp;lt;T&amp;gt; included in the framework. In an &lt;a href="http://www.codewrecks.com/blog/index.php/2007/10/12/bindinglistfind-and-notimplementedexception/">old post&lt;/a> I showed how can you create a specialized BindingList&amp;lt;T&amp;gt; to support generic Find() thanks to reflection, but this is not enough.&lt;/p>
&lt;p>Another annoying limitation is that BindingList does not support IBindingListView. For those that does not knows this interface, it is the one used by the windows forms binding engine to support filtering and advanced sorting. I think that filtering is a real basic functionality needed by the binding engine, and in fact WPF support for filtering, sorting and grouping, make these operations really a breeze. But BindingList does not offers such a functionality.&lt;/p></description></item><item><title>Dynamic Linq expression generator</title><link>https://www.codewrecks.com/post/old/2008/11/dynamic-linq-expression-generator/</link><pubDate>Wed, 19 Nov 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/dynamic-linq-expression-generator/</guid><description>&lt;p>Some time ago I read th&lt;a href="http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx">is post&lt;/a> that speaks about dynamic query library. I downloaded the code sample, it is interesting, but is bound to Linq to Sql, now I need an implementation of a Dynamic Linq Query generator. Since I already worked in the past with expression parser and I have some generic Infix to postfix converter in a three hours of work I was able to put everything in a project and now I can write&lt;/p></description></item><item><title>Validate HTML input with Linq2XML</title><link>https://www.codewrecks.com/post/old/2008/11/validate-html-input-with-linq2xml/</link><pubDate>Mon, 17 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/validate-html-input-with-linq2xml/</guid><description>&lt;p>Suppose you have a very simple page where user can add comments to an issue, user can enter plain text and also they can use th HTML tag &amp;lt;b&amp;gt; to render in bold some text. In the &lt;a href="http://www.codewrecks.com/blog/storage/validatesample.zip">example code&lt;/a> you can see a very simple implementation (default.aspx). It use a xml file for back end storage (so you can run the example without a database) and in Default.aspx all the text that was entered by the user was stored in a CData section of the XML STorage file. When the comments are rendered on the page we simply output all the content. The result is good but have some problems. First of all you can use every html tag, such as &amp;lt;i&amp;gt; moreover, if some hacker enter the text &lt;em>you were &amp;lt;script&amp;gt;alert(‘hacked’);&amp;lt;/script&amp;gt;&lt;/em> into the textbox, all the user that read the page will execute that script, this is a  simple sample of cross site scripting attack.&lt;/p></description></item><item><title>Faster invoke method of unknown objects with Expression tree part2</title><link>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</link><pubDate>Mon, 06 Oct 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/10/faster-invoke-method-of-unknown-objects-with-expression-tree-part2/</guid><description>&lt;p>In the &lt;a href="http://www.codewrecks.com/blog/index.php/2008/10/04/expression-tree-vs-reflection/">last post&lt;/a> I described a technique that uses Expression Tree to invoke dynamically methods of objects of types unknown at compile time. You can use this technique to build the &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/10/expressiontreereflection.zip">ExpressionTreeReflection&lt;/a> class.&lt;/p>
&lt;p>You can now write code like this&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>private static readonly Type suType = Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>private static readonly Object suInstance = Activator.CreateInstance(Type.GetType(&amp;#34;DotNetMarche.Common.Test.AuxClasses.SimpleUnknown, DotNetMarche.Common.Test&amp;#34;));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[Test]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>public void TestFuncNoArgInt32()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Func&lt;span style="color:#f92672">&amp;lt;Object&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">Int32&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> func = ExpressionTreeReflection.ReflectFunction&lt;span style="color:#f92672">&amp;lt;Int32&amp;gt;&lt;/span>(suType, &amp;#34;AMethod&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.That(func(suInstance), Is.EqualTo(1));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>You load a type unknown at compile time, the only information you know is the signature of one of its method, in the example is called AMethod and accepts no parameters and returns an Int32. The ReflectFunction() method of ExpressionTreeReflection helps you to build a Func&amp;lt;Object, Int32&amp;gt; you can use to call the method. This function accepts as first argument an instance of the object that contain the method to invoke, then all needed parameters. The first advantage is that you have a more strongly typed way to dynamically invoke the function instead of using reflection. Here is the code that invoke a function that need a string parameter.&lt;/p></description></item><item><title>Mix Linq2XML and XPath take the best from both</title><link>https://www.codewrecks.com/post/old/2008/09/mix-linq2xml-and-xpath-take-the-best-from-both/</link><pubDate>Fri, 05 Sep 2008 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/mix-linq2xml-and-xpath-take-the-best-from-both/</guid><description>&lt;p>I must admit that LINQ 2 Xml impressed me very much, I’m actually using it to modify docx documents with the OpenXml sdk. While Linq 2 xml is really useful to makes query and find nodes in xml, I found it rather clumsy in my unit test code. Ex.&lt;/p>
&lt;p>I’m writing a test that must verify if my table class correctly generate the header. In openXml format the header is simply created with a w:tblHeader node in the first w:tr (the first row) element of a table. The unit test have this structure&lt;/p></description></item><item><title>LINQ2XMl and namespaces</title><link>https://www.codewrecks.com/post/old/2008/09/linq2xml-and-namespaces/</link><pubDate>Mon, 01 Sep 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/linq2xml-and-namespaces/</guid><description>&lt;p>In Xml namespace are used extensively to distinguish between tag names, you can use namespaces directly with XElement class thanks to the XNamespace class, here is an example.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>XNamespace ns = XNamespace.Get(&lt;span style="color:#e6db74">&amp;#34;http://www.nablasoft.com/mynamespace&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>XElement element = &lt;span style="color:#66d9ef">new&lt;/span> XElement(ns + &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> XElement(ns + &lt;span style="color:#e6db74">&amp;#34;Element&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> XElement(&lt;span style="color:#e6db74">&amp;#34;AnotherElement&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console.WriteLine(element.ToString());&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This code works but the output is quite clumsy.&lt;/p></description></item><item><title>Lambda Lover 8211 argument parser</title><link>https://www.codewrecks.com/post/old/2008/08/lambda-lover-argument-parser/</link><pubDate>Wed, 20 Aug 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/lambda-lover-argument-parser/</guid><description>&lt;p>There are a lot of situations where LINQ and Lambda expressions can make your code simpler to write and also simpler to read. Today I stumble across an extension of a really old project. This project pass one parameter to a function, and this parameter is a list of comma separated BlockName. Despite the business meaning of a BlockName, I need an extension that permits also to add specific parameters to the block name, so we decided to use a syntax like:&lt;/p></description></item><item><title>LINQ SingleOrDefault and NullObject</title><link>https://www.codewrecks.com/post/old/2008/08/linq-singleordefault-and-nullobject/</link><pubDate>Wed, 20 Aug 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-singleordefault-and-nullobject/</guid><description>&lt;p>Suppose you have this simple class (has no business meaning is valid only as example)&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> MyObject NullValue = &lt;span style="color:#66d9ef">new&lt;/span> MyObject() { Value = -&lt;span style="color:#ae81ff">100&lt;/span>, Name = String.Empty };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Int32 Value { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Greet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hey!! My value is &amp;#34;&lt;/span> + Value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>It is a simple class with two properties and a method Greet(). It use the &lt;a href="http://en.wikipedia.org/wiki/Null_Object_pattern">null object&lt;/a> pattern, because it defines an object with Value=-100 and Name=String.Empty as the NullValue. But how this object works with LINQ? Try this code:&lt;/p></description></item><item><title>LINQ and extending it with cross product</title><link>https://www.codewrecks.com/post/old/2008/08/linq-and-extending-it-with-cross-product/</link><pubDate>Wed, 13 Aug 2008 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-and-extending-it-with-cross-product/</guid><description>&lt;p>Linq to object is really useful in a lot of places around my daily code. This afternoon I have to setup some routine to do crossproduct of some objects. With the term cross product I mean having two set, one made by elements of type X and the other made by elements of type Y, all that I need is creating a new set that contains an element of type Z from every combination of these two set. As an example I want to write this simple piece of code.&lt;/p></description></item><item><title>LINQ ForEach for IEnumerableltTgt</title><link>https://www.codewrecks.com/post/old/2008/08/linq-foreach-for-ienumerablet/</link><pubDate>Wed, 13 Aug 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/linq-foreach-for-ienumerablet/</guid><description>&lt;p>It seems to me strange that LINQ does not define an extension method &lt;em>ForEach&lt;/em> to apply some Action&amp;lt;T&amp;gt; on an IEnumerable&amp;lt;T&amp;gt;. Array and List both have ForEach() method, and IEnumerable really miss it a lot, but fortunately implementing it is a matter of few lines of code.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IEnumerable&amp;lt;T&amp;gt; ForEach&amp;lt;T&amp;gt;(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span> IEnumerable&amp;lt;T&amp;gt; source, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Action&amp;lt;T&amp;gt; act)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">foreach&lt;/span> (T element &lt;span style="color:#66d9ef">in&lt;/span> source) act(element);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> source;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>I decided to make the ForEach&amp;lt;T&amp;gt; return the original list, so I can use with chaining in fluent interface, but you can also make it return void, thus restricting its use only at the end of a linq chain.&lt;/p></description></item><item><title>Get great amount of data with T-SQL for xml</title><link>https://www.codewrecks.com/post/old/2008/05/get-great-amount-of-data-with-t-sql-for-xml/</link><pubDate>Thu, 08 May 2008 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/get-great-amount-of-data-with-t-sql-for-xml/</guid><description>&lt;p>I’m creating some big xml files to test performance of linq to xml to make some PoC. I use simply the ForXml to extract data from Customer and Orders table of northwind database, The first Xml is 517 Kb, but I need really bigger file.&lt;/p>
&lt;p>The trick is simple I created another table called insertHelper that contain a single column, and I filled with numbers from 1 to 100:&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/05/image1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/05/image-thumb1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/05/image-thumb1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p></description></item><item><title>Linq to SQl Deferred or not</title><link>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-deferred-or-not/</link><pubDate>Wed, 23 Apr 2008 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-deferred-or-not/</guid><description>&lt;p>One of the most peculiar characteristic of Linq is Deferred execution, here is an example.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>IEnumerable&lt;span style="color:#f92672">&amp;lt;&lt;/span>Customer&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#66d9ef">c&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> context.Customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> &lt;span style="color:#66d9ef">c&lt;/span>.ContactName.StartsWith(&lt;span style="color:#e6db74">&amp;#34;Maria&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#66d9ef">c&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foreach (Customer &lt;span style="color:#66d9ef">c&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">result&lt;/span>) &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Id = {0} ContactName = {1}&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">c&lt;/span>.Id, &lt;span style="color:#66d9ef">c&lt;/span>.ContactName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecuteStatementInDb(&lt;span style="color:#e6db74">&amp;#34;UPDATE Customers Set ContactName = &amp;#39;Modified&amp;#39; where CustomerId = &amp;#39;ALFKI&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foreach (Customer &lt;span style="color:#66d9ef">c&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#66d9ef">result&lt;/span>) &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Id = {0} ContactName = {1}&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">c&lt;/span>.Id, &lt;span style="color:#66d9ef">c&lt;/span>.ContactName);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This sample create a linq to sql query to extract all customer from northwind database that has contact name that starts with Maria, then modify the record with ID=ALFKI and iterate again in the result, here is the output.&lt;/p></description></item><item><title>LINQ Manage the DataContext</title><link>https://www.codewrecks.com/post/old/2008/04/linq-manage-the-datacontext/</link><pubDate>Tue, 22 Apr 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-manage-the-datacontext/</guid><description>&lt;p>One of the most important stuff, when dealing with an orm, is to manage the lifecycle of the Context, call it Session in NHibernate or DataContext in Linq, the problem is the same. One of the most obvious solution is to store the Context in CallContext of System.Runtime.Remoting.Messaging object. This object permits to store object related to the current flow of execution, it is similar to store objects in thread local storage, but is not the same, it is in fact used to manage HttpContext in asp.net application, that is a multithread environment.&lt;/p></description></item><item><title>LINQ to Sql retrieving Entities with stored or custom SQL</title><link>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-retrieving-entities-with-stored-or-custom-sql/</link><pubDate>Sat, 19 Apr 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/linq-to-sql-retrieving-entities-with-stored-or-custom-sql/</guid><description>&lt;p>During Heroes launch in Ancona (Italy) one of my friend ask me if there is the possibility in LINQ to SQL to map a stored procedure to a method of an object and then have that method return Mapped Entities.&lt;/p>
&lt;p>Let’s give an asnwer to this question. The first thing to notice is that the DataContext is able to do this, you can for example creates a stored called GetGoldCustomer on northwind database, having this stored accept an integer parameter called @ordercount, and returns all field from customer for customer that had more than @ordercount orders. now you can simply drag and drop that stored into the surface of the DBML designer, this add a method to the context that calls the stored. If you drag the stored on the surface of Customer Object you are telling the designer that the result of the stored should be converted to Customer Entity Object, or you can change the return type whenever you want.&lt;/p></description></item><item><title>Entity Framework and Eager Load</title><link>https://www.codewrecks.com/post/old/2008/04/entity-framework-and-eager-load/</link><pubDate>Wed, 16 Apr 2008 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/entity-framework-and-eager-load/</guid><description>&lt;p>If you want to Eager Load a relation in entity framework, you can use the Include() method in LINQ to Entities, but the include is useful even With EntitySQl and object services, but the syntax is something that violates the principle of least surprise for me.&lt;/p>
&lt;p>I started with:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>ObjectQuery&lt;span style="color:#f92672">&amp;lt;&lt;/span>Department&lt;span style="color:#f92672">&amp;gt;&lt;/span> query &lt;span style="color:#f92672">=&lt;/span> conn.CreateQuery&lt;span style="color:#f92672">&amp;lt;&lt;/span>Department&lt;span style="color:#f92672">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;Select value d from Department AS d where d.Name = @name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query.&lt;span style="color:#66d9ef">Parameters&lt;/span>.&lt;span style="color:#66d9ef">Add&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> ObjectParameter(&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Economics&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query.Include(&lt;span style="color:#e6db74">&amp;#34;Course&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>It seems pretty reasonable to me, but this does not work, no eager fetch of any courses….after some minutes of perplexity I realized that the Include Method does return a query object……so the right way to eager fetch the Course collection is&lt;/p></description></item><item><title>Expression Tree Visualizer</title><link>https://www.codewrecks.com/post/old/2008/04/expression-tree-visualizer/</link><pubDate>Thu, 10 Apr 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/expression-tree-visualizer/</guid><description>&lt;p>Microsoft created for you an expression tree visualizer, it is contained into the &lt;a href="http://code.msdn.microsoft.com/csharpsamples/Release/ProjectReleases.aspx?ReleaseId=8">C# Samples&lt;/a> pack and it is very useful. The only thing that I do not like very much is that it give you too much information, and it is quite confused to really understand how the expression is formed. To address the problem I created another visualizer based on my expression tree dumper I made last month. You can install both visualizer as you can see from this picture&lt;/p></description></item></channel></rss>