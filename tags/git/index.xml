<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Codewrecks</title><link>https://www.codewrecks.com/tags/git/</link><description>Recent content in Git on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 02 Feb 2025 06:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Pill: Problems in Azure DevOps Pipelines due to Shallow Fetch</title><link>https://www.codewrecks.com/post/azdo/pills/shallow-fetch-pipeline/</link><pubDate>Sun, 02 Feb 2025 06:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/shallow-fetch-pipeline/</guid><description>&lt;p>In Azure DevOps, pipelines are a fundamental component for automating the build and release process. One of the key optimizations in these pipelines is the use of &lt;strong>shallow fetch when cloning repositories&lt;/strong>. Unlike a full clone, which downloads the entire history of the repository, a &lt;strong>shallow fetch retrieves only the specific commit needed for the build&lt;/strong>. This is a really welcomed feature, because repositories can contain years of history, or they can have &lt;strong>some big file committed by error in some older commit&lt;/strong>.&lt;/p></description></item><item><title>Azure DevOps Pills: Pull request template</title><link>https://www.codewrecks.com/post/azdo/pills/pull-request-template/</link><pubDate>Sun, 14 Nov 2021 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/pull-request-template/</guid><description>&lt;p>Azure DevOps is a really big product and sometimes there are really useful features that are poorly publicized and goes under the radar. One of these is &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-templates?view=azure-devops">Pull Request Templates&lt;/a>, a really useful feature that allows you &lt;strong>to specify markdown template for your pull requests&lt;/strong>.&lt;/p>
&lt;p>I do not want to go into technical details, you can find &lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/pull-request-templates?view=azure-devops">all instructions in official documentation&lt;/a> but I&amp;rsquo;d like to point out why this feature is so useful.&lt;/p></description></item><item><title>Determine version with GitVersion for a Python project</title><link>https://www.codewrecks.com/post/github/giversion-python-general/</link><pubDate>Sat, 04 Sep 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/giversion-python-general/</guid><description>&lt;p>Project used for this example can be found &lt;a href="https://github.com/alkampfergit/GitGraphAutomation">in GitHub&lt;/a>.&lt;/p>
&lt;p>In GitHub actions you can use .NET based tools, both in Windows and in Linux machines, to accomplish various tasks. I&amp;rsquo;m a great fan of GitVersion tool, used to determine a semantic versioning based on a Git repository that uses git-flow structure. Another nice aspect is that &lt;strong>GitHub action machines based on Linux comes with PowerShell core preinstalled, so I can use actions that comes from PowerShell gallery without any problems&lt;/strong> &amp;hellip; errr.. almost.&lt;/p></description></item><item><title>Generate Git graph with Gitgraph.js and Python</title><link>https://www.codewrecks.com/post/general/git-graph/</link><pubDate>Tue, 24 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/git-graph/</guid><description>&lt;p>&lt;a href="https://gitgraphjs.com/#0">GitGraph&lt;/a> is a nice library to create a graphic representation of Git log and the really nice aspect &lt;strong>is that it is widely used and produces picture that are easily recognized as Git History&lt;/strong>. It can basically work in many ways, but the easiest is importing commit as json in an HTML page.&lt;/p>
&lt;p>Thanks to very few lines of Python code I realized a simple POC that is able to use git log to extract log as json &lt;strong>then create an html page with extracted json that renders a simple png with the full history&lt;/strong>. You can find the project in &lt;a href="https://github.com/alkampfergit/GitGraphAutomation">Github&lt;/a> and it is really simple to use (just read the readme).&lt;/p></description></item><item><title>Azure DevOps Git repository options</title><link>https://www.codewrecks.com/post/old/2020/02/azure-devops-git-repository-options/</link><pubDate>Wed, 12 Feb 2020 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/02/azure-devops-git-repository-options/</guid><description>&lt;p>Azure DevOps is a big product and often users start using it without fully explore all the possibilities. As an example, when it is time to work with Git Repositories, users just create repositories and start working without any further configuration.&lt;/p>
&lt;p>&lt;strong>If you navigate to the Repos section of Project Settings page, you can configure lots of options for repositories.&lt;/strong> Security is probably the most important setting, because it determines who can access that specific repository and what permission each user / group has in the context of that very specific repository.&lt;/p></description></item><item><title>Git and the Hell of case sensitiveness</title><link>https://www.codewrecks.com/post/old/2018/12/git-and-the-hell-of-case-sensitiveness/</link><pubDate>Sat, 29 Dec 2018 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/git-and-the-hell-of-case-sensitiveness/</guid><description>&lt;p>If you know how git works, you are perfectly aware that, even if you work in operating systems with case insensitive file system, all commit are case sensitive. Sometimes if you change the case of a folder, then commit modification of files inside that folder, you will incur into problems, &lt;strong>because if casing of the path changes, the files are different for the Git Engine (but not for operating systems like windows).&lt;/strong> In the long run you will face some annoying problems, like git showing that some of the files are modified (while you didn’t touch them) and you are unable to undo changes or work with those files. This problem will become really annoying during rebase operations.&lt;/p></description></item><item><title>NullReferenceException in windows when Git fetch or pull</title><link>https://www.codewrecks.com/post/old/2018/10/nullreferenceexception-in-windows-when-git-fetch-or-pull/</link><pubDate>Fri, 12 Oct 2018 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/10/nullreferenceexception-in-windows-when-git-fetch-or-pull/</guid><description>&lt;p>After updating Git to newer 2.19.1. for windows, it could happen that you are not able to use anymore credential manager. The sympthom is, whenever you git fetch or pull, you got a NullReferenceException and or error  &lt;em>unable to read askpass response from ‘C:/Program Files/Git/mingw64/libexec/git-core/git-gui—askpass’&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>Git credential manager for Windows in version 2.19.1 could have some problem and generates a NullReference Exception&lt;/p>&lt;/blockquote>
&lt;p>Clearing Windows Credential Manager does not solves the problem, you still have the same error even if you clone again the repo in another folder. To fix this you can simply download and install the newest version of the Git Credential Manager for windows. You can find everything at &lt;a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases">this address.&lt;/a>&lt;/p></description></item><item><title>Configure Visual Studio 2017 155 for pull 8211rebase</title><link>https://www.codewrecks.com/post/old/2017/12/configure-visual-studio-2017-15-5-for-pull-rebase/</link><pubDate>Sat, 23 Dec 2017 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/12/configure-visual-studio-2017-15-5-for-pull-rebase/</guid><description>&lt;p>&lt;strong>I’m a great fan of rebasing over merge and I’m convinced that the default pull should be a fetch and rebase&lt;/strong> , using fetch and merge only when it is really needed. Not having the option to configure a GUI to do a pull –rebase is a really annoying problem, that can be somewhat limited configuring pull.rebase git option to true, as explained in &lt;a href="http://www.codewrecks.com/blog/index.php/2017/12/19/configure-git-repository-for-automatic-pull-rebase/">previous post&lt;/a>. Actually, the lack of rebase on pull option makes me stop using the IDE.&lt;/p></description></item><item><title>Configure Git repository for automatic pull 8211rebase</title><link>https://www.codewrecks.com/post/old/2017/12/configure-git-repository-for-automatic-pull-rebase/</link><pubDate>Tue, 19 Dec 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/12/configure-git-repository-for-automatic-pull-rebase/</guid><description>&lt;p>I’m not a great fan of Git Graphical User Interfaces, I use mainly command line, but I needed to admit that, &lt;strong>for novice user, the ability to use a GUI is something that can easy the pain of transition to a new tool&lt;/strong>. Visual Studio 2017 is a decent GUI for Git and since.NET developers are used to it, people want to stay as much as possible inside the IDE, leaving the commandline only for special operation (squash, reflog, etc)&lt;/p></description></item><item><title>Optimize your local git repository from time to time</title><link>https://www.codewrecks.com/post/old/2017/06/optimize-your-local-git-repository-from-time-to-time/</link><pubDate>Thu, 22 Jun 2017 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/optimize-your-local-git-repository-from-time-to-time/</guid><description>&lt;p>Git is an exceptional piece of software and I really cannot think living without it. Now &lt;strong>with superfast SSD, you can use git without performance problem&lt;/strong> even for large repositories (maybe you converted an old Subversion or TFVC).&lt;/p>
&lt;p>When your repository has thousands of object and especially if you adopt flows of work where you rebase often, probably your repository has large number of unnecessary object that can be deleted safely. &lt;strong>Git runs for you in the background a special command called&lt;/strong> &lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git gc&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p></description></item><item><title>Check pull request with build without enforcing pull request</title><link>https://www.codewrecks.com/post/old/2017/05/build-pull-requests-without-policies/</link><pubDate>Sat, 20 May 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/build-pull-requests-without-policies/</guid><description>&lt;p>With TFS / VSTS Build system it is possible to configure Git to require that a &lt;strong>specific branch is protected, and you need to use Pull Requests to push code into it, and the pull request can be accepted only if a specific build is green&lt;/strong>. Here is the typical configuration you can do in admin page for your Git repositories.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/05/image-3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/05/image_thumb-3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/05/image_thumb-3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Branch policies in VSTS/TFS&lt;/em>&lt;/p>
&lt;p>In &lt;strong>Figure 1&lt;/strong> it is represented the configuration for branch policies; in this specific configuration I require a specific build to run whenever a member create a pull request against develop branch. The effect is: &lt;strong>if a developer try to directly push to develop branch, the push is rejected&lt;/strong>.&lt;/p></description></item><item><title>Update GitVersion for large repositories</title><link>https://www.codewrecks.com/post/old/2017/04/update-gitversion-for-large-repositories/</link><pubDate>Sat, 22 Apr 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/04/update-gitversion-for-large-repositories/</guid><description>&lt;p>As you know I’m a fanatic user of &lt;a href="http://www.codewrecks.com/blog/index.php/2015/10/17/integrating-gitversion-and-gitflow-in-your-vnext-build/">GitVersion&lt;/a> in builds, and &lt;strong>I’ve&lt;/strong> &lt;a href="http://www.codewrecks.com/blog/index.php/2016/03/17/writing-a-custom-task-for-build-vnext/">&lt;strong>written a simple task&lt;/strong>&lt;/a> &lt;strong>to use it in a TFS Build automatically&lt;/strong>. This is the typical task that you write and forget, because it just works and you usually not have the need to upgrade it. But there is a build where I start to see really high execution timing for the task, as an example GitVersion needs 2 minutes to run.&lt;/p></description></item><item><title>Bash pornography</title><link>https://www.codewrecks.com/post/old/2017/01/bash-pornography/</link><pubDate>Wed, 18 Jan 2017 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/01/bash-pornography/</guid><description>&lt;p>Suppose you have two Git repositories that are in &lt;a href="http://www.codewrecks.com/blog/index.php/2016/10/22/keep-git-repository-in-sync-between-vsts-tfs-and-git/">sync with a VSTS build&lt;/a>, after some time the usual problem is that, branches that are deleted from the “main” repository are not deleted from mirrored repository.&lt;/p>
&lt;p>The reason is, &lt;strong>whenever someone does a push on main repository, VSTS build push the branch to the other repository&lt;/strong> , but when someone deleted a branch, there is no build triggered, so the mirrored repository still maintain all branches.&lt;/p></description></item><item><title>Keep Git repository in sync between VSTS TFS and Git</title><link>https://www.codewrecks.com/post/old/2016/10/keep-git-repository-in-sync-between-vsts-tfs-and-git/</link><pubDate>Sat, 22 Oct 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/keep-git-repository-in-sync-between-vsts-tfs-and-git/</guid><description>&lt;blockquote>
&lt;p>Scenario: you have a repository in Git, both open source or in private repository and you want to keep a synchronized mirror in VSTS / TFS.&lt;/p>&lt;/blockquote>
&lt;p>There are some legitimate reason to have a mirrored repository between Github or some external provider and an instance of VSTS / TFS, probably the most common one is &lt;strong>keeping all development of a repository private and publish in open source only certain branches.&lt;/strong> Another reason is having all the code in Github completely in open source, but internally use VSTS Work Item to manage work with all the advanced tooling VSTS has to offer.&lt;/p></description></item><item><title>Import a Git Project with REST API between VSTS Team Projects</title><link>https://www.codewrecks.com/post/old/2016/10/import-a-git-project-with-rest-api-between-vsts-team-projects/</link><pubDate>Sat, 08 Oct 2016 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/import-a-git-project-with-rest-api-between-vsts-team-projects/</guid><description>&lt;p>I’ve got an interesting question about the possibility to import via REST API a Git Repository between Team Projects of VSTS. Actually the problem is: **you want to import a private git repository from a &lt;em>Source repository&lt;/em>(in this situation is another VSTS git repository but it could be hosted everywhere) to a VSTS &lt;em>Target  repository&lt;/em> using only REST API. **The operation is quite simple thanks to the new api described here (&lt;a href="https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository" title="https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository">https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository&lt;/a>) and in this post I’ll give you all the details.&lt;/p></description></item><item><title>Git for windows getting Invalid username or password with Wincred</title><link>https://www.codewrecks.com/post/old/2015/06/git-for-windows-getting-invalid-username-or-password-with-wincred/</link><pubDate>Tue, 23 Jun 2015 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/git-for-windows-getting-invalid-username-or-password-with-wincred/</guid><description>&lt;p>If you use Https to communicate with your git repository, Es, Github or VisualStudioOnline, you usually &lt;strong>setup credential manager to avoid entering credential for each command that contact the server&lt;/strong>. With latest versions of git you can configure wincred with this simple command.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global credential.helper wincred&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This morning I start getting error while I’m trying to push some commits to GitHub.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: Invalid username or password.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: Authentication failed &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://github.com/ProximoSrl/Jarvis.DocumentS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">tore.git/&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>If I remove credential helper (git config –global credential.helper unset) everything works, git ask me for user name and password and I’m able to do everything, but as soon as I re-enable credential helper, the error returned. &lt;strong>This problem is probably originated by some corruption of stored credentials&lt;/strong> , and usually you can simply clear stored credentials and at the next operation you will be prompted for credentials and everything starts worked again. The question is, where are stored credential for wincred?&lt;/p></description></item><item><title>Monitor if your branch will generate merge conflicts with TFS Build</title><link>https://www.codewrecks.com/post/old/2014/11/monitor-if-your-branch-will-generate-merge-conflicts-with-tfs-build/</link><pubDate>Sat, 15 Nov 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/11/monitor-if-your-branch-will-generate-merge-conflicts-with-tfs-build/</guid><description>&lt;p>One of the &lt;strong>greatest advantage in using Git over a centralized Version Control System is branching system&lt;/strong>. It is quite common for developers to start branching whenever they need to add a new feature, work on that branch and finally merge back to mainline when the feature is finished. One of the most famous workflow is called &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/">GitFlow&lt;/a>, a way to work in Git that is implemented even in some GUI tool like &lt;a href="https://www.atlassian.com/software/sourcetree/overview?_mid=2fbd5293e6446891fb55a371fd05daeb&amp;amp;amp;gclid=Cj0KEQiAkJyjBRClorTki_7Zx8QBEiQAcqwGMVF9nzHt6HSZgIswbcYiWI4InUXsU_25Nq8vajSR7mIaAofw8P8HAQ">SourceTree&lt;/a>.&lt;/p></description></item><item><title>Git submodule update error Permission Denied Publickey</title><link>https://www.codewrecks.com/post/old/2014/08/git-submodule-update-error-permission-denied-publickey/</link><pubDate>Sun, 10 Aug 2014 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/08/git-submodule-update-error-permission-denied-publickey/</guid><description>&lt;p>It could happens when you clone a Git Repository with submodules, issuing a * &lt;strong>git submodule update&lt;/strong> *command, you are prompted with this error error.&lt;/p>
&lt;blockquote>
&lt;p>Cloning into ‘src/xxxx’…&lt;br>
Warning: Permanently added the RSA host key for IP address xxx.xxx.xxx.xxx to the list of known hosts.&lt;br>
Permission denied (publickey).&lt;br>
fatal: Could not read from remote repository.&lt;/p>&lt;/blockquote>
&lt;p>If you search in the internet for the cause of errors, you can find &lt;strong>some people suggesting that the url specified in.gitmodules file is wrong&lt;/strong> and should be changed, here is my.gitmodule&lt;/p></description></item><item><title>Git showing file as modified even if it is unchanged</title><link>https://www.codewrecks.com/post/old/2014/04/git-showing-file-as-modified-even-if-it-is-unchanged/</link><pubDate>Tue, 22 Apr 2014 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/04/git-showing-file-as-modified-even-if-it-is-unchanged/</guid><description>&lt;p>This is one annoying problem that happens sometimes to git users: the symptom is:* &lt;strong>git status&lt;/strong> *command shows you some files as modified (you are sure that you had not modified that files), you revert all changes with a * &lt;strong>git checkout —.&lt;/strong> *but the files stills are in modified state if you issue another * &lt;strong>git status&lt;/strong> *.&lt;/p>
&lt;p>This is a real annoying problem, suppose you want to switch branch with * &lt;strong>git checkout branchname&lt;/strong> *, you will find that git does not allow you to switch because of uncommitted changes.&lt;/p></description></item><item><title>Moving between different VCS to Team Foundation Server</title><link>https://www.codewrecks.com/post/old/2014/02/moving-between-different-vcs-to-team-foundation-server/</link><pubDate>Tue, 04 Feb 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/moving-between-different-vcs-to-team-foundation-server/</guid><description>&lt;p>In an old post I’ve already demonstrated how you can &lt;strong>move a project from a standard TFS Version Control System to a Git repository hosted on TF Service (or wherever else)&lt;/strong>. This is especially useful if you are working with TFS but you really need features of a Distributed Version Control System. The original post is here: m&lt;a href="http://www.codewrecks.com/blog/index.php/2013/01/31/move-a-tfservice-source-control-to-tf-service-git-based-team-project/">ove source from a TFVCS based Team Project to a TF Service Git Based Team Project&lt;/a>.&lt;/p></description></item><item><title>Git as a bridge between Subversion and TFS</title><link>https://www.codewrecks.com/post/old/2014/01/git-as-a-bridge-between-subversion-and-tfs/</link><pubDate>Wed, 01 Jan 2014 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/git-as-a-bridge-between-subversion-and-tfs/</guid><description>&lt;p>This is the scenario: &lt;em>Nablasoft company uses TFS with standard TFVC (TFS Version Control System) and needs to assign some of the work to some external Company (lets call it Acme), as an example developing for Android or iOs&lt;/em>. The simplest solution is giving Acme developers access to TFS server, but then Nablasoft should pay the CAL for Acme developers, moreover, Acme uses subversion and they do not want to use another VCS unless it is strictly necessary.&lt;/p></description></item><item><title>The beautiful world of Git-XXX</title><link>https://www.codewrecks.com/post/old/2013/10/the-beautiful-world-of-git-xxx/</link><pubDate>Thu, 31 Oct 2013 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/10/the-beautiful-world-of-git-xxx/</guid><description>&lt;h2 id="git-support-in-visual-studio">Git support in Visual Studio&lt;/h2>
&lt;p>Having Git Support in Visual Studio is something I like for a lot of reasons; one of the most important one is the ability to use a &lt;strong>local Git repository even if you work with Standard TFS Source Control or if you work with subversion&lt;/strong>. Usually Git includes a &lt;strong>Git svn utility that permits you to clone a subversion locally, use git locally and then finally push commit back to subversion&lt;/strong>. Microsoft also created a &lt;a href="http://gittf.codeplex.com/">Git-TF&lt;/a> java extension that permits you to clone locally a standard TFS Version Control folder. This means that basically you can use all local goodness of git even if the remote repository is TFVC or Subversion and thanks to VS Plugin you have an unified experience.&lt;/p></description></item><item><title>Associate Work Items to Git commit in TF Service with API Calls</title><link>https://www.codewrecks.com/post/old/2013/06/associate-work-items-to-git-commit-in-tf-service-with-api-calls/</link><pubDate>Tue, 18 Jun 2013 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/06/associate-work-items-to-git-commit-in-tf-service-with-api-calls/</guid><description>&lt;p>I’ve already blogged how to &lt;a href="http://www.codewrecks.com/blog/index.php/2013/02/02/tfs-api-to-associate-work-item-with-check-in-using-comment-tags/">associate Work Items with TFS Check-ins using tags in comment and a bunch of Api Calls&lt;/a>. This feature is now available for any TF Service based on Git, but someone asked me how can you accomplish this task with API. A possible scenario would be supporting &lt;strong>different type of comment syntax&lt;/strong> and in general to understand how this task can be accomplished though API.&lt;/p>
&lt;p>The code is really similar to the one I’ve posted in the other article, the only differences is comments are taken from Git commit and not from changeset checkins. The prerequisite is having a local git repository cloned from a TF Service Git based project, than we can simply iterate through all commits to identify comments containing pattern #wid, where wid is the work item id. Once a commit is identified we can &lt;strong>create&lt;/strong> &lt;strong>the link between the corresponding Work Item with some API calls&lt;/strong>.&lt;/p></description></item><item><title>Your configuration specifies to merge with the ref 8216master8217 from the remote but no such ref was fetched</title><link>https://www.codewrecks.com/post/old/2013/06/your-configuration-specifies-to-merge-with-the-ref-master-from-the-remote-but-no-such-ref-was-fetched/</link><pubDate>Sat, 08 Jun 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/06/your-configuration-specifies-to-merge-with-the-ref-master-from-the-remote-but-no-such-ref-was-fetched/</guid><description>&lt;p>A couple of times I encounter this error when I issue a command line pull of a Git repository hosted on TF Service:&lt;/p>
&lt;blockquote>
&lt;p>Your configuration specifies to merge with the ref ‘master’&lt;br>
from the remote, but no such ref was fetched.&lt;/p>&lt;/blockquote>
&lt;p>If you go to the.git folder and open the git &lt;em>config&lt;/em>file, I noticed the option tagopt set to –tags&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image7.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image_thumb10.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image_thumb10.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>I do not know if that option was setup from the initial Visual Studio clone option (VS Tools for git are still in beta) but removing it should fix the problem and you should be able to do a standard command line pull again&lt;/p></description></item><item><title>How to configure diff and Merge tool in Visual Studio Git Tools</title><link>https://www.codewrecks.com/post/old/2013/03/how-to-configure-diff-and-merge-tool-in-visual-studio-git-tools/</link><pubDate>Tue, 19 Mar 2013 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/how-to-configure-diff-and-merge-tool-in-visual-studio-git-tools/</guid><description>&lt;p>If you are using Visual Studio plugin for Git, but you have also configured Git with MSys git, probably you could be surprised by some Visual Studio behavior. The most obvious one is that commits are done using the wrong user.name and user.email configuration as I’ve described in &lt;a href="http://www.codewrecks.com/blog/index.php/2013/03/17/visual-studio-tools-for-git-a-primer/">Visual Studio Tools for Git, a primer,&lt;/a> other one can be: &lt;strong>tools used to do merge and diff during conflicts&lt;/strong>.&lt;/p>
&lt;p>Suppose you are working with Visual Studio, you issue a pull and find that there is some conflicts in repository.&lt;/p></description></item><item><title>Visual Studio Tools for Git a primer</title><link>https://www.codewrecks.com/post/old/2013/03/visual-studio-tools-for-git-a-primer/</link><pubDate>Sun, 17 Mar 2013 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/visual-studio-tools-for-git-a-primer/</guid><description>&lt;p>If you installed Update 2 CTP 4 (now it has go-live and supports upgrade to RTM) you should also &lt;strong>install the&lt;/strong> &lt;a href="http://visualstudiogallery.msdn.microsoft.com/abafc7d6-dcaa-40f4-8a5e-d6724bdb980c">&lt;strong>Visual Studio Tools for Git&lt;/strong>&lt;/a> &lt;strong>that permits to work with Git repository directly from a Team Explorer extension&lt;/strong>. You can work with GitHub or whatever Git hosting you like and surely you can work with TF Service Git based Team Project. Once you have a Team Project based on Git you can simply to to the Source tab, and grab the url of the repository.&lt;/p></description></item><item><title>Continuous integration in Team Foundation Service for Git based Team Project</title><link>https://www.codewrecks.com/post/old/2013/02/continuous-integration-in-team-foundation-service-for-git-based-team-project/</link><pubDate>Mon, 25 Feb 2013 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/02/continuous-integration-in-team-foundation-service-for-git-based-team-project/</guid><description>&lt;p>Some weeks are passed from the announcement of TF Service support to Git based Team Projects, and &lt;strong>Git is becoming first class citizen in the Team Foundation Server environment.&lt;/strong> Last week the latest update to TF Service &lt;strong>introduced the ability to&lt;/strong> &lt;a href="http://blogs.msdn.com/b/visualstudioalm/archive/2013/02/12/run-ci-builds-in-your-git-team-project.aspx">&lt;strong>create build for Git Based Repository&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>If you compare to a standard build (based on standard TFS Source control), Git based build is slightly different, the most important one is that &lt;strong>a single build can be used to build multiple branches&lt;/strong>. This feature is available due to the fundamental difference in how source control is organized in distributed source control system, that permits you to avoid the paradigm of “branch is a special copy of a folder”. In the build definition &lt;strong>you can specify a list of branches that you want to monitor with that build&lt;/strong>.&lt;/p></description></item><item><title>Remove git-tf tracked branch after a move from standard TF Service project to Git enabled project</title><link>https://www.codewrecks.com/post/old/2013/02/remove-git-tf-tracked-branch-after-a-move-from-standard-tf-service-project-to-git-enabled-project/</link><pubDate>Fri, 01 Feb 2013 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/02/remove-git-tf-tracked-branch-after-a-move-from-standard-tf-service-project-to-git-enabled-project/</guid><description>&lt;p>In a previous post called “&lt;a href="http://www.codewrecks.com/blog/index.php/2013/01/31/move-a-tfservice-source-control-to-tf-service-git-based-team-project/">Move a TFService source contorl to TF Service Git based Team Project&lt;/a>” I explained how to simple move sources from a standard TF Service project to another one based on Git. Now after a push if I issue a log I got this.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2013/02/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2013/02/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2013/02/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Origin_tfs/tfs branch in my log?&lt;/em>&lt;/p>
&lt;p>It seems that there is a remote branch called origin_tfs/tfs but it does not get listed in the list of remote branches from the Web Ui, this because that branch was related to git-tf operations.&lt;/p></description></item><item><title>Associate Work Items to check-in in a TF Service Git enabled repository</title><link>https://www.codewrecks.com/post/old/2013/01/associate-work-items-to-check-in-in-a-tf-service-git-enabled-repository/</link><pubDate>Thu, 31 Jan 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/01/associate-work-items-to-check-in-in-a-tf-service-git-enabled-repository/</guid><description>&lt;p>Even if we are still in preview, &lt;strong>Git support in TF Service already has some nice integration between git and all the rest of the world of TFS&lt;/strong>. As an example suppose you have a Work Item you are working to.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2013/01/image11.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2013/01/image_thumb11.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2013/01/image_thumb11.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Simple Work Item in web interface&lt;/em>&lt;/p>
&lt;p>Now suppose you &lt;strong>want to associate a local commit to this Work Item&lt;/strong> , all you need to do is &lt;strong>inserting hashtag followed by the id of the Work Item in the comment of the commit&lt;/strong> , es #437. Since we are in the first preview of Git support actually there is no UI support, but using a simple comment is really quick and simple.&lt;/p></description></item><item><title>Move a TFService source control to TF Service Git based Team Project</title><link>https://www.codewrecks.com/post/old/2013/01/move-a-tfservice-source-control-to-tf-service-git-based-team-project/</link><pubDate>Thu, 31 Jan 2013 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/01/move-a-tfservice-source-control-to-tf-service-git-based-team-project/</guid><description>&lt;p>Now that with Update 2 we have Git support on TF Service a standard question arise: “how can I move all source from a TF Service standard project to a TF Service Git based Team Project?” The answer is quite simple&lt;/p>
&lt;p>First of all you need to install and Configure &lt;a href="http://gittf.codeplex.com/">Git-Tf&lt;/a>, an addin that permits to clone a TFS source control in a local Git repository, this is needed to have a full local clone of the source project you want to migrate. Then you need to create a new Team Project in TFService that is based on a Git repository.&lt;/p></description></item><item><title>I do not like Git if you want blame me for this</title><link>https://www.codewrecks.com/post/old/2012/07/i-do-not-like-git-if-you-want-blame-me-for-this/</link><pubDate>Wed, 25 Jul 2012 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/i-do-not-like-git-if-you-want-blame-me-for-this/</guid><description>&lt;p>I did not like Git, it is a really personal opinion, but I work a really limited time on github project with some friend of mine and I always find surprise using git, surprises that never happened with other SCS (Hg, Subversion, TFS, etc).&lt;/p>
&lt;p>Today I modified a file in my working copy, but after some code I want to revert to the original version, so I issue the revert command with tortoise Git.&lt;/p></description></item></channel></rss>