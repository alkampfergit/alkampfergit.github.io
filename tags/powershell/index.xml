<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PowerShell on Codewrecks</title><link>https://www.codewrecks.com/tags/powershell/</link><description>Recent content in PowerShell on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Dec 2023 10:00:42 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/powershell/index.xml" rel="self" type="application/rss+xml"/><item><title>Running GitVersion in Azure DevOps pipeline with dontet tool</title><link>https://www.codewrecks.com/post/azdo/pipeline/gitversion-powershell/</link><pubDate>Mon, 11 Dec 2023 10:00:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pipeline/gitversion-powershell/</guid><description>For me, running GitVersion as part of a Pipeline is a golden standard. I barely remember a pipeline that does not use GitVersion as first task. The reason is simple, it allows me, at least, to give a better naming to build names. Instead of having meaningless date base number I have a semantic build that immediately gives me the idea of what was built.
At least GitVersion can give a better name to a build, so why not using it?</description></item><item><title>Return value in PowerShell, a typical error</title><link>https://www.codewrecks.com/post/general/powershell/powershell-return-value/</link><pubDate>Sat, 17 Apr 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell/powershell-return-value/</guid><description>When you create a function in PowerShell you need to remember that if you write output, this will be included in the returned value. This means that if you end your function with return $something you would not get only the content of the variable $something but every output that you did in the function.
For this reason you need to be super careful not to use Write-Output, because all the output will be included in the returned value.</description></item><item><title>How to handle errors in PowerShell script used in Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/general/powershell/pipeline-and-powershell-return-code/</link><pubDate>Sun, 15 Nov 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell/pipeline-and-powershell-return-code/</guid><description>Building with PowerShell or other scripting engine is a really nice option because you can reuse the script in almost any Continuous Integration engine with a minimal effort, but sometimes there are tools that causes some headache.
I had problem with tooling like yarn and npm when they are run in Azure DevOps pipeline, the problem is that when the tool emit a warning, pipeline engine consider it an error and make the build fails.</description></item><item><title>Automatic publish PowerShell Gallery with GitHub Actions</title><link>https://www.codewrecks.com/post/general/powershell-gallery-publish/</link><pubDate>Mon, 26 Oct 2020 18:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell-gallery-publish/</guid><description>Publishing PowerShell helper functions to PowerShell gallery is a good solution to maximize reuse on Build and general Scripting for DevOps mundane tasks. On this GitHub repository I&amp;rsquo;ve put some simple build utilities that can be published on PowerShell gallery.
To streamline the process I&amp;rsquo;ve decided to automate publish process with GitHub actions, because this is the typical scenario where GH Actions shine. First of all I&amp;rsquo;ve reorganized my sources to create a single PowerShell file for each function, then I&amp;rsquo;ve found this excellent post that explain how to combine all files into a unique file to maximize performances.</description></item><item><title>Set ip of WSL2 machine in host file</title><link>https://www.codewrecks.com/post/general/powershell/wsl2-set-ip-in-hosts/</link><pubDate>Sat, 01 Aug 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell/wsl2-set-ip-in-hosts/</guid><description>I have a WSL2 ubuntu installation where I have SAMBA installed and I really need it to answer to a specific name, something like \ubuntuwsl.
In WSL2 the machine got its IP assigned from Hyper-V so it is dynamic and change at each reboot
To solve this problem it is interesting to look on how you can interact to your WSL2 distribution from PowerShell, this exercise will show you how powerful WSL2 is.</description></item><item><title>How to locate most recent MSBuild.exe using PowerShell</title><link>https://www.codewrecks.com/post/general/find-msbuild-location-in-powershell/</link><pubDate>Sun, 26 Jul 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/find-msbuild-location-in-powershell/</guid><description>If you want to build a Full Framework based project from PowerShell, you need to locate MsBuild.exe tool tool to compile your project. You can indeed &amp;ldquo;open developer command prompt&amp;rdquo; to have a CommandLine with all needed tools in the %PATH%, but if you want to create a generic PowerShell script that uses MsBuild, knowing its location is probably a must.
There are some solutions in the internet, but I&amp;rsquo;ve found a nice module called VSSetup that can helps locating MsBuild because it gives you interesting information for every version of Visual Studio installed in the system (from VS2017 and subsequent versions).</description></item><item><title>Publish PowerShell functions to PowerShell Gallery</title><link>https://www.codewrecks.com/post/general/powershell-gallery/</link><pubDate>Sun, 28 Jun 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/powershell-gallery/</guid><description>I&amp;rsquo;m a great fan of PowerShell script for build and release, even if Azure DevOps, GitHub Actions, TeamCity or Jenkins have pre-made task for common operations (zipping, file handling, etc). I always like using PowerShell scripts to do most of the job and the reason is simple: PowerShell scripts are easy to test, easy to understand and are not bound to a specific CI/CD engine.
Since I&amp;rsquo;m not a real PowerShell expert, during the years I&amp;rsquo;ve made some functions I reuse across projects, but I didn&amp;rsquo;t organize them, leading to some confusion over the years.</description></item><item><title>Publish a website available only in some branches with VSTS build</title><link>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</link><pubDate>Mon, 03 Jul 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</guid><description>I have several builds that publish some web projects using standard msbuild task. Here is a sample configuration.
Figure 1: Publishing a web site with msbuild task.
This is super simple thanks to MsBuild task and a bit of MSBuild arguments, but quite often I face an annoying problem: what about a new project that lives only on certain branches, but I need to publish in the build only if exists?</description></item><item><title>Troubleshoot a failing build a Winrm story</title><link>https://www.codewrecks.com/post/old/2017/06/troubleshoot-a-failing-build-a-winrm-story/</link><pubDate>Sat, 03 Jun 2017 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/troubleshoot-a-failing-build-a-winrm-story/</guid><description>Many VSTS build and deploy tasks are based on Winrm to operate on a remote machine , one of the most common is the “Deploy Test Agent on” that will install a test agent on a remote machine.
Figure 1: Task to install a TestAgent on a different machine
If you are not in a domain Winrm can be a really thought opponent, especially because the target machine is not part of the same domain and is not trusted.</description></item><item><title>Run Pester in VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/05/run-pester-in-vsts-build/</link><pubDate>Sun, 28 May 2017 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/run-pester-in-vsts-build/</guid><description>I’m not a great expert of PowerShell, but during last years I’ve written some custom utilities I’m using for various projects. The main problem is that I’ve scattered all these scripts on multiple projects and usually I need time to find the latest version of a script that does X.
Scattering PowerShell scripts all around your projects lead to error and a maintenance nightmare
To avoid this problem, the obvious solution is starting a consolidation of PowerShell scripts and the obvious location is a Git repository hosted in VSTS.</description></item><item><title>How to manage PowerShell installation scripts</title><link>https://www.codewrecks.com/post/old/2016/06/how-to-manage-powershell-installation-scripts/</link><pubDate>Sat, 18 Jun 2016 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/how-to-manage-powershell-installation-scripts/</guid><description>In previous post I explained how I like to release software using a simple paradigm:
build produces one zipped file with everything needed for a release, then a PowerShell scripts accepts the path of this zipped release and installation parameters and executes every step to install/upgrade the software.
This approach has numerous advantages, first of all you can always test script with PowerShell ISE in a Developer Machine. Just download from build artifacts the version you want to use for test, load installation script in PowerShell ISE, then run the script, and if something went wrong (the script has a bug or needs to be updated) just debug and modify it until it works.</description></item><item><title>Using PowerShell scripts to deploy your software</title><link>https://www.codewrecks.com/post/old/2016/06/using-powershell-scripts-to-deploy-your-software/</link><pubDate>Fri, 03 Jun 2016 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/using-powershell-scripts-to-deploy-your-software/</guid><description>I often use PowerShell scripts to package a “release” of a software during a build because it gives me a lots of flexibility.
Manage artifacts with TFS Build vNext
Different approaches for publishing Artifacts in build vNext
The advantage of using PowerShell is complete control over what will be included in the “release” package. This allows you to manipulate configuration files, remove unnecessary files, copy files from somewhere else in the repository, etc etc.</description></item><item><title>Avoid using Shell command in PowerShell scipts</title><link>https://www.codewrecks.com/post/old/2016/05/avoid-using-shell-command-in-powershell-scipts/</link><pubDate>Fri, 27 May 2016 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/avoid-using-shell-command-in-powershell-scipts/</guid><description>I have setup scripts that are used to install software, they are simply based on this paradigm
The build produces a zip file that contains everything needed to install the software, then we have a script that accepts the zip file as parameter as well as some other parameters and does install sofwtare on a local machine
This simple paradigm is perfect, because we can manually install a software launching powershell, or we can create a Chocolatey package to automate the installation.</description></item><item><title>How to Deploy Web Site with PowerShell DSC</title><link>https://www.codewrecks.com/post/old/2014/06/how-to-deploy-web-site-with-powershell-dsc/</link><pubDate>Wed, 11 Jun 2014 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/06/how-to-deploy-web-site-with-powershell-dsc/</guid><description>I do not want to create another tutorial on DSC and I suggest you reading some introductory articles like: Introducing PowerShell Desired State Configuration before reading this article. Since I’m pretty new with PowerShell and I’m starting experimenting with DSC I decided to start creating a script to deploy my favorite test application (TailspinToys :) ) on a single Windows 2012 R2 server using only DSC. This post aims to share my thought on the subject.</description></item><item><title>Automatically Deploy PowerShell modules to Build Agents in TFS</title><link>https://www.codewrecks.com/post/old/2014/02/automatically-deploy-powershell-modules-to-build-agents-in-tfs/</link><pubDate>Fri, 21 Feb 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/automatically-deploy-powershell-modules-to-build-agents-in-tfs/</guid><description>I’ve done some blog post on customizing TFS Build with PowerShell scripts and the very first question I got from this approach is
How can I store some PowerShell modules “somewhere” and have them available for all Build Agents?
This is a real good question, but sadly enough it has no out-of-the-box answer. Luckily enough you can solve this with a little bit of PowerShell knowledge. Please be aware that this solution is based on some assumption on how TFS build actually works and is not guaranteed to be stable in the future , but I’d like to share with you all if you want to try into your environment.</description></item></channel></rss>