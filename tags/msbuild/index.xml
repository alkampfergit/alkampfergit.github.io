<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Msbuild on Codewrecks</title><link>https://www.codewrecks.com/tags/msbuild/</link><description>Recent content in Msbuild on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 23 Sep 2014 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/msbuild/index.xml" rel="self" type="application/rss+xml"/><item><title>Publishing web project on disk during build</title><link>https://www.codewrecks.com/post/old/2014/09/publishing-web-project-on-disk-during-build/</link><pubDate>Tue, 23 Sep 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/09/publishing-web-project-on-disk-during-build/</guid><description>&lt;p>During a build you can ask MsBuild to deploy on build using the switch /p:DeployOnBuild=true as I &lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/05/deploying-on-azure-web-sites-from-on-premise-tfs/">described in previous posts&lt;/a>. This is mainly used to deploy the site on IIS thanks to WebDeploy, but you can also use WebDeploy to deploy on a disk path. The problem is that the path is stored in publication settings file, &lt;strong>but what about changing that path during a Build&lt;/strong> ?&lt;/p>
&lt;p>The answer is simple, you can use the /p:publishUrl=xxx to override what is specified inside the publication file and choose a different directory for deploy. Es.&lt;/p></description></item><item><title>error MSB3147 Could not find required file 8216setupbin8217 in</title><link>https://www.codewrecks.com/post/old/2014/05/error-msb3147-could-not-find-required-file-setup-bin-in/</link><pubDate>Sat, 31 May 2014 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/05/error-msb3147-could-not-find-required-file-setup-bin-in/</guid><description>&lt;p>I got this error from a powershell script when I call MsBuild.exe to publish a ClickOnce project in a TFS Build, the exact error is.&lt;/p>
&lt;blockquote>
&lt;p>error MSB3147: Could not find required file ‘setup.bin’ in …&lt;/p>&lt;/blockquote>
&lt;p>This is not the first time I encounter this error and &lt;strong>it is usually caused by missing.NET SDK&lt;/strong>. The strange fact is that I have both VS 2013 and Windows SDK already installed in the machine hosting the build agent. Then &lt;strong>I manualy added the registry key where MsBuild is looking for the bootstrapper&lt;/strong>. In the original registry, the GenericBootstrapper has only the 12.0 entry, and I added 4.0 and 4.5 for other framework version. But this is really strange because I never had to do this manually in the past.&lt;/p></description></item><item><title>Take control of assembly numbering during a tfs build</title><link>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</link><pubDate>Fri, 21 Aug 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</guid><description>&lt;p>One of the most important stuff in a project build, is &lt;em>the ability to mark the assemblies with unique numbers that permits us to reproduce the build&lt;/em>. Tfs does not have a standard way of doing this, but with a couple of MsBuild actions it is really simple to overcome this limitation. This is a good example that shows how you can extend build script to do complex task.&lt;/p>
&lt;p>First of all I want to change only &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblyfileversionattribute.aspx">AssemblyFileVersion&lt;/a> and not the AssemblyVersion, in this way all builds are compatible until someone manually changes AssemblyVersion. A standard technique I like very much is letting the programmers to &lt;em>manage major and minor number manually&lt;/em>, and &lt;em>letting my builds generates build and revision ones&lt;/em>. For build number I want to be able to generate a unique number each build, a sequential generator will be fine; but for revision number I want to use the changeset used to generate the build. To accomplish this we need essentially four macro steps.&lt;/p></description></item><item><title>Writing extension for Msbuild</title><link>https://www.codewrecks.com/post/old/2009/08/writing-extension-for-msbuild/</link><pubDate>Sat, 01 Aug 2009 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/writing-extension-for-msbuild/</guid><description>&lt;p>&lt;a href="http://msdn.microsoft.com/en-us/library/ms171452.aspx">Msbuild&lt;/a> is microsoft build engine, and I showed &lt;a href="http://www.codewrecks.com/blog/index.php/2009/07/06/tfs-web-access-and-some-tinyurl-magic-to-signal-test-failure/">some time&lt;/a> ago how you can write a custom task to post in twitter the outcome of a build result. Now it is time to give a greater focus on how to write a good task.&lt;/p>
&lt;p>Creating a Task is a simple matter of inheriting from the &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx">Task&lt;/a> class but there are some key points you should keep in mind, first of all you should never throw an exception when executing the task, except for some specific system exception like  &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx">OutOfMemoryException&lt;/a> or &lt;a href="http://msdn.microsoft.com/en-us/library/microsoft.build.utilities.task.aspx">StackOverflowException&lt;/a>, then you should provide good logs to make simple for the user of your task to understand causes of failures.&lt;/p></description></item><item><title>Comparison between nant and msbuild</title><link>https://www.codewrecks.com/post/old/2009/07/comparison-between-nant-and-msbuild/</link><pubDate>Fri, 10 Jul 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/comparison-between-nant-and-msbuild/</guid><description>&lt;p>You can find at &lt;a href="http://channel9.msdn.com/wiki/msbuild/equivalenttasks/">this link&lt;/a>, a table that compare nant tasks with msbuild tasks. If you look at this table it seems that msbuild lacks a lot of things, but actually there are specific visual studio tasks that have no equivalent in nant, like those one for tfs (open issue etc), publishing with clickonce, run a data generation plan and many more.&lt;/p>
&lt;p>In the end msbuild is a great product, but probably it lacks a little on some basic tasks like XML manipulation with xmlpeek and xmlpoke.&lt;/p></description></item></channel></rss>