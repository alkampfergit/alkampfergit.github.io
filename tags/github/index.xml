<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on Codewrecks</title><link>https://www.codewrecks.com/tags/github/</link><description>Recent content in Github on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 28 Feb 2025 06:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>SonarCloud analysis in GitHub Actions</title><link>https://www.codewrecks.com/post/github/github-sonarcloud-docker/</link><pubDate>Fri, 28 Feb 2025 06:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-sonarcloud-docker/</guid><description>&lt;p>Running Sonar Cloud analysis on your open source project is usually a good thing, it is free, it &lt;strong>gives you tons of useful information&lt;/strong> and you can automate everything for free with &lt;strong>GitHub Actions&lt;/strong>.&lt;/p>
&lt;p>I&amp;rsquo;ve dealt with this ckind of functinoality before in my blog, today I want just to show how to create a GH action that works in linux, because usually if you &lt;strong>take the original action from SonarCloud site it will use a windows machine for building&lt;/strong>.&lt;/p></description></item><item><title>GitHub Copilot Workspace: first impression</title><link>https://www.codewrecks.com/post/ai/gh-copilot-workspace-first-impression/</link><pubDate>Thu, 13 Jun 2024 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/ai/gh-copilot-workspace-first-impression/</guid><description>&lt;p>I have the luck to have enabled the technical preview of &lt;a href="https://github.blog/2024-04-29-github-copilot-workspace/">Github Copilot Workspace&lt;/a>. As every good developer, I immediately jump at it, without reading anything (spoiler you have a good &lt;a href="https://github.com/githubnext/copilot-workspace-user-manual">user manual&lt;/a>) that can be used to &lt;strong>move your first steps into this marvelous world&lt;/strong>. Not reading the documentation is for me a good way to start using it and verify &lt;strong>how intuitive is the tool and what it can do into a real project&lt;/strong>.&lt;/p></description></item><item><title>GitHub action with ElasticSearch integration tests and SonarCloud</title><link>https://www.codewrecks.com/post/github/action-with-elastic-and-sonarcloud/</link><pubDate>Tue, 23 Apr 2024 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/action-with-elastic-and-sonarcloud/</guid><description>&lt;p>I blogged in the past on how you can Analyze you code with SonarCloud &lt;a href="https://www.codewrecks.com/post/github/github-sonarcloud-codecoverage/">in a GitHub action&lt;/a>. Things changed a little in the latest year but in this post I want to examine a different aspect &lt;strong>running tests that rely on external service, like ElasticSearch&lt;/strong>. Running integration test in GH action is a little more complex than running unit tests, because you need to &lt;strong>setup the environment but thanks to docker usually this can be done with a little effort&lt;/strong>.&lt;/p></description></item><item><title>GitHub Secrets Scanning and Push Prevention</title><link>https://www.codewrecks.com/post/github/secrets-scanning/</link><pubDate>Thu, 04 Jan 2024 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/secrets-scanning/</guid><description>&lt;p>The risk of inadvertently including secrets in your Git repository has significantly increased in recent years. &lt;code>GitGuardian&lt;/code>, a company providing solutions to prevent secret leakage in repositories, reports astonishing numbers regarding the quantity of secrets leaked in Git repositories. &lt;a href="https://www.gitguardian.com/state-of-secrets-sprawl-report-2023">State of Secrets Sprawl Report 2023&lt;/a>&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/secrets-some-numbers.png"> &lt;img src="../images/secrets-some-numbers.png" alt="More than 10 million secrets leaked, and the number raises every year" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>More than 10 million secrets leaked, and the number raises every year&lt;/em>&lt;/p></description></item><item><title>Allow easy source debugging for Nuget Packages and GitHub</title><link>https://www.codewrecks.com/post/github/allow-source-debugging-for-nuget-packages/</link><pubDate>Sun, 31 Dec 2023 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/allow-source-debugging-for-nuget-packages/</guid><description>&lt;p>In my previous blog posts, I&amp;rsquo;ve extensively discussed how to &lt;strong>publish symbol libraries for .NET in Azure DevOps / Team Foundation Server&lt;/strong>. Azure DevOps has supported symbol server functionalities for a considerable time, making it straightforward to add steps in your build process for indexing your source code. This capability enables you to &lt;strong>publish your .NET libraries to either an internal or public NuGet feed and facilitates stepping into the original source code for debugging directly within Visual Studio.&lt;/strong>&lt;/p></description></item><item><title>Always use rebase when you pull in Git</title><link>https://www.codewrecks.com/post/github/git-pull-rebase/</link><pubDate>Sun, 31 Dec 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/git-pull-rebase/</guid><description>&lt;p>I have always suggested people to only use rebates when you pull changes from the branch you are working on in git. And this because, actually, using merge will make your repository history a mess.&lt;/p>
&lt;p>For a lot of years, this kind of suggestion was not so common. I&amp;rsquo;ve always looked at the teams happily used merge and then complain about how difficult is to read the story of the repository. At a certain moment, get added a nice option that changed the default strategy of reconciled modification when you pull. And instead of using standard merge, you can configure to use rebase.&lt;/p></description></item><item><title>Resolving Credential Conflicts in Git</title><link>https://www.codewrecks.com/post/github/pills/multiple-credentials-in-credential-manager/</link><pubDate>Fri, 21 Jul 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/github/pills/multiple-credentials-in-credential-manager/</guid><description>&lt;p>Have you ever found yourself being asked to &lt;strong>select a GitHub account every time you make a push&lt;/strong>? This is often due to multiple access tokens being stored in your Windows credential manager.&lt;/p>
&lt;p>The Git Credential Manager can become confused when it doesn&amp;rsquo;t know which account to use. It&amp;rsquo;s only option in these situations is to ask you which of the stored credentials it should utilize.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/select-account.png"> &lt;img src="../images/select-account.png" alt="Command line interface suddenly opens a window asking you to select accounts" />&lt;/a>&lt;/p></description></item><item><title>Using GitHub Command Line Tool to View Pull Request Info</title><link>https://www.codewrecks.com/post/github/pills/gh_command_line_tool/</link><pubDate>Thu, 20 Jul 2023 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/github/pills/gh_command_line_tool/</guid><description>&lt;p>For people like me who prefer using Git in the command line, there are times when I need to retrieve information about pull requests or other GitHub related tasks. For example, suppose &lt;strong>I need to share a link to a pull request that is under review with one of my colleagues for them to comment on&lt;/strong>. Sure, I could navigate to the GitHub website, locate the repository, navigate to the pull request page and get the link. But, since I&amp;rsquo;m already in the command line, I&amp;rsquo;d prefer a faster way.&lt;/p></description></item><item><title>GitHub Copilot-X in action: Steps instructions in a single prompt</title><link>https://www.codewrecks.com/post/github/copilot-few-shot-part-2/</link><pubDate>Sat, 20 May 2023 07:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-few-shot-part-2/</guid><description>&lt;p>If you look at &lt;a href="https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/">previous post on the subject&lt;/a> &lt;strong>I&amp;rsquo;m experimenting with Copilot Chat to have it automate mundane, repetitive operation&lt;/strong> but that can operate on complex classes. In previous example I demonstrated how you can decompose a complex operation in multiple steps, actually guiding Copilot towards desired result.&lt;/p>
&lt;blockquote>
&lt;p>Now the question is: Once you got it right, is it possible to use a single prompt to have desired result?&lt;/p>&lt;/blockquote>
&lt;p>Well the answer is &lt;strong>it depends&lt;/strong>. It is not simple because the AI needs to perform an intermediate series of steps and the result can:&lt;/p></description></item><item><title>GitHub Copilot-X in action: generation of test object with random data</title><link>https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/</link><pubDate>Sat, 20 May 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-x-few-shot-prompt/</guid><description>&lt;p>In real world software you often have complex classes, in this situation we have &lt;strong>AtomicReadmodels in a project heavily based on Event Sourcing&lt;/strong>. One challenge they present is the presence of only private setters for all properties - a necessity due to the unconventional nature of these classes, &lt;strong>which rely on parsing domain events for property population&lt;/strong>. This results in difficulties when creating test classes in memory during unit testing, as the private setters block external code from setting properties. Reflection or usage of libraries such as &lt;strong>Fasterflect are usually the solution but not without any annoyances&lt;/strong>.&lt;/p></description></item><item><title>Unleashing the Power of Copilot in Visual Studio for Exception Handling</title><link>https://www.codewrecks.com/post/github/unleashing-the-power-of-copilot-in-visual-studio-for-exception-handling.md/</link><pubDate>Fri, 12 May 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/unleashing-the-power-of-copilot-in-visual-studio-for-exception-handling.md/</guid><description>&lt;p>While running a program, when an exception occurs, sometimes it&amp;rsquo;s easy to figure out what caused it. Other times, it can be more complex, &lt;strong>especially in the case of unique exceptions you might not be familiar with&lt;/strong>. Here, having Copilot chat inside Visual Studio offers an extra gear. Within the exception menu, we now have an option that allows us to ask Copilot for information on that specific exception.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/exception-copilot-1.png"> &lt;img src="../images/exception-copilot-1.png" alt="Copilot AI Assistant in exception box" />&lt;/a>&lt;/p></description></item><item><title>GitHub Copilot-X in action: simple code conversion</title><link>https://www.codewrecks.com/post/github/copilot-x-chat-rewrite/</link><pubDate>Tue, 09 May 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/copilot-x-chat-rewrite/</guid><description>&lt;p>New &lt;a href="https://github.com/features/preview/copilot-x">Copilot X&lt;/a> from &lt;a href="https://github.com">GitHub&lt;/a> is the next big thing for programmers, because it &lt;strong>brings the power of copilot to the next level&lt;/strong>. Actually I&amp;rsquo;m testing the integrated chat in Visual Studio and Visual Studio Code. The tool is not always perfect, but we really need to understand how and where to use it to gain maximum advantage.&lt;/p>
&lt;p>We often encounter &lt;strong>conversion operations&lt;/strong> that are very mechanical, boring, and prone to errors due to their repetitiveness. When programming, we are very focused when doing something interesting, but when we perform simple operations, such as trivial conversions, we often make mistakes because our mind is elsewhere. Consider the following situation: you have an &lt;strong>aspnet core controller that needs to be converted to a server-side Blazor component&lt;/strong>.&lt;/p></description></item><item><title>Troubleshooting GitHub Codespaces PGP Signing Problems</title><link>https://www.codewrecks.com/post/github/codespaces-troubleshooting/</link><pubDate>Thu, 13 Apr 2023 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-troubleshooting/</guid><description>&lt;p>If you use &lt;strong>GPG keys&lt;/strong> to verify your commits, you&amp;rsquo;ll be glad to know that in &lt;strong>GitHub Codespaces&lt;/strong>, signing is done automatically. All you need to do is &lt;strong>configure the settings&lt;/strong> in your account, and a key will be injected into your Codespaces. As a result, every commit you make in your Codespace will be automatically signed and verified.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/pgp-codespace.png"> &lt;img src="../images/pgp-codespace.png" alt="Configure PGP in codespace" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Configure PGP in codespace&lt;/em>&lt;/p></description></item><item><title>Develop locally with GitHub Codespaces and Hugo</title><link>https://www.codewrecks.com/post/github/codespaces-hugo-local/</link><pubDate>Thu, 12 Jan 2023 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-hugo-local/</guid><description>&lt;p>I really love &lt;a href="https://www.codewrecks.com/post/github/codespaces-hugo/">Using Hugo and Codespaces to write blog posts&lt;/a>, I&amp;rsquo;ve a really better blogging experience &lt;strong>than wordpress, because I have a simple blog, quick to load, no frills no fuzzes, just a simple blog&lt;/strong>. Using Codespaces is really nice experience and I really never wrote a blog post in my Windows machine until yesterday.&lt;/p>
&lt;p>Yesterday I simply opened my blog repository inside a local instance of Visual Studio Code, but I had a &lt;strong>nasty surprise when I tried to start hugo server&lt;/strong>.&lt;/p></description></item><item><title>GitHub issue templates</title><link>https://www.codewrecks.com/post/github/github-issue-templates/</link><pubDate>Sat, 22 Jan 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-issue-templates/</guid><description>&lt;p>After Microsoft acquisition of GitHub there is some bit of confusion on what to use: Azure DevOps or GitHub for your new projects? Actually the answer &lt;strong>is somewhat complex, but the most honest response is to use whatever of the two you find more adherent on how you work&lt;/strong>.&lt;/p>
&lt;p>The most different part is the issue/board part, because they are very different on the two products, with very different capabilities and very different basic concepts. While Azure DevOps enforce a complex tracking with &lt;strong>explicit WorkItem types and custom fields&lt;/strong>, GitHub does use a &lt;strong>flat approach to the problem using only Issues with labels and few fields&lt;/strong>.&lt;/p></description></item><item><title>GitHub actions templates</title><link>https://www.codewrecks.com/post/github/github-actions-templates/</link><pubDate>Fri, 07 Jan 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-actions-templates/</guid><description>&lt;p>GitHub Actions are closing the gap with Azure DevOps pipelines day by day, one of the features introduces months ago was &lt;strong>Action templates, the ability to re-use actions definitions between repositories&lt;/strong>. You can read all the detail in &lt;a href="https://docs.github.com/en/actions/learn-github-actions/creating-starter-workflows-for-your-organization">Official GitHub documentation&lt;/a>.&lt;/p>
&lt;p>Templates are really useful because usually, in one organization, you tend to &lt;strong>use a restricted set of technologies with the very same set of actions to perform to build and release the code&lt;/strong>. You already know that I&amp;rsquo;m a fan of build in PowerShell or other scripting engine, but for simple project, you can simply rely on GitHub actions without resorting to any scripting language.&lt;/p></description></item><item><title>GitHub Actions permission settings</title><link>https://www.codewrecks.com/post/github/action-permission/</link><pubDate>Sat, 27 Nov 2021 06:00:00 +0000</pubDate><guid>https://www.codewrecks.com/post/github/action-permission/</guid><description>&lt;p>Continuous integration is absolutely vital for a healthy software project, but in many situation &lt;strong>people gave little attention to security&lt;/strong>. If you are running CI workflows in your machine where &lt;strong>you control the code that is build and every script that is run by CI engine, you are pretty fine&lt;/strong>. In that scenario an attacker should take control of your code to run some malicious script during a CI run, but if you are using a third party task/extension/action, the situation is different.&lt;/p></description></item><item><title>Analyze Python project with SonarCloud and GitHub</title><link>https://www.codewrecks.com/post/github/python-sonarcloud-actions/</link><pubDate>Sat, 28 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/python-sonarcloud-actions/</guid><description>&lt;p>SonarCloud is free for Open Source projects, and for languages like Python, that does not need compilation, it can directly &lt;strong>analyze the repository without any intervention from the author.&lt;/strong> This feature is automatically enabled when you setup your Project in SonarCloud and it determines that you have not compiled language.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/sonar-cloud-analysis.png"> &lt;img src="../images/sonar-cloud-analysis.png" alt="Analysis configuration shows that in this project we have CI analysis" />&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Analysis configuration shows that in this project we have CI analysis&lt;/em>&lt;/p></description></item><item><title>Configure Codespaces for Python projects</title><link>https://www.codewrecks.com/post/github/codespaces-python/</link><pubDate>Thu, 26 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-python/</guid><description>&lt;p>One of the great advantage of Codespaces is the ability &lt;a href="https://www.codewrecks.com/post/github/configuring-codespaces/">to preconfigure the environment&lt;/a> so you do not need to &lt;strong>waste time installing and configuring your toolchain&lt;/strong>. Python is a perfect example of this scenario, I&amp;rsquo;ve a small project &lt;a href="https://github.com/alkampfergit/GitGraphAutomation">to generate Git Graph Representation&lt;/a> and since I&amp;rsquo;m not a full time Python developer, I&amp;rsquo;ve not it installed and perfectly configured in all of my environment. Also I primarily work on Windows, so &lt;strong>Codespaces allows me to test everything on Linux with a single click&lt;/strong>.&lt;/p></description></item><item><title>Configure Codespaces for a real project</title><link>https://www.codewrecks.com/post/github/configuring-codespaces/</link><pubDate>Fri, 20 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/configuring-codespaces/</guid><description>&lt;p>In &lt;a href="https://www.codewrecks.com/post/github/codespaces-hugo/">previous post&lt;/a> I explored the many advantages I&amp;rsquo;ve found &lt;strong>using GitHub codespaces to author blog posts directly in a browser&lt;/strong>. That example was surely too simple, after all a hugo blog is just markdown, but nevertheless Codespaces allows me to configure my environment with great easy.&lt;/p>
&lt;p>You can follow the guide &lt;a href="https://docs.github.com/en/codespaces/customizing-your-codespace/configuring-codespaces-for-your-project">on the official link&lt;/a> but here is a quick summary on how I configured my codespaces for my blog. First of all you can directly add a configuration file inside codespace&lt;/p></description></item><item><title>Use GitHub codespaces to author blog post</title><link>https://www.codewrecks.com/post/github/codespaces-hugo/</link><pubDate>Thu, 19 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/codespaces-hugo/</guid><description>&lt;h2 id="the-scenario">The scenario&lt;/h2>
&lt;p>I played &lt;a href="https://www.codewrecks.com/post/general/github-codespaces-first-impression/">a little bit with GitHub Codespaces&lt;/a> when it was in preview, now it is time to try to use it real activities to &lt;strong>understand scenarios where it can be useful&lt;/strong>.&lt;/p>
&lt;p>To have a real test you need &lt;strong>to setup a goal to verify if the tool is capable of reaching that goal, and if it is an advantage over existing tool&lt;/strong>. My first goal is being able to write Blog Post in hugo with GitHub Codespaces and being able to determine if it is more productive than running a standalone local version of Visual Studio code.&lt;/p></description></item><item><title>Choose environment from branch in GitHub action</title><link>https://www.codewrecks.com/post/github/choose-environment-from-branch/</link><pubDate>Wed, 18 Aug 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/choose-environment-from-branch/</guid><description>&lt;p>I have a friend that asked me how to &lt;strong>choose an &lt;a href="https://docs.github.com/en/actions/reference/environments">enviroment&lt;/a> in a GitHub action based on the branch that triggered the action&lt;/strong>. Usually Environments are used in a sort of Promotion mechanism, where you start deploying on Test, then you have a manual or automatic approval to deploy on staging and finally to production. Even if this is a textbook scenario &lt;strong>sometimes you need to create a simple sequence of steps to deploy your software in an environment and you want to choose environment based on branch&lt;/strong>. If you deploy master you deploy on production, if you deploy develop you deploy test.&lt;/p></description></item><item><title>Code coverage in SonarCloud and GitHub Actions</title><link>https://www.codewrecks.com/post/github/github-sonarcloud-codecoverage/</link><pubDate>Thu, 08 Jul 2021 19:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-sonarcloud-codecoverage/</guid><description>&lt;p>First of all I want to thank my friend &lt;a href="http://blog.casavian.eu/page/about/">Giulio Vian&lt;/a> for pointing me in the right direction and for its great work in &lt;a href="https://github.com/tfsaggregator/aggregator-cli/blob/master/.github/workflows/build-and-deploy.yml">TfsAggregator Action&lt;/a>.&lt;/p>
&lt;p>My problem was: I used the wizard in GitHub to create a GitHub Action definition to analyze code in SonarCloud, everything runs just fine except I was not able to have Code Coverage nor unit tests result in my analysis. &lt;strong>With Azure DevOps actions and .NET Full Framework project there is no problem&lt;/strong> but with GH and standard Actions no result see, seems to be uploaded.&lt;/p></description></item><item><title>CodeQL Scanning in GitHub</title><link>https://www.codewrecks.com/post/github/code-scanning-result/</link><pubDate>Sun, 14 Mar 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/code-scanning-result/</guid><description>&lt;p>As you can read directly from &lt;a href="https://github.blog/2020-09-30-code-scanning-is-now-available/">GitHub blog post&lt;/a> GitHub code scanning is now available and ready to use for your repositories.&lt;/p>
&lt;p>I&amp;rsquo;ve blogged in the past &lt;a href="https://www.codewrecks.com/post/github/code-scanning/">about code security scanning in GitHub&lt;/a> but in that post I didn&amp;rsquo;t show what happens when &lt;strong>analysis engine found some possible security problem in your code&lt;/strong>. When something is not ok, you can go on your Security GitHub tab to look for alerts.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/codeql-alert-result.png"> &lt;img src="../images/codeql-alert-result.png" alt="CodeQL alert results in your repository" />&lt;/a>
&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>CodeQL alert results in your repository&lt;/em>&lt;/p></description></item><item><title>Code scanning in GitHub</title><link>https://www.codewrecks.com/post/github/code-scanning/</link><pubDate>Sat, 03 Oct 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/code-scanning/</guid><description>&lt;p>As you can read directly from &lt;a href="https://github.blog/2020-09-30-code-scanning-is-now-available/">GitHub blog post&lt;/a> GitHub code scanning is now available and ready to use for your repositories.&lt;/p>
&lt;p>To enable code scanning you can just go to the security tab of your repository &lt;strong>and choose to enable code scanning&lt;/strong>.&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/enable-code-scanning-gh.png"> &lt;img src="../images/enable-code-scanning-gh.png" alt="Enable code scanning" />&lt;/a>
&lt;em>&lt;strong>Figure 1:&lt;/strong>&lt;/em> &lt;em>Enable code scanning&lt;/em>&lt;/p>
&lt;p>You are presented with a list of Code Scanning tools at your disposal, clearly the first is &lt;a href="https://securitylab.github.com/tools/codeql">CodeQL&lt;/a> &lt;strong>and it is automatically offered to you by GitHub&lt;/strong>, then you can find other tool available in the marketplace&lt;/p></description></item><item><title>Continuous Integration in GitHub Actions deploy in AzureDevops</title><link>https://www.codewrecks.com/post/old/2020/04/continuous-integration-in-github-actions-deploy-in-azuredevops/</link><pubDate>Sat, 04 Apr 2020 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/continuous-integration-in-github-actions-deploy-in-azuredevops/</guid><description>&lt;p>My dear friend Matteo just published an &lt;a href="https://mattvsts.github.io/2020/04/03/CI-on-github-actions-CD-on-Azure-Pipelines/">interesting article on integration between GitHub actions and Azure Devops Pipeline here&lt;/a>. I have a different scenario where &lt;a href="http://www.codewrecks.com/blog/index.php/2020/03/22/github-actions-plus-gitversion/">I’ve already published a GitHub release from a GitHub action&lt;/a>, but I have nothing ready in GitHub to release in my machines.&lt;/p>
&lt;blockquote>
&lt;p>While GitHub is really fantastic for source code and starts having a good support for CI with Actions, in the release part it still miss a solution. Usually this is not a problem, because we have Azure DevOps or other products that can fill the gap.&lt;/p></description></item><item><title>Azure DevOps pipeline template for build and release NET core project</title><link>https://www.codewrecks.com/post/old/2020/03/azure-devops-pipeline-template-for-build-and-release-net-core-project/</link><pubDate>Sun, 29 Mar 2020 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/azure-devops-pipeline-template-for-build-and-release-net-core-project/</guid><description>&lt;p>Some days ago I’ve blogged on how to release projects on GitHub with actions, now it is time to understand &lt;strong>how to do a similar thing in Azure DevOps to build / test / publish a.NET core library with nuget&lt;/strong>. The purpose is to create a generic template that can be reused on every general that needs to build an utility dll, run test and publish to a Nuget feed.&lt;/p></description></item><item><title>GitHub actions improvements</title><link>https://www.codewrecks.com/post/old/2020/03/github-actions-improvements/</link><pubDate>Thu, 12 Mar 2020 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/github-actions-improvements/</guid><description>&lt;p>GitHub actions is really new kid on the block and even if I still prefer Azure DevOps pipelines, because they are really more production ready, GitHub actions is rapidly evolving.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/SNAGHTML3961c2_thumb.png" alt="SNAGHTML3961c2" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Figure 1&lt;/strong> : &lt;em>GitHub actions now has a dedicated editor for actions to quickly include actions&lt;/em>&lt;/p>
&lt;p>As you can see in &lt;strong>Figure 1&lt;/strong> , when you edit workflow file in GitHub online editor &lt;strong>you can simply browse all available actions&lt;/strong>. Choosing a specific action reveal the snippet of text you should enter to use that action without the need to search around.&lt;/p></description></item><item><title>Use latest OS image tag in GitHub actions</title><link>https://www.codewrecks.com/post/old/2020/03/use-latest-os-image-tag-in-github-actions/</link><pubDate>Sun, 08 Mar 2020 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/use-latest-os-image-tag-in-github-actions/</guid><description>&lt;p>I have a nice GH action that runs some build and test on my project, now I noticed that some of the latest runs have some problem.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/03/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>My action that ran only one of the matrix combination&lt;/em>&lt;/p>
&lt;p>Action has two distinct run because it has a matrix, actually I want to run it against Linux and Windows operating systems, but it seems that it does not run anymore on Windows.&lt;/p></description></item><item><title>GitHub security Alerts</title><link>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</link><pubDate>Tue, 22 Oct 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</guid><description>&lt;p>I really love everything about security and I’m really intrigued by GitHub security tab that is now present on you repository. In your project usually it is disabled by default.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image-44.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>GitHub Security tab on your repository&lt;/em>&lt;/p>
&lt;p>&lt;strong>If you enable it you start receiving suggestion based on code that you check in on the repository&lt;/strong> , as an example, GitHub will scan your npm packages source to find dependencies with libraries that are insecure.&lt;/p></description></item><item><title>First Experience with GitHub Actions</title><link>https://www.codewrecks.com/post/old/2019/09/first-experience-with-github-actions/</link><pubDate>Thu, 26 Sep 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/09/first-experience-with-github-actions/</guid><description>&lt;p>GitHub &lt;a href="https://github.com/features/actions">actions&lt;/a> &lt;strong>is the new CI/CD system created by GitHub that allows you to build and release your software with a simple workflow defined in YAML file&lt;/strong>. Actually it is in beta, but you can simply request to be enlisted and your account will be enabled so you can try it in preview.&lt;/p>
&lt;p>Actions engine is based on a yaml definition that is stored directly in code, there are lots of predefined actions made by GitHub team as well as custom actions that can be developed by the community.The real power rely on the fact that you can use simply use command line and docker commands, making the creation of a release a simple and smooth process.&lt;/p></description></item><item><title>Git for windows getting Invalid username or password with Wincred</title><link>https://www.codewrecks.com/post/old/2015/06/git-for-windows-getting-invalid-username-or-password-with-wincred/</link><pubDate>Tue, 23 Jun 2015 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/git-for-windows-getting-invalid-username-or-password-with-wincred/</guid><description>&lt;p>If you use Https to communicate with your git repository, Es, Github or VisualStudioOnline, you usually &lt;strong>setup credential manager to avoid entering credential for each command that contact the server&lt;/strong>. With latest versions of git you can configure wincred with this simple command.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git config --global credential.helper wincred&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This morning I start getting error while I’m trying to push some commits to GitHub.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git push
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>remote: Invalid username or password.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fatal: Authentication failed &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#39;https://github.com/ProximoSrl/Jarvis.DocumentS
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">tore.git/&amp;#39;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>If I remove credential helper (git config –global credential.helper unset) everything works, git ask me for user name and password and I’m able to do everything, but as soon as I re-enable credential helper, the error returned. &lt;strong>This problem is probably originated by some corruption of stored credentials&lt;/strong> , and usually you can simply clear stored credentials and at the next operation you will be prompted for credentials and everything starts worked again. The question is, where are stored credential for wincred?&lt;/p></description></item></channel></rss>