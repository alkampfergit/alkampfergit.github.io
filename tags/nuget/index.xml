<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuget on Codewrecks</title><link>https://www.codewrecks.com/tags/nuget/</link><description>Recent content in Nuget on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 18 Jan 2018 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/nuget/index.xml" rel="self" type="application/rss+xml"/><item><title>VSTS Package packages failed to publish</title><link>https://www.codewrecks.com/post/old/2018/01/vsts-package-packages-failed-to-publish/</link><pubDate>Thu, 18 Jan 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/01/vsts-package-packages-failed-to-publish/</guid><description>I have a build that publishes nuget packages on MyGet, we decided to move packages to VSTS internal package management, so I simply added another Build Task that pushes packages to VSTS internal feed. Sadly enough I got a really generic error
Error: An unexpected error occurred while trying to push the package with VstsNuGetPush.exe. Packages failed to publish Those two errors does not gives me real information on what went wrong, but looking in the whole log, I verified that the error happens when the task was trying to publish symbols packages (2).</description></item><item><title>New Nuget Task in VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</link><pubDate>Tue, 22 Aug 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</guid><description>If you edit a build in VSTS where you configured Nuget Packaging and Publishing, you can notice that all the old tasks to pack and publish are marked as deprecated.
Figure 1: Old nuget tasks that are now deprecated.
Deprecating a package is needed when the Author decide to completely replace the entire package, changing also the id. This is needed when the task will be completely redesigned and will work in a complete different way from the old version.</description></item><item><title>Publish nuget package during build NET Standard</title><link>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</link><pubDate>Mon, 29 May 2017 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</guid><description>In a previous post I dealt with how to build a Multitargeted dotnetcore solution in VSTS, but the build is not really complete unless you are publishing the result somewhere. Since my example was a simple library, the obvious solution is publishing everything to a nuget feed.
Publishing with nuget is really really simple with VSTS build system , because you should simply use another.NET Core task instance plus a NuGet publisher.</description></item><item><title>Nuget default configuration</title><link>https://www.codewrecks.com/post/old/2016/04/nuget-default-configuration/</link><pubDate>Tue, 12 Apr 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/04/nuget-default-configuration/</guid><description>If you use MyGet as package source or some other Nuget Feed and your code fail to build in a buildserver because it cannot retrieve some package, probably you have some problem in NuGet configuration.
**If you issue a nuget.exe source listin command line, you should be able to see all package source configured. **Actually I had a problem in a TeamCity build server, after we added a new package source to a solution and pushed code to the server the build was broken.</description></item><item><title>Integrating GitVersion and Gitflow in your vNext Build</title><link>https://www.codewrecks.com/post/old/2015/10/integrating-gitversion-and-gitflow-in-your-vnext-build/</link><pubDate>Sat, 17 Oct 2015 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/10/integrating-gitversion-and-gitflow-in-your-vnext-build/</guid><description>In previous article Iâ€™ve showed how to create a VSO build vNext to automatically publish a nuget package to Myget (or nuget) during a build. [Publishing a Nuget package to Nuget/Myget with VSO Build vNext]. Now it is time to create a more interesting build that automatically version your assemblies and nuget packages based on GitFlow.
GitFlow and GitVersion GitFlow is a simple convention to manage your branches in your Git repository to support a production branch, a developement branch and Feature/Support/Release/hotfix branches.</description></item><item><title>Publish NuGet Package to a private NuGet Server with TFS Build and Symbol Server</title><link>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</link><pubDate>Thu, 13 Feb 2014 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</guid><description>Previous post on the series
Versioning assembly during TFS 2013 build with Powershell Scripts Automatically Build and Publish NuGet Packages during TFS Build Manage Symbol Server on Azure (or on-premise) VM and TF Service After you set automatic publishing of NuGet packages with automatic assembly and NuGet version numbering in a TFS Build, you surely want to * enable publishing symbols on a Symbol Server *. This will permits you to put a reference to your NuGet Package and then being able to debug the code thanks to Symbol Server support with TFS.</description></item></channel></rss>