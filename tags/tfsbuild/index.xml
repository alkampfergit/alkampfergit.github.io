<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TfsBuild on Codewrecks</title><link>https://www.codewrecks.com/tags/tfsbuild/</link><description>Recent content in TfsBuild on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 Jun 2016 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/tfsbuild/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Unit Tests on different machine during TFS 2015 build</title><link>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</link><pubDate>Sat, 04 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</guid><description>First of all I need to thanks my friend Jackob Ehn that pointed me to the right direction to create a particular build. In this post I’ll share with you my journey to run tests on a different machine than the one that is running the build.
For some build it is interesting to have the ability to run some Unit Test (nunit in my scenario) on a machine different from that one that is running the build.</description></item><item><title>Make easy storing secure password in TFS Build with DPAPI</title><link>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</link><pubDate>Tue, 22 Jul 2014 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</guid><description>I’ve blogged some days ago on Securing the password in build definition. I want to make a disclaimer on this subject. The technique described in that article permits you to use encrypted password in a build definition, but this password cannot be decrypted only if you have no access to the build machine. If you are a malicious user and you can schedule a build, you can simply * schedule a new build that launch a custom script that decrypts the password and sends clear password by email or dump to the build output.</description></item><item><title>Store secure password in TFS Build Definition</title><link>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</link><pubDate>Sat, 12 Jul 2014 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/store-secure-password-in-tfs-build-definition/</guid><description>Some days ago I had some tweet exchange with Giulio about a post of Gordon on storing security info in TFS Build Definition. The question is: * how can I store password in build definition without people being able to view them simply editing the build definition itself? *
With TFS 2013 a nice new Build template that allow customization with scripts is included and this is my preferred build customization scenario.</description></item><item><title>Publish NuGet Package to a private NuGet Server with TFS Build and Symbol Server</title><link>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</link><pubDate>Thu, 13 Feb 2014 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</guid><description>Previous post on the series
Versioning assembly during TFS 2013 build with Powershell Scripts Automatically Build and Publish NuGet Packages during TFS Build Manage Symbol Server on Azure (or on-premise) VM and TF Service After you set automatic publishing of NuGet packages with automatic assembly and NuGet version numbering in a TFS Build, you surely want to * enable publishing symbols on a Symbol Server *. This will permits you to put a reference to your NuGet Package and then being able to debug the code thanks to Symbol Server support with TFS.</description></item><item><title>Automatically build and publish nuget packages during TFS Build</title><link>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</link><pubDate>Sat, 01 Feb 2014 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/automatically-build-and-publish-nuget-packages-during-tfs-build/</guid><description>Previous post on the series
Versioning assembly during TFS 2013 build with Powershell Scripts Using powershell to cusotmize build is simple and easy, once you have versioning in place (previous article), if you are realizing some form of reusable library it is time to think on how to distribute it to people. One of the obvious choice is using Nuget. Luckily enough, setting up a nuget server in an azure website is just a matter of</description></item><item><title>Versioning assembly during TFS 2013 build with Powershell Scripts</title><link>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</link><pubDate>Sat, 11 Jan 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/customize-tfs-2013-build-with-powershell-scripts/</guid><description>One of the most important news in TFS Build 2010 is the introduction of Workflow Foundation that replaced standard MSBuild scripts used in TFS 2008. Workflow foundation can be really powerful, but indeed it is somewhat scaring and quite often customizing a build can be complex.
You can find some blog post of mine on the subject:
Writing a Custom Activity for TFS 2010 Builds Run Test With TypeMock isolator in TFS 2010 Build Wrap a MsBuild Custom task inside a custom Action Years are passed, but I still see people scared when it is time to customize the build , especially because the Workflow can be a little bit intimidating.</description></item><item><title>Deploy AspNET web site on IIS from TFS Build</title><link>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</link><pubDate>Thu, 01 Aug 2013 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</guid><description>In the last article of the series, I dealt with Deploying on Azure Web Sites from on-premise TFS, but the very same technique can be used to automatically deploy from a standard TFS Build to a standard Web Site hosted in IIS and not in Azure. For this demo I’ve prepared a VM on azure, but the configuration is the very same if the VM is on-premise or if you use a physical machine to run IIS.</description></item><item><title>Deploying on Azure Web sites from on-premise TFS</title><link>https://www.codewrecks.com/post/old/2013/07/deploying-on-azure-web-sites-from-on-premise-tfs/</link><pubDate>Fri, 05 Jul 2013 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/07/deploying-on-azure-web-sites-from-on-premise-tfs/</guid><description>Many people asked me during course if the ability to automatically deploy to Windows Azure Web Sites is restricted only to those people that are using TF Service (TFS on the cloud), or if they can deploy with an on-premise installation of TFS.
The answer is clearly YES, and I strongly suggest you to watch the Continuous Deployment with Microsoft Visual Studio session of Brian Randell to have a deep explanation of all the possibilities you have to achieve automatic deployment of your applications from Team Foundation Server.</description></item><item><title>Code coverage during TFS 2012 build</title><link>https://www.codewrecks.com/post/old/2013/06/code-coverage-during-tfs-2012-build/</link><pubDate>Sat, 08 Jun 2013 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/06/code-coverage-during-tfs-2012-build/</guid><description>A common question about TFS 2012 build is: how can I ask for code coverage?
The answer is really simple, you should go to the test section of build definition and change the run settings from Default to another setting that includes code coverage and this is really everything you need to do.
Figure 1: Change run settings to enable code coverage
Now launch the build and verify that you have your binaries instrumented and Code Coverage correctly computed.</description></item><item><title>TF Service deploy on Azure Web Site with Database Project</title><link>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</link><pubDate>Fri, 15 Mar 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</guid><description>The ability to automatically deploy a site on Azure Web Site from TFService is really interesting, but sadly enough there is no out-of-the-box solution to update the structure of an Azure Database with a VS2012 Database Project. In this post I’ll show how to modify the standard build template to deploy a Database Project during Azure Web Site Deployment. I’ve blogged in the past to explain how to Deploy a Database Project with TFS Build, but that post refers to the old type of Database Project (VS2010) and now I want to explain how to customize the AzureContinuousDeployment build to deploy on azure a database project of VS2012.</description></item><item><title>Installing on-premise component against TFS Service TFS On Azure</title><link>https://www.codewrecks.com/post/old/2012/04/installing-on-premise-component-against-tfs-service-tfs-on-azure/</link><pubDate>Mon, 02 Apr 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/installing-on-premise-component-against-tfs-service-tfs-on-azure/</guid><description>Tfs on azure is a a perfectly valid solution to have your TFS hosted by Microsoft , no worries about upgrading, maintaining, backup and most important, it is available from every computer that has an internet connection. This last factor can be really interesting for companies where people sometimes works from home, or from an hotel during transfers because the only solution with an On-Premise server is exposing the server as Https, or using a VPN, but with TFS on Azure all that you need is a simple internet connection.</description></item><item><title>Logging in Custom Build action for Tfs Build 2010</title><link>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</link><pubDate>Thu, 14 Jan 2010 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/logging-in-custom-build-action-for-tfs-build-2010/</guid><description>In a previous post I dealt with the creation of a Custom Activity to use in TFS2010 builds, in that example I did not dealt about logging. Logging is a vital task to do in custom action, because it is quite difficult to attach a debugger to the Build Agent, and if a build fails, it is really important to be able to understand what is gone wrong.
If you want to log from a custom action you can use this simple function</description></item><item><title>Automatic deployment of a web application with TFS Build</title><link>https://www.codewrecks.com/post/old/2009/10/automatic-deployment-of-a-web-application-with-tfs-build/</link><pubDate>Fri, 23 Oct 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/automatic-deployment-of-a-web-application-with-tfs-build/</guid><description>When you develop web applications you usually have X developers solving bugs and implementing features, and a series of testers that test application during developing process. A must to have requirement is that
Modifications to the trunk are visible as soon as possible to testers. Data in test database gets preserved Point 2 is especially important, testers usually work with the site and fills database with data. Suppose that tester John find a bug that occurs only with specific data, a developer correct the bug, then a deploy is done, all test data are wiped away, and the tester is not able to verify if the bug is gone.</description></item><item><title>Take control of assembly numbering during a tfs build</title><link>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</link><pubDate>Fri, 21 Aug 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</guid><description>One of the most important stuff in a project build, is the ability to mark the assemblies with unique numbers that permits us to reproduce the build. Tfs does not have a standard way of doing this, but with a couple of MsBuild actions it is really simple to overcome this limitation. This is a good example that shows how you can extend build script to do complex task.
First of all I want to change only AssemblyFileVersion and not the AssemblyVersion, in this way all builds are compatible until someone manually changes AssemblyVersion.</description></item></channel></rss>