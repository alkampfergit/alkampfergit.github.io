<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TfsBuild on Codewrecks</title><link>https://www.codewrecks.com/tags/tfsbuild/</link><description>Recent content in TfsBuild on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 04 Jun 2016 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/tfsbuild/index.xml" rel="self" type="application/rss+xml"/><item><title>Running Unit Tests on different machine during TFS 2015 build</title><link>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</link><pubDate>Sat, 04 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/running-unit-tests-on-different-machine-during-tfs-2015-build/</guid><description>&lt;p>First of all I need to thanks my friend &lt;a href="http://blog.ehn.nu/">Jackob Ehn&lt;/a> that pointed me to the right direction to create a particular build.  In this post &lt;strong>I’ll share with you my journey to run tests on a different machine than the one that is running the build&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>For some build it is interesting to have the ability to run some Unit Test (nunit in my scenario) on a machine different from that one that is running the build.&lt;/strong> There are a lot of legitimate reasons for doing this, for a project I’m working with, to run a set of test I need to have a huge amount of pre-requisites installed (LibreOffice, ghostscript, etc). Instead of installing those prerequisite on all agent machines, or install those one on a single build agent and using capabilities, I’d like to being able &lt;strong>to run the build on any build agent, but run the test in a specific machine that had all the prerequisite installed.&lt;/strong> &amp;gt; Sometimes it is necessary to run tests during build on machine different from that one where the build agent is running.&lt;/p></description></item><item><title>Make easy storing secure password in TFS Build with DPAPI</title><link>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</link><pubDate>Tue, 22 Jul 2014 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</guid><description>&lt;p>I’ve blogged some days ago on &lt;a href="http://www.codewrecks.com/blog/index.php/2014/07/12/store-secure-password-in-tfs-build-definition/">Securing the password in build definition&lt;/a>. I want to make a disclaimer on this subject. The technique described in that article permits you to use encrypted password in a build definition, but this password cannot be decrypted only if you have no access to the build machine. If you are a malicious user and you can schedule a build, you can simply * &lt;strong>schedule a new build that launch a custom script that decrypts the password and sends clear password by email or dump to the build output.&lt;/strong> *&lt;/p></description></item><item><title>Publish NuGet Package to a private NuGet Server with TFS Build and Symbol Server</title><link>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</link><pubDate>Thu, 13 Feb 2014 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/02/publish-nuget-package-to-a-private-nuget-server-with-tfs-build-and-symbol-server/</guid><description>&lt;p>Previous post on the series&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2014/01/11/customize-tfs-2013-build-with-powershell-scripts/">Versioning assembly during TFS 2013 build with Powershell Scripts&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2014/02/01/automatically-build-and-publish-nuget-packages-during-tfs-build/">Automatically Build and Publish NuGet Packages during TFS Build&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/04/manage-symbol-server-on-azure-or-on-premise-vm-and-tf-service/">Manage Symbol Server on Azure (or on-premise) VM and TF Service&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>After you set automatic publishing of NuGet packages with automatic assembly and NuGet version numbering in a TFS Build, you surely want to * &lt;strong>enable publishing symbols on a Symbol Server&lt;/strong> *. This will permits you to &lt;strong>put a reference to your NuGet Package and then being able to debug the code thanks to Symbol Server support with TFS&lt;/strong>. Publishing symbols is just a matter of specifying a shared folder to store symbols in build configuration, but if you enable it in previous build where you publish with Powershell, it does not work. The reason is, &lt;strong>you are running PowerShell script that publish NuGet package after build (or after test), but in the build Workflow, source indexing happens after these steps&lt;/strong>.&lt;/p></description></item><item><title>Deploy AspNET web site on IIS from TFS Build</title><link>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</link><pubDate>Thu, 01 Aug 2013 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/deploy-asp-net-web-site-on-iis-from-tfs-build/</guid><description>&lt;p>In the last article of the series, I dealt with &lt;a href="http://www.codewrecks.com/blog/index.php/2013/07/05/deploying-on-azure-web-sites-from-on-premise-tfs/">Deploying on Azure Web Sites from on-premise TFS&lt;/a>, but the very same technique can be used to &lt;strong>automatically deploy from a standard TFS Build to a standard Web Site hosted in IIS and not in Azure&lt;/strong>. For this demo I’ve prepared a VM on azure, but the configuration is the very same if the VM is on-premise or if you use a physical machine to run IIS. The only difference between deploy on Azure Web Site is that we are deploying on a Web site hosted on IIS.&lt;/p></description></item><item><title>Deploying on Azure Web sites from on-premise TFS</title><link>https://www.codewrecks.com/post/old/2013/07/deploying-on-azure-web-sites-from-on-premise-tfs/</link><pubDate>Fri, 05 Jul 2013 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/07/deploying-on-azure-web-sites-from-on-premise-tfs/</guid><description>&lt;p>Many people asked me during course if the ability to automatically deploy to Windows Azure Web Sites is restricted only to those people that are using TF Service (TFS on the cloud), or if they can &lt;strong>deploy with an on-premise installation of TFS&lt;/strong>.&lt;/p>
&lt;p>The answer is clearly YES, and I strongly suggest you to watch the &lt;a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B329#fbid=ZeePmmQhK_G">Continuous Deployment with Microsoft Visual Studio session&lt;/a> of &lt;a href="http://channel9.msdn.com/Events/Speakers/Brian-Randell">Brian Randell&lt;/a> to have a deep explanation of all the possibilities you have to achieve automatic deployment of your applications from Team Foundation Server.&lt;/p></description></item><item><title>Code coverage during TFS 2012 build</title><link>https://www.codewrecks.com/post/old/2013/06/code-coverage-during-tfs-2012-build/</link><pubDate>Sat, 08 Jun 2013 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/06/code-coverage-during-tfs-2012-build/</guid><description>&lt;blockquote>
&lt;p>A common question about TFS 2012 build is: &lt;em>how can I ask for code coverage?&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>The answer is really simple, you should go to the test section of build definition and change the run settings from Default to another setting that includes code coverage and this is really everything you need to do.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image_thumb2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image_thumb2_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2013/06/image_thumb2_thumb.png" alt="image_thumb2" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Change run settings to enable code coverage&lt;/em>&lt;/p>
&lt;p>Now launch the build and verify that you have your binaries instrumented and Code Coverage correctly computed.&lt;/p></description></item><item><title>TF Service deploy on Azure Web Site with Database Project</title><link>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</link><pubDate>Fri, 15 Mar 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</guid><description>&lt;p>The ability to automatically deploy a site on Azure Web Site from TFService is really interesting, but sadly enough there is no out-of-the-box solution to &lt;strong>update the structure of an Azure Database with a VS2012 Database Project&lt;/strong>. In this post I’ll show &lt;strong>how to modify the standard build template to deploy a Database Project during Azure Web Site Deployment&lt;/strong>. I’ve blogged in the past to explain how to &lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/04/deploy-a-database-project-with-tfs-build-2010/">Deploy a Database Project with TFS Build&lt;/a>, but that post refers to the old type of Database Project (VS2010) and now I want to explain how to customize the AzureContinuousDeployment build to deploy on azure a database project of VS2012.&lt;/p></description></item><item><title>Installing on-premise component against TFS Service TFS On Azure</title><link>https://www.codewrecks.com/post/old/2012/04/installing-on-premise-component-against-tfs-service-tfs-on-azure/</link><pubDate>Mon, 02 Apr 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/installing-on-premise-component-against-tfs-service-tfs-on-azure/</guid><description>&lt;p>&lt;a href="http://tfspreview.com/">Tfs on azure&lt;/a> is a a perfectly valid solution to have your &lt;strong>TFS hosted by Microsoft&lt;/strong> , no worries about upgrading, maintaining, backup and most important, &lt;em>it is available from every computer that has an internet connection&lt;/em>. This last factor can be really interesting for companies where people sometimes works from home, or from an hotel during transfers because the only solution with an On-Premise server is exposing the server as Https, or using a VPN, but with TFS on Azure all that you need is a simple internet connection.&lt;/p></description></item><item><title>Take control of assembly numbering during a tfs build</title><link>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</link><pubDate>Fri, 21 Aug 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/take-control-of-assembly-numbering-during-a-tfs-build/</guid><description>&lt;p>One of the most important stuff in a project build, is &lt;em>the ability to mark the assemblies with unique numbers that permits us to reproduce the build&lt;/em>. Tfs does not have a standard way of doing this, but with a couple of MsBuild actions it is really simple to overcome this limitation. This is a good example that shows how you can extend build script to do complex task.&lt;/p>
&lt;p>First of all I want to change only &lt;a href="http://msdn.microsoft.com/en-us/library/system.reflection.assemblyfileversionattribute.aspx">AssemblyFileVersion&lt;/a> and not the AssemblyVersion, in this way all builds are compatible until someone manually changes AssemblyVersion. A standard technique I like very much is letting the programmers to &lt;em>manage major and minor number manually&lt;/em>, and &lt;em>letting my builds generates build and revision ones&lt;/em>. For build number I want to be able to generate a unique number each build, a sequential generator will be fine; but for revision number I want to use the changeset used to generate the build. To accomplish this we need essentially four macro steps.&lt;/p></description></item></channel></rss>