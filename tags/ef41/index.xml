<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EF41 on Codewrecks</title><link>https://www.codewrecks.com/tags/ef41/</link><description>Recent content in EF41 on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Jul 2011 14:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/ef41/index.xml" rel="self" type="application/rss+xml"/><item><title>Entity Framework 41 8211 Querying objects</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-querying-objects/</link><pubDate>Tue, 19 Jul 2011 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-querying-objects/</guid><description>Part 1: First Steps
Part 2: Managing Relations
Part 3: Collection Relations
In the first three parts of this little tutorial I showed how easy is to save objects to database with EF 4.1 code first approach, now it is time to understand how to retrieve objects from the database.
Querying objects from database is really easy in EF, because you have full LINQ support; as an example suppose you want to retrieve all warriors with a name that contains a particular search string.</description></item><item><title>Entity Framework 41-Collection Relations</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</link><pubDate>Wed, 13 Jul 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</guid><description>Part 1: First Steps
Part 2: Managing Relations
Relations between objects are not limited to an object that keep a reference to another object (as seen in part 2), but I can have an object that contains a list of other objects. This is the classic RDBMS rough equivalent of the One-To-Many relation. I decided that my Warrior can carry a certain number of items, so I defined an Item class and a property on Warrior class to hold reference to a list of Items.</description></item><item><title>Entity Framework 41 managing relations</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-managing-relations/</link><pubDate>Tue, 12 Jul 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-managing-relations/</guid><description>Part 1: First Steps
In previous post I showed how you can persist an object to the database thanks to EF41 and few lines of code, now it is time to understand how to manage relations. First of all create another class called weapon and then create a property of type Weapon into the Warrior class.
Figure 1: New model, the warrior has a property called ActiveWeapon of type Weapon</description></item><item><title>Entity Framework 41 first steps</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-first-steps/</link><pubDate>Mon, 11 Jul 2011 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-first-steps/</guid><description>I use NHibernate since its first versions and I really love it :), but after Entity Framework 4.1 is out, I started to consider using EF for people that actually does know anything of ORM and still work with dataset or use handwritten SQL CRUD, but could not use open source project or prefer using MS technologies.
I tend not to agree with this path, but sometimes it is easier to tell people, hey, just install this update of Microsoft and you can use EF code first, or if you want a designer you can simple add a new EF Model to the project.</description></item></channel></rss>