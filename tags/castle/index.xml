<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Castle on Codewrecks</title><link>https://www.codewrecks.com/tags/castle/</link><description>Recent content in Castle on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 09 May 2023 09:40:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/castle/index.xml" rel="self" type="application/rss+xml"/><item><title>Problem with Castle Windsor resolution in ASP.NET Core</title><link>https://www.codewrecks.com/post/general/castle-resolution-in-asp-net-core/</link><pubDate>Tue, 09 May 2023 09:40:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/castle-resolution-in-asp-net-core/</guid><description>&lt;p>&lt;strong>Castle Windsor is a beautiful library for implementing inversion of control&lt;/strong>, but sometimes problem arise when it is used in projects that start with Full Framework and must be converted to ASP.NET Core during their lifetime. To make this work, an interdependency library is typically used to allow ASP.NET Core infrastructure to resolve dependencies using Castle. This approach helps avoid issues when replacing Castle with other libraries, since Castle is both powerful and complex, allowing for many customizations in dependency resolution. Since it&amp;rsquo;s &lt;strong>not always easy to remove it and make room for new libraries&lt;/strong> the usual solution is to keep using Castle Winsor.&lt;/p></description></item><item><title>Decide when CastleWindsor Startable Facility starts your components</title><link>https://www.codewrecks.com/post/old/2016/05/decide-when-castle-windsor-startable-facility-starts-your-components/</link><pubDate>Sun, 15 May 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/decide-when-castle-windsor-startable-facility-starts-your-components/</guid><description>&lt;p>&lt;a href="https://github.com/castleproject/Windsor/blob/master/docs/startable-facility.md">Castle.Windsor Startable facility&lt;/a> is a nice facility that automatically starts component that implements a specific interface (IStartable) or components registered with specific extensions method (ex StartUsingMethod).&lt;/p>
&lt;p>This approach is really nice, and the Facility has different way to work, the old aggressive mode that &lt;strong>try to start a component immediately after is registered, and another, more useful, that starts a component only when all its dependencies are registered.&lt;/strong> This feature is helpful, because it avoid you to worry about order of registration.&lt;/p></description></item><item><title>Exposing WCF service without svc extension</title><link>https://www.codewrecks.com/post/old/2013/03/exposing-wcf-service-without-svc-extension/</link><pubDate>Tue, 12 Mar 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/exposing-wcf-service-without-svc-extension/</guid><description>&lt;p>I know, this is a weird requirement, but sometimes they appear in your backlog. The story is: &lt;strong>as company XXX I want to expose a service based on WCF in IIS without having the.svc suffix in the address&lt;/strong>. I’m actually using Castle Windsor WCF Integration to resolve my service class with castle, and it turns out that exposing a service without using standard.svc files it is just a matter of configure routing. This line of code is configuring the route of a specific name to a wcf service&lt;/p></description></item><item><title>Making Castle and MEF happy togheter</title><link>https://www.codewrecks.com/post/old/2012/08/making-castle-and-mef-happy-togheter/</link><pubDate>Mon, 13 Aug 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/making-castle-and-mef-happy-togheter/</guid><description>&lt;p>If you use Mef to dynamically load handlers for your services (as described in &lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/23/evolving-request-response-service-to-separate-contract-and-business-logic/">this post&lt;/a>), you will probably need to declare dependencies to various other software service. Since MEF is not born to handle dependencies, you will probably use other libraries for DI, Es. Castle.Windsor. Now the problem is “how can I make MEF and my IoC container living together happily with minimum effort?”. To keep everything simple you will need to understand typical scenario, you want to solve, a first problem you need to solve is “ &lt;strong>Mef imported classes should be able to declare dependencies on services defined in my primary IoC container engine§.&lt;/strong> The simplest solution you can use is using MEF attributes to declare dependencies from other service with the ImportAttribute.&lt;/p></description></item><item><title>Moving between different IoC containers</title><link>https://www.codewrecks.com/post/old/2012/07/moving-between-different-ioc-containers/</link><pubDate>Thu, 26 Jul 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/07/moving-between-different-ioc-containers/</guid><description>&lt;p>I must admit that I always prefer castle Windsor over other IoC containers, but the main reason is that I’m really used to it and all its facilities. I know how to write facilities, and I know how it behave, this makes difficult for me moving to other Container because I usually need time to find how to do same stuff I do with castle with the new Toy.&lt;/p>
&lt;p>Actually I’m using Unity sometimes and today I &lt;strong>need to mimic the&lt;/strong> &lt;a href="http://docs.castleproject.org/Default.aspx?Page=Startable-Facility&amp;amp;amp;NS=Windsor&amp;amp;amp;AspxAutoDetectCookieSupport=1">&lt;strong>IStartable&lt;/strong>&lt;/a> &lt;strong>facility of Castle&lt;/strong> , because I need Start method to be called whenever the object gets registered, and stop called when the container is disposed. The very first tentative is this code.&lt;/p></description></item><item><title>Managing remote logging with Log4net and WCF</title><link>https://www.codewrecks.com/post/old/2011/09/managing-remote-logging-with-log4net-and-wcf/</link><pubDate>Fri, 02 Sep 2011 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/09/managing-remote-logging-with-log4net-and-wcf/</guid><description>&lt;p>I&amp;rsquo;ve applications that can work in two distinct configuration, they are based on WPF and MVVM, where the VM communicates with the Domain / Business Logic through services like &lt;em>IXxxxService&lt;/em>. All View Models depends from one or more services and thanks to Castle I can decide with configuration file which concrete class to use for each service.&lt;/p>
&lt;p>When the software is used internally, it has direct access to the Database, so I configure castle to use the concrete class of the various services, but when the software is deployed to external users,  who have no access to the intranet, all communication is done through WCF. This is done transparently because I have a facility that resolve the various IXxxxService with WCF Proxy classes.&lt;/p></description></item><item><title>Lifecycle of singleton objects</title><link>https://www.codewrecks.com/post/old/2011/05/lifecycle-of-singleton-objects/</link><pubDate>Fri, 06 May 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/lifecycle-of-singleton-objects/</guid><description>&lt;p>Some days ago I blogged about an implementation of persistent cache component based on Managed Esent and &lt;a href="http://managedesent.codeplex.com/wikipage?title=PersistentDictionaryDocumentation">PersistentDictionary&lt;/a>. This component is injected into other components thanks to Inversion of Control and it is a &lt;em>&lt;a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton&lt;/a>&lt;/em> object.&lt;/p>
&lt;p>&lt;a target="_blank" href="http://zenit.senecac.on.ca/wiki/imgs/Singleton_UML.png"> &lt;img src="http://zenit.senecac.on.ca/wiki/imgs/Singleton_UML.png" alt="External Image" />&lt;/a>&lt;/p>
&lt;p>Being a singleton is a requisite because it permits to different dependent objects to share the same cache, moreover &lt;em>PersistentDictionary&lt;/em> does not permit to have multiple instances that insists on the same directory. This will make EsentCache a perfect candidate of Singleton Object Pattern. Now another dilemma arise, &lt;em>since PersistentDictionary implements IDisposable to flush all resources into disk, who will call Dispose on a Singleton object?&lt;/em>&lt;/p></description></item><item><title>AoP with castle part 4-Adding AoP to service oriented App</title><link>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</link><pubDate>Sat, 19 Feb 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</guid><description>&lt;p>Previous Parts of the series&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/01/aop-with-castle-part-1/">Part 1 – The basic of interception&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/08/aop-with-castle-part-2-selecting-methods-to-intercept/">Part 2 – Selecting Methods to intercept&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/08/09/aop-with-castlepart-3-the-first-interceptor/">Part 3 – The first interceptor&lt;/a>&lt;/p>
&lt;p>AOP works great if you have clear interfaces where you want to put some standard and shared logic, and a Service Oriented Application falls in this category. A service is just a bunch of methods that will share some common behavior like: Validation, logging, Security etc etc, so it is a good strategy to create interceptors for each one of this behavior and associate them to service classes. The good point is that Castle has a dedicated facility to integrate with WCF, that basically is able to resolve WCF server classes with castle. Setting up such a facility is really simple, and you can follow the instruction f&lt;a href="http://stw.castleproject.org/Windsor.WCF-Integration-Facility.ashx">ound on castle&amp;rsquo;s site&lt;/a>.&lt;/p></description></item><item><title>Castle and Automock avoid resolving properties</title><link>https://www.codewrecks.com/post/old/2010/11/castle-and-automock-avoid-resolving-properties/</link><pubDate>Tue, 30 Nov 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/castle-and-automock-avoid-resolving-properties/</guid><description>&lt;p>I use &lt;a href="http://www.codewrecks.com/blog/index.php/2010/10/18/mock-service-locator-and-automocking-container-to-the-rescue/">AutoMockingContainer&lt;/a> extensively in my test projects, and I ‘ve build over time an automocking container that satisfy all of my needs. Thanks to Castle Windsor, using complex logic with the AutomockingContainer is a breeze. Suppose you have this ViewModel&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image8.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image_thumb8.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image_thumb8.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>ViewModel under test&lt;/em>&lt;/p>
&lt;p>The only aspect I&amp;rsquo;m interested in is the SelectedLinkResult public property, that have a lot of logic in the set part, this is needed to react on user selection change in the UI. Now when I use AutoMockingContainer to automock this view model I have a big problem, I need to setup a lot of expectations to make the setter logic to work, this because when I try to resolve with automock, my AutoMockingContainer try to resolve each dependency, even properties. To avoid this I need to be able to tell my container&lt;/p></description></item><item><title>Mock Service Locator Automocking container and the hard life of testers</title><link>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</link><pubDate>Sat, 16 Oct 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</guid><description>&lt;p>I know, &lt;a href="http://en.wikipedia.org/wiki/Service_locator_pattern">service locator&lt;/a> is an antipattern, but sometimes, when you begin to refactor existing code written with no IoC in mind, service locator can help you a little bit in restructuring your code. A service locator pattern work this way: you have some static or gloablly avaliable class named: ServiceLocator or IoC, and every object can query it for service implementation.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image_thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image_thumb6.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Simple schema of Service Locator Pattern, each object can query the SL asking for service&lt;/em>&lt;/p></description></item><item><title>AOP With castle-Part 3-The first interceptor</title><link>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</link><pubDate>Mon, 09 Aug 2010 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</guid><description>&lt;p>Previous Parts of the series&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/01/aop-with-castle-part-1/">Part 1 – The basic of interception&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/08/aop-with-castle-part-2-selecting-methods-to-intercept/">Part 2 – Selecting Methods to intercept&lt;/a>&lt;/p>
&lt;p>Usually the very first interceptor you can build with an AOP framework is the &lt;em>logger Interceptor&lt;/em>, because it is simple and useful, especially when you expose some services with WPF. &lt;em>Consider this scenario&lt;/em>: you expose some services with WPF, sometimes people tell you that your services have bugs or they encountered an exception, or they get wrong result, etc. In this situation you receive information like:&lt;/p></description></item><item><title>Castle MVC and verify Fluent Registration</title><link>https://www.codewrecks.com/post/old/2010/08/castle-mvc-and-verify-fluent-registration/</link><pubDate>Fri, 06 Aug 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/castle-mvc-and-verify-fluent-registration/</guid><description>&lt;p>I have a little application that has a custom MVP pattern implemented in Winform. Instead of using configuration file to register all the View (implemented by windows Forms) I decided to move towards fluent configuration to use a &lt;em>convention over configuration&lt;/em>. My convention is that all View lives in a specific namespace, and you can simply use this registration (I have a IoC static wrapper class that exposes fluent registration).&lt;/p></description></item><item><title>Aop With castle - Part 2 - Selecting methods to intercept</title><link>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-2-selecting-methods-to-intercept/</link><pubDate>Tue, 08 Jun 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-2-selecting-methods-to-intercept/</guid><description>&lt;p>Previous Part of the series&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/01/aop-with-castle-part-1/">Part 1 – The basic of interception&lt;/a>&lt;/p>
&lt;p>Some people, after looking at interceptor concept, are not fully convinced that castle can support all concepts of AOP and the first question usually is: &lt;em>How can I choose witch method intercept, instead of intercepting calls to all methods, and how can I configure this with XML file or fluent configuration?&lt;/em>. This answer can have various solutions, but in my opinion the simplest one is doing a little manual logic on interceptor.&lt;/p></description></item><item><title>Aop With castle Part 1</title><link>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</link><pubDate>Tue, 01 Jun 2010 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</guid><description>&lt;p>I made a session about Aop with castle in a Italian workshop oranized by our association DotNetMarche, and some of the attendee asked me to publish the material in my blog. So I decided to start to publish all material in english language.&lt;/p>
&lt;h4 id="introduction">&lt;font color="#004080">&lt;strong>Introduction&lt;/strong>&lt;/font>&lt;/h4>
&lt;p>If you look at canonical terms of &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aop&lt;/a> you can recognize standard ones such as Aspect, JointPoint, PointCut , but if you look at castle infrastructure you could not find any of these. This does not means that castle does not supports AOP, but is a clue that Castle handles AOP with different point of view respect to other frameworks.&lt;/p></description></item><item><title>Extending the WCF castle proxy generator</title><link>https://www.codewrecks.com/post/old/2010/04/extending-the-wcf-castle-proxy-generator/</link><pubDate>Fri, 02 Apr 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/04/extending-the-wcf-castle-proxy-generator/</guid><description>&lt;p>Since I&amp;rsquo;m using extensively the &lt;a href="http://www.codewrecks.com/blog/index.php/2009/10/21/wcf-client-proxies-created-by-wcf-and-timeout/">Wcf castle proxy generator&lt;/a> today I needed to add a new feature, I need to be able to specify via code the base address of the various services. I know that my service are usually in &lt;a href="https://www.mysite.com/services/">https://www.mysite.com/services/&lt;/a> but I want to be able to specify via code the base address, especially to target different environment, like production and test.&lt;/p>
&lt;p>To keep everything simple, I created a simple static property on the proxy creator&lt;/p></description></item><item><title>Work with castle and NHibernate trunk</title><link>https://www.codewrecks.com/post/old/2010/02/work-with-castle-and-nhibernate-trunk/</link><pubDate>Fri, 26 Feb 2010 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/02/work-with-castle-and-nhibernate-trunk/</guid><description>&lt;p>Working with open source software is fun, but sometimes can be difficult. Take as example castle and Nhibernate, since castle references nh with the NHIntegration facility, and at the same time NH references castle for Dynamic Proxy.&lt;/p>
&lt;p>A good way to survive this chaos, is working with the trunk, as I usually do, but compiling everything can be quite complex, but we are lucky because we have a project called &lt;a href="http://github.com/dagda1/horn_src">Horn&lt;/a> that does everything for you.&lt;/p></description></item><item><title>Wcf client proxies created by WCF and timeout</title><link>https://www.codewrecks.com/post/old/2009/10/wcf-client-proxies-created-by-wcf-and-timeout/</link><pubDate>Wed, 21 Oct 2009 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/wcf-client-proxies-created-by-wcf-and-timeout/</guid><description>&lt;p>In this &lt;a href="http://www.nablasoft.com/guardian/index.php/2009/05/21/castle-windsor-wcf-services-resolution-facility/">post&lt;/a>, Alessandro explains how to create dynamically wcf proxy objects through Castle Windsor. We used this factory for some services exposed with basichttp binding with no problem, now we are using WS* binding and we are experiencing some problems.&lt;/p>
&lt;p>The problem arise when the client spends too many time without calling the service. After a long inactivity when we try to call a service function we get an error. The reason can be &lt;a href="http://www.request-response.com/blog/PermaLink,guid,f731e5cc-9490-4f1e-bc7d-efb91f357cd1.aspx">seen here&lt;/a>. Our structure is a MVC on winform, so the controller depends on IxxxService interface to communicate with the server. Now I need a way to intercept communication failures and recreate another proxy to start communication again, and I do not want to insert this code everywhere I call a service function.&lt;/p></description></item><item><title>Manage Scope or Execution Context of Repository</title><link>https://www.codewrecks.com/post/old/2009/08/manage-scope-or-execution-context-of-repository/</link><pubDate>Fri, 07 Aug 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/manage-scope-or-execution-context-of-repository/</guid><description>&lt;p>In a project I&amp;rsquo;m working with &lt;a href="http://www.nablasoft.com/guardian">Guardian&lt;/a>, we are using &lt;a href="https://www.hibernate.org/343.html">NHibernate&lt;/a> behind a Repository Pattern. Despite the question if is good or not good to shield the session behind a Repository,we encountered a classic problem.&lt;/p>
&lt;p>The software is structured as service, we use &lt;a href="http://www.castleproject.org/container/facilities/trunk/nhibernate/index.html">Castle Nhibernate Facility&lt;/a> and &lt;a href="http://www.castleproject.org/container/facilities/trunk/wcf/index.html">Wcf Integration Facility&lt;/a> plus a simple interceptor that manages the concept of &lt;em>Single session per service call&lt;/em>. Now we are developing some interface in WPF, and this program can dialogate directly with database, without the need to access the db through wcf service. Since we are using MVVM, we makes heavy use of binding, and we like to use lazy load, to keep the logic simple. Instead of returning Dto, a special service class is used to directly return NHibernate persistent object, and if the user want to browse some internal collection of this object we can simply bind the view to entity collection property, and the collection will be fetched when needed with lazy load. Since we have a tree structure this solution is really simple and works really well.&lt;/p></description></item><item><title>AspNet ObjectDataSource and Castle Windsor</title><link>https://www.codewrecks.com/post/old/2009/05/aspnet-objectdatasource-and-castle-windsor/</link><pubDate>Fri, 22 May 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/aspnet-objectdatasource-and-castle-windsor/</guid><description>&lt;p>I&amp;rsquo;m restructuring a portion of a site, it is well structured, and all logic is inside business classes in another assembly, and they are accessed with ObjectDataSources. My problem is that with the new structure I cannot refer to the concrete classes anymore, but I need to resolve them with an IoC container, like Castle Windsor.&lt;/p>
&lt;p>The solution to this problem was really simple, I created this simple class&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>Public Class IoCObjectDataSource : Inherits ObjectDataSource
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Public Shadows Property TypeName() As String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Return MyBase.TypeName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> End Get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Set(ByVal &lt;span style="color:#66d9ef">value&lt;/span> As String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyBase.TypeName = IoC.GetConcreteTypeFor(Type.GetType(&lt;span style="color:#66d9ef">value&lt;/span>)).FullName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> End Set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> End Property
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>End Class&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>It inherits from the basic ObjectDataSource, but it shadows the TypeName property; in setter part of TypeName it call a IoC wrapper to get the concrete name of the component configured for a given interface. Now I can specify an interface instead of the real type.&lt;/p></description></item><item><title>Castle Wcf facility integration on windows service or console</title><link>https://www.codewrecks.com/post/old/2009/04/castle-wcf-facility-integration-on-windows-service-or-console/</link><pubDate>Mon, 27 Apr 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/04/castle-wcf-facility-integration-on-windows-service-or-console/</guid><description>&lt;p>Castle has a &lt;a href="http://www.castleproject.org/container/facilities/trunk/wcf/index.html">great facility&lt;/a> to resolve Wcf services with castle windsor. This is really useful because it helps you when your concrete service classes have dependency to be resolved. There are a lot of tutorials or blog posts on how to configure it when you want to host service in IIS, but little bit about how to do self hosting, for example in a console application or in a windows service. Here is how to accomplish this. Suppose you have this little service&lt;/p></description></item><item><title>Castle windsor converter for Regex</title><link>https://www.codewrecks.com/post/old/2008/06/castle-windsor-converter-for-regex/</link><pubDate>Wed, 04 Jun 2008 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/castle-windsor-converter-for-regex/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2008/06/04/castle-windsor-no-converter-registered-to-handle-the-type/">previous&lt;/a> post I explained how to build a Converter for castle, to make possibile specify regular expression in configuration file. The example is simplicistic, let’s see how to extend to create a better converter for Regular Expression.&lt;/p>
&lt;p>The main problem is that RegularExpression is not only defined by the pattern but also by regular expression option. I decided to use this syntax&lt;/p>
&lt;p>{pattern},{comma separated option}&lt;/p>
&lt;p>so a possible definition is&lt;/p></description></item><item><title>Castle Windsor quotNo converter registered to handle the typequot</title><link>https://www.codewrecks.com/post/old/2008/06/castle-windsor-no-converter-registered-to-handle-the-type/</link><pubDate>Wed, 04 Jun 2008 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/06/castle-windsor-no-converter-registered-to-handle-the-type/</guid><description>&lt;p>If you have an object that has a property of some type that is not known by windsor (as example Regex), if you try to configure it with xml the error “No converter registered to handle the type” will occurs. This happens because the container read configuration as string, and then it has to convert to a type it does not know. The solution is to write few line of code to create a converter&lt;/p></description></item><item><title>Again on castle windsor and default component</title><link>https://www.codewrecks.com/post/old/2008/05/again-on-castle-windsor-and-default-component/</link><pubDate>Tue, 27 May 2008 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/again-on-castle-windsor-and-default-component/</guid><description>&lt;p>In the &lt;a href="http://www.codewrecks.com/blog/index.php/2008/05/27/castle-windsor-and-default-component/">last post&lt;/a> I gave a solution to make possible to specify the default component in a dependency resolution with castle windsor. That solution is good for automatic dependency resolution, with respect to the previous post if you have a IPageDownloader that has a property of type ICache, if you do not set that property in castle configuration, at resolution time the Cache property of the PageDownloader will be the one marked with default=”true” if any.&lt;/p></description></item><item><title>Castle Windsor and default component</title><link>https://www.codewrecks.com/post/old/2008/05/castle-windsor-and-default-component/</link><pubDate>Tue, 27 May 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/05/castle-windsor-and-default-component/</guid><description>&lt;p>Castle windsor is a really good library of IoC, but has some issues that sometimes can lead to obscure configuration. One of the most important is the concept of a “default component” suppose I create an &lt;em>ICache&lt;/em> interface and I want some objects to be “cache-enabled”. My approach is usually that of a &lt;a href="http://en.wikipedia.org/wiki/Null_Object_pattern">NullObject pattern&lt;/a>, I build a NullCache component that does not store any object and always return null when we ask for an object in the cache. This is usually good because the code should not check for null when deal with a cache. Another way to use this component is to use &lt;a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern&lt;/a> to create component with cache and component with no cache, but for some objects I really need the cache object to be part of the real implementation.&lt;/p></description></item><item><title>Again and again on Castle and lifecycle</title><link>https://www.codewrecks.com/post/old/2008/03/again-and-again-on-castle-and-lifecycle/</link><pubDate>Thu, 13 Mar 2008 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/03/again-and-again-on-castle-and-lifecycle/</guid><description>&lt;p>You can find at this subversion repository ( &lt;a href="http://nablasoft.googlecode.com/svn/trunk/Castle/TestIOC" title="http://nablasoft.googlecode.com/svn/trunk/Castle/TestIOC">http://nablasoft.googlecode.com/svn/trunk/Castle/TestIOC&lt;/a> ) a simple project that contains a custom lifecycle that bound the lifecycle of objects to a  context. This lifecycle was created to address the problem of disposing inner object, &lt;a href="http://www.nablasoft.com/Alkampfer/?p=156">you can find the deails here&lt;/a>. This new version support both singleton and transient objects, this a sample test.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> [Test]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public void BaseTestSingletonContextDisposable3() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DisposableComponent tran1, tran2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> using (WindsorContainer ioc = new WindsorContainer(new XmlInterpreter(&amp;#34;ConfigurationCustom.xml&amp;#34;))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> using (ContextLifecycle.BeginThreadContext()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tran1 = ioc.Resolve&lt;span style="color:#f92672">&amp;lt;DisposableComponent&amp;gt;&lt;/span>(&amp;#34;SingletonDisposableCon&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tran2 = ioc.Resolve&lt;span style="color:#f92672">&amp;lt;DisposableComponent&amp;gt;&lt;/span>(&amp;#34;SingletonDisposableCon&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.That(tran1, Is.EqualTo(tran2));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.That(tran1.ITest, Is.EqualTo(tran2.ITest));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.IsTrue(tran1.ITest.IsDisposed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.IsTrue(tran2.ITest.IsDisposed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.IsTrue(tran1.IsDisposed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.IsTrue(tran2.IsDisposed);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This test shows that an object with singletonContext custom lifecycle is singleton inside a context, and when the context ends all it gets disposed and all the inner references are disposed too. This lifecycle has the main purpose of estabilishing a context that once ended dispose every object created inside the context itself.&lt;/p></description></item><item><title>Again on Castle Transient and the Custom lifecycle</title><link>https://www.codewrecks.com/post/old/2008/02/again-on-castle-transient-and-the-custom-lifecycle/</link><pubDate>Fri, 29 Feb 2008 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/again-on-castle-transient-and-the-custom-lifecycle/</guid><description>&lt;p>Two days ago hammet link one of my old post, (&lt;a href="http://hammett.castleproject.org/?p=252%29">http://hammett.castleproject.org/?p=252)&lt;/a> I want now to make another considerations. The end of my old post (&lt;a href="http://www.nablasoft.com/Alkampfer/?p=105%29">http://www.nablasoft.com/Alkampfer/?p=105)&lt;/a> reported this problem, I have a class DisposableCon that implements IDisposable, this class declare a dependency from an object That implements ITest, This is the object model&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image5.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb5.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2008/02/image-thumb5.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>This simple model declare a class called DisposableCon, in the constructor this class needs an instance of ITest, implemented by DisposableTest, a class that implements Disposable and ITest. Both these two classes are defined as transient in the config file.&lt;/p></description></item><item><title>Write a custom lifecycle for castle windsor</title><link>https://www.codewrecks.com/post/old/2007/09/write-a-custom-lifecycle-for-castle-windsor/</link><pubDate>Tue, 11 Sep 2007 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/09/write-a-custom-lifecycle-for-castle-windsor/</guid><description>&lt;p>In &lt;a href="http://www.nablasoft.com/Alkampfer/?p=105">another post&lt;/a> I spoke about castle Windsor and lifecycle of objects, now I want to show how to write a custom lifecycle. First of all the class must inherit from &lt;em>AbstractLifestyleManager&lt;/em> class, then we must choose where to store the instance of the object that are created by the container. Since I want to build a lifecycle that can be used both from winform code and from web code I choose to use &lt;a href="http://msdn2.microsoft.com/en-us/library/system.runtime.remoting.messaging.callcontext.aspx">System.Runtime.Remoting.Messaging.CallContext class&lt;/a>, this class is used internally to implement the HttpContext so it can be used to store object for a HttpCall. But I need another behavior, I need to programmatically manage the lifecycle from calling code, this is especially useful for testing purpose. The result is a class called &lt;em>ManageableLifeCycle&lt;/em> used to implement a custom lifecycle that can be managed from called code.&lt;/p></description></item><item><title>CastleWindsor and lifecycle of objects</title><link>https://www.codewrecks.com/post/old/2007/08/castlewindsor-and-lifecycle-of-objects/</link><pubDate>Wed, 08 Aug 2007 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/08/castlewindsor-and-lifecycle-of-objects/</guid><description>&lt;p>In a &lt;a href="http://www.nablasoft.com/Alkampfer/?p=104">previous post&lt;/a> I discuss about the importance of calling IWindsorContainer.Release() for all object created through Windsor, to avoid memory leak. There is a little correction to do, the container keeps a reference to an object created through Resolve&amp;lt;T&amp;gt; only if that object implements IDisposable. But it is important to really understand the concept of lifecycle of objects in Windsor. Suppose you have an object that implements IDisposable and tells if it was disposed with a simple property called aProperty&lt;/p></description></item><item><title>The importance of WindsorContainerRelease</title><link>https://www.codewrecks.com/post/old/2007/08/the-importance-of-windsorcontainerrelease/</link><pubDate>Wed, 08 Aug 2007 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/08/the-importance-of-windsorcontainerrelease/</guid><description>&lt;p>The WindsorContainer has a method call release that must be called to release the instance of transient object that gets created by the container itself. If you forget to call release, the container keeps a reference to all transient object created with resolve, that prevent the garbage collector from reclaiming the memory of that object. Suppose you have such a class.&lt;/p>
&lt;p>publicclassDisposableTest : IDisposable, ITest {&lt;br>
publicstaticInt32 NumOfDispose = 0;&lt;/p></description></item><item><title>Castle Vs Spring Override delle properties</title><link>https://www.codewrecks.com/post/old/2007/08/castle-vs-spring-override-delle-properties/</link><pubDate>Thu, 02 Aug 2007 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/08/castle-vs-spring-override-delle-properties/</guid><description>&lt;p>One of the capabilities of Windsor that I miss much from Spring is the ability to inject dependencies at runtime, let’s do an example.&lt;/p>
&lt;p>publicclassAlertManager {&lt;/p>
&lt;p>privateIMessageSender mSender;&lt;/p>
&lt;p>public AlertManager(IMessageSender sender) {&lt;br>
mSender = sender;&lt;br>
}&lt;/p>
&lt;p>publicILogger Logger {&lt;br>
get { return mLogger; }&lt;br>
set { mLogger = value; }&lt;br>
}&lt;br>
privateILogger mLogger = DevNullLogger.Instance;&lt;/p>
&lt;p>publicvoid Alert(String message) {&lt;br>
mSender.Send(“Alert received”, message);&lt;br>
if (mLogger.IsDebugEnabled) &lt;br>
mLogger.LogDebug(String.Format(“Alert send {0} message”, message));&lt;br>
}&lt;br>
}&lt;/p>
&lt;p>&amp;lt;component&lt;/p>
&lt;p>id=“MessageSenderMail”&lt;/p></description></item><item><title>Windsor Container ResolveIDictionary</title><link>https://www.codewrecks.com/post/old/2007/05/windsor-container-resolveidictionary/</link><pubDate>Fri, 18 May 2007 22:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2007/05/windsor-container-resolveidictionary/</guid><description>&lt;p>Castle framework is really interesting, but do not forget to checkout current trunk in subversion repository, since it is full of new and exciting features. In a little demo that I’m doing to made a screencast for &lt;a href="http://dotnetmarche.org/">dotnetmarche&lt;/a> community, I show how to structure a simple web page to follow &lt;a href="http://en.wikipedia.org/wiki/Design_For_Test">Design For Testability&lt;/a> principles, and I made a really basic example of a page with a controller. Since the controller needs to use the session I abstracted the session with an interface&lt;/p></description></item></channel></rss>