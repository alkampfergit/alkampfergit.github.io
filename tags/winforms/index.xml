<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Winforms on Codewrecks</title><link>https://www.codewrecks.com/tags/winforms/</link><description>Recent content in Winforms on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 30 Mar 2011 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/winforms/index.xml" rel="self" type="application/rss+xml"/><item><title>Winform hell-running programs with low resolution</title><link>https://www.codewrecks.com/post/old/2011/03/winform-hellrunning-programs-with-low-resolution/</link><pubDate>Wed, 30 Mar 2011 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/winform-hellrunning-programs-with-low-resolution/</guid><description>I&amp;rsquo;ve a problem, we developed a winform program that has a really big startup form. The height of the form is 880 pixel and is designed to work on big monitors. Clearly everything is resizable, so if you resize the form you can still work with it, with no problem.
Figure 1: the form resized
as you can see the form is divided in: blue part (filters), yellow part (result of the query), and finally red part (detail of selected element).</description></item><item><title>Hosting a WPF control in Winform with a scrollable Panel</title><link>https://www.codewrecks.com/post/old/2011/03/hosting-a-wpf-control-in-winform-with-a-scrollable-panel/</link><pubDate>Fri, 18 Mar 2011 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/hosting-a-wpf-control-in-winform-with-a-scrollable-panel/</guid><description>I have a winform project that uses a WPF control for reports. Everything went good, until we need to add more report to a form, and requirements told us to create a scrollbar to show all reports. I simply put a panel with autoscroll = true, and inside it I put a TableLayoutPanel and everything seems to works, excepts that ElementHost used to wrap the WPF controls when scrolled shows a messy interface.</description></item><item><title>Force databinding update in Winform without waiting for lose focus</title><link>https://www.codewrecks.com/post/old/2010/01/force-databinding-update-in-winform-without-waiting-for-lose-focus/</link><pubDate>Thu, 14 Jan 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/force-databinding-update-in-winform-without-waiting-for-lose-focus/</guid><description>I have a winform application where the user can select an element into a grid, edit its properties, and then decide if the modification should be saved or rejected. Thanks to binding, IEditableObject and INotifyPropertyChanged, writing such feature is a breeze, but the user signaled me that something was wrong. He told me: *suppose you choose an element, then change a value in the combo, nothing happens. When I press tab or move the Save and Cancel button become visible, but I wanto them to be visible as soon as I press a char into textbox or change a value in the combo.</description></item><item><title>Implement a simple undoable editing with a winform GridView</title><link>https://www.codewrecks.com/post/old/2009/10/implement-a-simple-undoable-editing-with-a-winform-gridview/</link><pubDate>Thu, 22 Oct 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/10/implement-a-simple-undoable-editing-with-a-winform-gridview/</guid><description>I need to implement a very simple interface, the user loads from a service a certain amount of objects displayed into a gridview. Then selecting an object in the gridview the user can edit object properties in a detail panel situated under the grid. Specification ask me to
avoid that the user update some property of the object, then forget to press Save button and move to another object forgetting to update data calling the service update function.</description></item></channel></rss>