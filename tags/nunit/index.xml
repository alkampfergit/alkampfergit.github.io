<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nunit on Codewrecks</title><link>https://www.codewrecks.com/tags/nunit/</link><description>Recent content in Nunit on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 20 Feb 2016 10:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/nunit/index.xml" rel="self" type="application/rss+xml"/><item><title>Run Selenium Test in build vNext</title><link>https://www.codewrecks.com/post/old/2016/02/run-selenium-test-in-build-vnext/</link><pubDate>Sat, 20 Feb 2016 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/run-selenium-test-in-build-vnext/</guid><description>Previous Articles:
Parametrize NUnit Selenium Test to run with different browsers To run a Selenium test in a build vNext there are some modification to do apply to previous example. Let’s see how simple is running our Selenium Tests in a VSTS Build vNext.
The first modification requires adding a reference to PhantomJS, an Headless browser based on webkit that is capable of browsing a site and run javascript without a UI.</description></item><item><title>Parametrize NUnit Selenium Test to run with different browsers</title><link>https://www.codewrecks.com/post/old/2016/02/parametrize-nunit-selenium-test-for-run-with-different-browsers/</link><pubDate>Fri, 19 Feb 2016 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/02/parametrize-nunit-selenium-test-for-run-with-different-browsers/</guid><description>Parametrizing NUnit Tests is a new feature introduced with version 2.5 and this feature can be really useful in a variety of scenarios, but when it is time to use Selenium this is a killer feature.
I’m not going to cover Selenium WebDriver component, but basically it allows to write tests that can drive a Browser to execute test against your web application. In this scenario a killer feature is being able to specify the list of the browsers to use in a way that is completely indipendent from your test.</description></item><item><title>Nunit test not found for some assemblies with Visual Studio Test Runner</title><link>https://www.codewrecks.com/post/old/2015/04/nunit-test-not-found-for-some-assemblies-with-visual-studio-test-runner/</link><pubDate>Wed, 22 Apr 2015 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/04/nunit-test-not-found-for-some-assemblies-with-visual-studio-test-runner/</guid><description>I’ve a project in Visual Studio 2013 where one of the assembly containing Tests refuses to show tests in Test Explorer window. The solution has tests written both in Nunit and in MSpec, and everything is good except for that specific assembly. If you notice that Test Explorer window misses some tests, the first thing you need to check is the output windows, where you can find some output for Test Adapters.</description></item><item><title>Running NUnit and xUnit tests in TFS11 build</title><link>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</link><pubDate>Mon, 05 Mar 2012 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</guid><description>I’ve blogged in the past various solution to run NUnit tests during a TFS build, and now it is time to make it again for TFS11, but this time it is incredibly simple, because the new Test Runner supports multiple frameworks, so it works almost automatically.
You can read from Peter Provost blog that actually we have three plugin for UTE (Unit Test Explorer) available: Nunit, xUnit and HTML/JAvascript, they are simple.</description></item><item><title>Unit test NHibernate query to verify N1</title><link>https://www.codewrecks.com/post/old/2011/12/unit-test-nhibernate-query-to-verify-n1/</link><pubDate>Fri, 30 Dec 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/12/unit-test-nhibernate-query-to-verify-n1/</guid><description>When you work with ORM like nhibernate, having a tool like nhprof is the key of success. But even with NHProfiler you could not prevent people of doing wrong stuff because they do not use it :). I have a simple scenario, a developer changed a method on the server lazily fetching a property of a large resultset. The effect is that the service call, that usually responded in milliseconds starts to respond in 10 seconds.</description></item><item><title>Test helper for a single method</title><link>https://www.codewrecks.com/post/old/2010/12/test-helper-for-a-single-method/</link><pubDate>Wed, 29 Dec 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/12/test-helper-for-a-single-method/</guid><description>I&amp;rsquo;ve build during years a test helper infrastructure that permits me to decorate a test fixture with some custom attributes that are capable to execute code before and after fixture setup/teardown or test setup/teardown. Now my dear friend Ugo needs for Dexter a modified version of this framework to be able to apply attributes directly to tests.
Basically Ugo needs to change the principal during each test, and he want to be able to write code like this one.</description></item></channel></rss>