<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Entity Framework on Codewrecks</title><link>https://www.codewrecks.com/tags/entity-framework/</link><description>Recent content in Entity Framework on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 28 Nov 2013 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/entity-framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Entity Framework Code First and TPH Inheritance mapping</title><link>https://www.codewrecks.com/post/old/2013/11/entity-framework-code-first-and-tph-inheritance-mapping/</link><pubDate>Thu, 28 Nov 2013 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/11/entity-framework-code-first-and-tph-inheritance-mapping/</guid><description>&lt;p>The major pain when you &lt;strong>switch from two similar tools (from NH to EF in this specific scenario)&lt;/strong> is that you need to &lt;strong>learn again how to obtain the same results, but in a different way&lt;/strong>. Yesterday I was mapping a hierarcy of objects in Entity Framework, I’ve a scenario where Table Per Type was the right solution and I’ve managed to create the fluent mapping in really short time, but when it was time to use Table Per Hierarchy the situation got worse.&lt;/p></description></item><item><title>Entity Framework 5 First Steps-Mapping</title><link>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-first-stepsmapping/</link><pubDate>Thu, 27 Sep 2012 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-first-stepsmapping/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2012/09/25/entity-framework-5-0-first-steps-and-impressions/?preview=true">previous article&lt;/a> I’ve explained how simple is starting to use EF5 to access a database and use Database-Migrations to create a database suitable to contain your entities (with a simple Update-Command from the package manager console). When you show this technique to programmers the first complain they have is “ &lt;strong>the structure of the generated tables is not suitable to me&lt;/strong> ”.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2012/09/image8.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2012/09/image_thumb8.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2012/09/image_thumb8.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Database generated with previous code example&lt;/em>&lt;/p></description></item><item><title>Entity Framework 50 first steps and impressions</title><link>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-0-first-steps-and-impressions/</link><pubDate>Tue, 25 Sep 2012 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/entity-framework-5-0-first-steps-and-impressions/</guid><description>&lt;p>I’m mostly a NHibernate user, but EF code first approach is intriguing, especially &lt;strong>in situation where the customer prefer to use only Microsoft Stack libraries&lt;/strong> , thus EF 5.0 is a good approach to write quickly an Efficient data access module in really few clicks. &lt;strong>Enabling EF5 on your own project is as simple as adding a reference with Nuget, go to package manager and type&lt;/strong> &lt;em>&lt;font size="3">install-package EntityFramework&lt;/font>&lt;/em>&lt;/p>
&lt;p>and the game is done. Now you can start writing a simple class that will represent a table in the database.&lt;/p></description></item><item><title>Entity Framework error 3002 on views when model updated</title><link>https://www.codewrecks.com/post/old/2012/01/entity-framework-error-3002-on-views-when-model-updated/</link><pubDate>Wed, 25 Jan 2012 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/01/entity-framework-error-3002-on-views-when-model-updated/</guid><description>&lt;p>One of the most annoying problem with the first version of entity Framework is that you have barely no option other than go with “Database First approach”, and when you start mapping database views your life started to become difficult.&lt;/p>
&lt;p>The first obvious problem is that the designer, during the import phase from database, try to detect in the view any not-null column and make it part of the primary key of the entity. If you decide to live with it (and having entities with lot of field used as primary keys), you probably will incur in the error 3002 when you update a view and then update the model from database.&lt;/p></description></item><item><title>Entity Framework 41-Collection Relations</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</link><pubDate>Wed, 13 Jul 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2011/07/11/entity-framework-4-1-first-steps/">Part 1: First Steps&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2011/07/12/entity-framework-4-1-managing-relations/">Part 2: Managing Relations&lt;/a>&lt;/p>
&lt;p>Relations between objects are not limited to an object that keep a reference to another object (as seen in part 2), but I can have an object that contains a list of other objects. This is the classic RDBMS rough equivalent of the One-To-Many relation. I decided that my Warrior can carry a certain number of items, so I defined an Item class and a property on Warrior class to hold reference to a list of Items.&lt;/p></description></item><item><title>Entity Framework a super dataset</title><link>https://www.codewrecks.com/post/old/2011/06/entity-framework-a-super-dataset/</link><pubDate>Thu, 09 Jun 2011 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/entity-framework-a-super-dataset/</guid><description>&lt;p>Entity Framework is quite a good product, but in my opinion still misses some point to be called an ORM. I must admit that I never used the 4.1 Code first in real project, but there are some stuff that still does not convince me when using EF.&lt;/p>
&lt;h3 id="when-i-decide-to-use-ef-and-not-nh">When I decide to use EF (and not NH)&lt;/h3>
&lt;p>Sometimes I need to access small legacy databases to do a small amount of operations and I must admit that adding a EF Model from Visual Studio is a matter of seconds and the LINQ provider of EF is quite good so it is a valuable alternative to create a quick DAL. I have a simple database (four tables), I created an EF model, and then issue this query.&lt;/p></description></item><item><title>Mapping private properties with EF 41 RC and Fluent mapping</title><link>https://www.codewrecks.com/post/old/2011/03/mapping-private-properties-with-ef-4-1-rc-and-fluent-mapping/</link><pubDate>Mon, 21 Mar 2011 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/mapping-private-properties-with-ef-4-1-rc-and-fluent-mapping/</guid><description>&lt;p>EF &lt;a href="http://blogs.msdn.com/b/adonet/archive/2011/03/15/ef-4-1-release-candidate-available.aspx">4.1 is now in RC&lt;/a> phase and as a NHibernate user I&amp;rsquo;m curious to check the fluent API to map entities to database. One of the feature that I and &lt;a href="http://blogs.ugidotnet.org/pape/Default.aspx">Andrea&lt;/a> miss most is the possibility to map private properties with fluent interface. It seems strange to map private properties at once, but it can be useful in DDD. Suppose you have these simple classes.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/03/image9.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/03/image_thumb12.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/03/image_thumb12.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>A really simple domain&lt;/em>&lt;/p></description></item><item><title>Do you ORM</title><link>https://www.codewrecks.com/post/old/2010/11/do-you-orm/</link><pubDate>Fri, 05 Nov 2010 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/11/do-you-orm/</guid><description>&lt;p>I really believe that I could not live anymore without ORM, and this is one simple reason.&lt;/p>
&lt;p>Suppose in NorthWind you should query for all Customers that have at least four orders where the total discount  is greater than 100.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image4.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image_thumb4.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/11/image_thumb4.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Figure1:&lt;/strong> &lt;em>LINQ query to select all customers that have at least three orders with total discount greater than 100&lt;/em>&lt;/p>
&lt;p>Doing this in EF with a LINQ query is really simple (Figure 1), because you can express it with condition on the object model, and you can use the Count() LINQ operator and calculate the discount with simple math. The most important part is that you could be a SQL newbie, but you are still able to create a complex query. Now suppose that you should also paginate this result server side.&lt;/p></description></item><item><title>A dto factory code generator with visual studio T4</title><link>https://www.codewrecks.com/post/old/2009/06/a-dto-factory-code-generator-with-visual-studio-t4/</link><pubDate>Wed, 24 Jun 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/a-dto-factory-code-generator-with-visual-studio-t4/</guid><description>&lt;p>&lt;a href="http://en.wikipedia.org/wiki/Data_Transfer_Object">Data Transfer Objects&lt;/a>, best known as Dto, are an essential part of projects that uses services or Domain Model. Dto are great, but the disadvantage is that maintaining Dto objects is a pain, because they are composed by repetitive code, and you have no fun in writing them.&lt;/p>
&lt;p>Since building a Dto is a mechanical process it is better to use a code generation tool to generate them with little effort. If you work with visual studio 2008 the best choice in Code Generator is T4, because it is included in Visual Studio and is really good. I do not want to cover T4 syntax, because you can find tons of information following &lt;a href="http://www.hanselman.com/blog/T4TextTemplateTransformationToolkitCodeGenerationBestKeptVisualStudioSecret.aspx">this post links&lt;/a>.&lt;/p></description></item><item><title>Entity Framework dynamic sorting and pagination</title><link>https://www.codewrecks.com/post/old/2009/03/entity-framework-dynamic-sorting-and-pagination/</link><pubDate>Sat, 21 Mar 2009 01:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/entity-framework-dynamic-sorting-and-pagination/</guid><description>&lt;p>Suppose you need to paginate and letting the user choose the sort field in entity framework, lets see how you can accomplish this.&lt;/p>
&lt;p>In EntityFramework you can query with E-SQL both building a query in string format, but also using standard method syntax, here is an example (based on NorthWind)&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> query = context.Customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .OrderBy(&lt;span style="color:#e6db74">&amp;#34;it.ContactTitle&amp;#34;&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>query.Dump();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This work perfectly, you can sort dynamically only specifying the property you want to use for sorting. Adding pagination is a breeze&lt;/p></description></item><item><title>Manage Trees with entity framework</title><link>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework/</link><pubDate>Fri, 27 Feb 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework/</guid><description>&lt;p>Quite often you need to store in database Hierarchical structure that are logically represented by a tree. There are a lot of techniques around there, but one of the most common is using a simple foreign key that refers to the same table, as in the following example&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image-thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/02/image-thumb6.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>If you map this table with entity framework you will obtain automatically a tree structure, you only need to rename the Relationship field because they are named Employee and Employee1, I renamed them in &lt;strong>Parent&lt;/strong> and &lt;strong>Childs&lt;/strong> , because the resulting in-memory structure is clearer&lt;/p></description></item><item><title>Extension method to add LoadByKey to EntityFrameworks context</title><link>https://www.codewrecks.com/post/old/2009/02/extension-method-to-add-loadbykey-to-entityframeworks-context/</link><pubDate>Wed, 18 Feb 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/extension-method-to-add-loadbykey-to-entityframeworks-context/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/18/entity-framework-relations-and-entitykey/">previous post&lt;/a> I left to the reader the task to build a LoadByKey extension method to make it easy loading entities by key in project with entity framework, I think that is quite interesting to spent a little bit on in. First of all I suggest you to read &lt;a href="http://www.scip.be/index.php?Page=ArticlesNET24#Metada">this post&lt;/a> about metadata and Entity Framework, this post suggested me this solution.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> T LoadByKey&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span>(this ObjectContext context, params &lt;span style="color:#66d9ef">Object&lt;/span>[] keyValue)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">3&lt;/span> EntityType &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">from&lt;/span> meta &lt;span style="color:#66d9ef">in&lt;/span> context.MetadataWorkspace.GetItems(DataSpace.CSpace)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#66d9ef">where&lt;/span> meta.BuiltInTypeKind &lt;span style="color:#f92672">==&lt;/span> BuiltInTypeKind.EntityType
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> meta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">6&lt;/span> .OfType&lt;span style="color:#f92672">&amp;lt;&lt;/span>EntityType&lt;span style="color:#f92672">&amp;gt;&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">7&lt;/span> .&lt;span style="color:#66d9ef">Where&lt;/span>(e &lt;span style="color:#f92672">=&amp;gt;&lt;/span> e.Name &lt;span style="color:#f92672">==&lt;/span> typeof(T).Name).Single();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">8&lt;/span> IEnumerable&lt;span style="color:#f92672">&amp;lt;&lt;/span>KeyValuePair&lt;span style="color:#f92672">&amp;lt;&lt;/span>string, &lt;span style="color:#66d9ef">object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> entityKeyValues &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span>.KeyMembers.&lt;span style="color:#66d9ef">Select&lt;/span>((k, i) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> KeyValuePair&lt;span style="color:#f92672">&amp;lt;&lt;/span>string, &lt;span style="color:#66d9ef">object&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(k.Name, keyValue[i]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">10&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">11&lt;/span> EntityKey &lt;span style="color:#66d9ef">key&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> EntityKey(context.GetType().Name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> typeof(T).Name, entityKeyValues);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">12&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> (T)context.GetObjectByKey(&lt;span style="color:#66d9ef">key&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">13&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>In line 3 I begin a query to load the &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.metadata.edm.entitytype.aspx">EntityType&lt;/a> object related to the type of object I need to load. The &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.metadata.edm.aspx">System.Data.Metadata.Edm&lt;/a> namespace is a place where you can find plenty of information about how your data is structured. I simply query the MetadataWorkspace getting the items of type &lt;a href="http://msdn.microsoft.com/en-us/library/system.data.metadata.edm.dataspace.aspx">DataSpace.CSpace&lt;/a> or the &lt;em>Conceptual Model.&lt;/em> The Conceptual model can be tricky to use, to familiarize with it I suggest you to use &lt;a href="http://www.linqpad.net/">LINQPad&lt;/a> to run the query of line 3, you get this result (all properties collapsed)&lt;/p></description></item><item><title>Entity Framework relations and entityKey</title><link>https://www.codewrecks.com/post/old/2009/02/entity-framework-relations-and-entitykey/</link><pubDate>Wed, 18 Feb 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/entity-framework-relations-and-entitykey/</guid><description>&lt;p>Suppose you generate an Entity Framework model on standard northwind database, you have a customer id and you want to generate an order for that customer. A possible solution is&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-CSharp" data-lang="CSharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> (ModelTestBase context = &lt;span style="color:#66d9ef">new&lt;/span> ModelTestBase())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Orders order = &lt;span style="color:#66d9ef">new&lt;/span> Orders();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.Freight = &lt;span style="color:#ae81ff">1.0&lt;/span>M;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.RequiredDate = order.OrderDate = DateTime.Now;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.Customers = context.Customers.Where(c =&amp;gt; c.CustomerID == &lt;span style="color:#e6db74">&amp;#34;ALFKI&amp;#34;&lt;/span>).First();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.AddToOrders(order);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context.SaveChanges();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>This code is perfectly valid, but is not the smartest thing to do, if you analyze traffic with profiler you can verify that this code executes a select to retrieve the customer, and then inserts the order into orders table. The question is, since I already have the ID of the customer &lt;em>why I need to retrieve the whole customer instance from database only to set a relation?&lt;/em>. When you need to setup a relations EF needs only to know the key of related object, it does not really cares about other properties of Customers object, it needs only the key to set the foreign key, a better solution is the following&lt;/p></description></item></channel></rss>