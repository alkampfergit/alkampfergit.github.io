<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EF Code First on Codewrecks</title><link>https://www.codewrecks.com/tags/ef-code-first/</link><description>Recent content in EF Code First on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 28 Aug 2013 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/ef-code-first/index.xml" rel="self" type="application/rss+xml"/><item><title>Entity framework and Table splitting with Code First</title><link>https://www.codewrecks.com/post/old/2013/08/entity-framework-and-table-splitting-with-code-first/</link><pubDate>Wed, 28 Aug 2013 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/entity-framework-and-table-splitting-with-code-first/</guid><description>Nhibernate supports lazy loading for single properties and this solves perfectly the situation where a table has on or more field with a lot of data and you absolutely need to avoid loading all that data each time you load the entity. Basically with NH you can define Lazy Properties and the content of that property is loaded from the database only if you access it.
Entity framework does not supports this feature, but it can solve this scenario with Table Splitting, as described by Julie Lerman.</description></item><item><title>Entity Framework 41 8211 Querying objects</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-querying-objects/</link><pubDate>Tue, 19 Jul 2011 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-querying-objects/</guid><description>Part 1: First Steps
Part 2: Managing Relations
Part 3: Collection Relations
In the first three parts of this little tutorial I showed how easy is to save objects to database with EF 4.1 code first approach, now it is time to understand how to retrieve objects from the database.
Querying objects from database is really easy in EF, because you have full LINQ support; as an example suppose you want to retrieve all warriors with a name that contains a particular search string.</description></item><item><title>Entity Framework 41-Collection Relations</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</link><pubDate>Wed, 13 Jul 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1collection-relations/</guid><description>Part 1: First Steps
Part 2: Managing Relations
Relations between objects are not limited to an object that keep a reference to another object (as seen in part 2), but I can have an object that contains a list of other objects. This is the classic RDBMS rough equivalent of the One-To-Many relation. I decided that my Warrior can carry a certain number of items, so I defined an Item class and a property on Warrior class to hold reference to a list of Items.</description></item><item><title>Entity Framework 41 managing relations</title><link>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-managing-relations/</link><pubDate>Tue, 12 Jul 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/entity-framework-4-1-managing-relations/</guid><description>Part 1: First Steps
In previous post I showed how you can persist an object to the database thanks to EF41 and few lines of code, now it is time to understand how to manage relations. First of all create another class called weapon and then create a property of type Weapon into the Warrior class.
Figure 1: New model, the warrior has a property called ActiveWeapon of type Weapon</description></item><item><title>Mapping private properties with EF 41 RC and Fluent mapping</title><link>https://www.codewrecks.com/post/old/2011/03/mapping-private-properties-with-ef-4-1-rc-and-fluent-mapping/</link><pubDate>Mon, 21 Mar 2011 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/03/mapping-private-properties-with-ef-4-1-rc-and-fluent-mapping/</guid><description>EF 4.1 is now in RC phase and as a NHibernate user I&amp;rsquo;m curious to check the fluent API to map entities to database. One of the feature that I and Andrea miss most is the possibility to map private properties with fluent interface. It seems strange to map private properties at once, but it can be useful in DDD. Suppose you have these simple classes.
Figure 1: A really simple domain</description></item></channel></rss>