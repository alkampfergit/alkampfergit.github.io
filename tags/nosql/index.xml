<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NoSql on Codewrecks</title><link>https://www.codewrecks.com/tags/nosql/</link><description>Recent content in NoSql on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 May 2021 20:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/nosql/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep MongoDb logfile size at bay</title><link>https://www.codewrecks.com/post/general/mongo-db-logfiles/</link><pubDate>Thu, 27 May 2021 20:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongo-db-logfiles/</guid><description>&lt;p>MongoDb is a great option for NoSql but sometimes it is installed in production forgetting some basic maintenance tasks, like managing log files. You should remember that &lt;a href="https://docs.mongodb.com/manual/tutorial/rotate-log-files/">MongoDb does not automatically rotate log files&lt;/a> as for official documentation.&lt;/p>
&lt;p>This lead to logfiles of Gigabyte size and sometimes they can even be a space problem in your installation. If a &lt;strong>logfile is gone out of control, you cannot delete because it is in use by mongod process, so you need to ask for a manual rotate&lt;/strong>. Just connect to mongodb instance and from mongo.exe command line or any other tool you use issue this command.&lt;/p></description></item><item><title>Long numbers are truncated in MongoDb shell</title><link>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</link><pubDate>Thu, 02 Jun 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</guid><description>&lt;p>Let’s try this simple code in a mongo shell:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">TestCollection&lt;/span>.&lt;span style="color:#a6e22e">insert&lt;/span>({&lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Value&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">NumberLong&lt;/span>(&lt;span style="color:#ae81ff">636002954392732556&lt;/span>) })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">TestCollection&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>What you expect is that mongo inserted one record and then that record is returned. Actually a record is inserted, but &lt;strong>the return value can surprise you&lt;/strong>. Here is the output I got from RoboMongo&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;_id&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Value&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">NumberLong&lt;/span>(&lt;span style="color:#ae81ff">636002954392732544&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>Property “Value” has not the number you inserted, the number seems to be rounded and some precision is lost&lt;/strong> , even if it is a NumberLong and 636002954392732556 is a perfectly valid Int64 number. This behavior surprised me, because I’m expecting rounding to happen only with double, not with an Int64.&lt;/p></description></item><item><title>Secure your MongoDb installation</title><link>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</link><pubDate>Thu, 19 May 2016 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</guid><description>&lt;p>In last months a lots of rumor spreads about &lt;a href="http://thehackernews.com/2015/07/MongoDB-Database-hacking-tool.html">MongoDb and Data Leak&lt;/a> because &lt;strong>people found lots of MongoDb exposed on the internet&lt;/strong> &lt;a href="http://thehackernews.com/2015/02/mongodb-database-hacking.html">&lt;strong>without any protection&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>The root of the problem is probably a bad default for MongoDb that actually starts without any autentication by default. Developers usually download mongodb, configure without authentication and access MongoDb instance without any knowledge of MongoDb security model. This simplicity of usage can lead to unsecure installation in production.&lt;/p></description></item><item><title>Start ElasticSearch in windows with a different configuration file</title><link>https://www.codewrecks.com/post/old/2015/09/start-elasticsearch-in-windows-with-a-different-configuration-file/</link><pubDate>Thu, 24 Sep 2015 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/start-elasticsearch-in-windows-with-a-different-configuration-file/</guid><description>&lt;p>When you start elasticsearch double clicking on Elasticsearch.bat in windows, it uses the standard config/elasticsearch.yml files that is contained in the installation directory. Especially for development, &lt;strong>it is really useful to be able to start ES with different configuration file&lt;/strong>.&lt;/p>
&lt;p>Probably my googleFu is not perfect, but each time that I need to find the correct option to pass to Elasticsearch.bat batch file I’m not able to find with the first search and I always loose some time, and this means that probably this information is not indexed perfectly.&lt;/p></description></item><item><title>Query untyped object inside a Mongo Db log4net mongoappender</title><link>https://www.codewrecks.com/post/old/2012/05/query-untyped-object-inside-a-mongo-db-log4net-mongoappender/</link><pubDate>Fri, 25 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/query-untyped-object-inside-a-mongo-db-log4net-mongoappender/</guid><description>&lt;p>I’ve blogged about &lt;strong>using MongoDb to store log4net logs&lt;/strong> , but the original appender has a little problem, it stores a BsonDocument inside the MongoCollection, and does not use any C# object and when it is time to query data you cannot use the new LINQ Mongo provider that is included in &lt;a href="http://www.mongodb.org/display/DOCS/CSharp&amp;#43;Language&amp;#43;Center">newest C# drivers (1.4&lt;/a>), because data is completely untyped.&lt;/p>
&lt;p>This is usually not a big problem, because you can query a collection using &lt;strong>simple JSON-like query&lt;/strong> , but if you are used to standard LINQ provider, probably you will get a little bit lost on how to create the JSON query to retrieve the data you need. &lt;em>This is the scenario I need to solve&lt;/em>: I have a stupid Winform that is able to show some information from a standard Log4Net Sql database (using the adonetappender) and I want to be able to use the very same interface to load data from mongo database. First of all I need to &lt;em>load&lt;/em> *all distinct value for the property &lt;strong>level&lt;/strong> and &lt;strong>loggerName&lt;/strong> *, because I have a combo where the user can filter for Severity (ERROR, WARN, INFO, Etc.) and a list of checkboxes used to filter for loggerName. Luckily enough, mongo offer such a functionality out of the box.&lt;/p></description></item><item><title>Misusing an ORM</title><link>https://www.codewrecks.com/post/old/2012/05/misusing-an-orm/</link><pubDate>Sat, 12 May 2012 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/misusing-an-orm/</guid><description>&lt;p>I’ve blogged some time ago that I’m starting to &lt;a href="http://www.codewrecks.com/blog/index.php/2011/10/27/square-peg-in-a-round-hole/">consider ORM an Antipattern&lt;/a>, and recently Mr Fowler &lt;a href="http://martinfowler.com/bliki/OrmHate.html">posted similar thoughts&lt;/a> in his bliki, moreover I have the pleasure to be one of the organizer of the &lt;a href="http://ravendb.net/events/82/3-days-ravendb-training-in-italy">first RavenDB official Course in Italy&lt;/a>, with my dear friend &lt;a href="http://milestone.topics.it/">Mauro&lt;/a> as teacher.&lt;/p>
&lt;p>Since I’m strongly convinced that in a full OOP approach to problem &lt;strong>objects should not have nor setter nor getter&lt;/strong> , most of the work and complexities of an ORM is simply not needed, because you usually retrieve objects from the storage with only one function &lt;strong>GetById&lt;/strong> and nothing else. In my long experience with NHibernate, I verified that most of the problem arise when you need to &lt;strong>show data in UI in specific format and you start to write complex Query&lt;/strong> in HQL or ICRiteria or LINQ, then you need to spend time with NHProfiler to understand if the queries are good enough to run on production system and when objects changes a little bit &lt;strong>you need to rewrite a lot of code to suite the new Object Model.&lt;/strong> This last point is the real pain point in DDD, where you usually should create Object Model that will be manipulated a lot before reaching a good point, after all the main value of DDD approach is being able to create a dialog with a DOMAIN EXPERT and it is impossible to find a good Object Models at the first tentative. If refactoring a model become painful, you are not allowed to modify it with easy, you are going away from DDD approach.&lt;/p></description></item><item><title>Logging object with circular reference with Mongo Appender chrashes your process</title><link>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</link><pubDate>Tue, 03 Apr 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</guid><description>&lt;p>I’ve blogged some days ago on the possibility to save &lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/19/using-mongo-database-to-store-log4net-logs/">log4net logs inside a Mongo database&lt;/a>, but you should be aware that this technique can be &lt;strong>dangerous if your objects have circular references.&lt;/strong> A &lt;em>circular reference happens when object A reference object B and object B directly or indirectly reference object A again&lt;/em>and this is a &lt;strong>high risk&lt;/strong> when you work with Mongo Serializer.&lt;/p>
&lt;p>Mongo Serializer does not likes circular references (it is perfectly acceptable, because documents with circular references cannot be saved into a document database), but the problem is: &lt;strong>if you try to serialize an object that has a circular reference you will get a StackOverflowException&lt;/strong> and your process will crash, as stated in official documentation from MSDN&lt;/p></description></item><item><title>MongoDB and concept of identity in NoSql db</title><link>https://www.codewrecks.com/post/old/2012/02/mongodb-and-concept-of-index-in-nosql-db/</link><pubDate>Mon, 27 Feb 2012 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/02/mongodb-and-concept-of-index-in-nosql-db/</guid><description>&lt;p>Previous posts on the &lt;a href="http://www.codewrecks.com/blog/index.php/tag/nosql/">NoSql&lt;/a> and Raven Series&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/02/04/nosql-and-a-life-without-schema/">NoSql and a life without Schema&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/02/06/nosql-and-a-life-without-schema-continued/">NoSql and a life without schema continued&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/02/08/rename-a-property-in-ravendb">Rename a property in RavenDb&lt;/a>&lt;/li>
&lt;li>First &lt;a href="http://www.codewrecks.com/blog/index.php/2012/02/13/first-touch-of-ravendb-http-api/">Touch of RavenDb HTTP API&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/02/20/renaming-a-property-in-ravendb-with-http-api/">Renaming property in RavenDb with HTTP API&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Other posts by Mauro on &lt;a href="http://ravendb.net/">RavenDb&lt;/a> Subject.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://mauroservienti.blogspot.com/2012/01/ravendb-start-your-engines.html">RavenDb: Start your engines&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mauroservienti.blogspot.com/2012/02/ravendb-first-contact.html">RavenDb: First Contact&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mauroservienti.blogspot.com/2012/02/ravendb-storing-data.html">RavenDB: Storing Data&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article I deal with a different NoSql database called &lt;a href="http://www.mongodb.org/">MongoDb&lt;/a> a mature NoSql engine born outside the.NET world to clarify the concept of Id in a typical No Sql database. &lt;a href="http://www.mongodb.org/display/DOCS/Windows&amp;#43;Service">Installation&lt;/a> of Mongo is really simple, just download, uncompress, locate the &lt;strong>bin&lt;/strong> folder, and type this from an Administrator Console Prompt to install Mongo as service&lt;/p></description></item><item><title>Custom XML Serialization</title><link>https://www.codewrecks.com/post/old/2011/12/custom-xml-serialization/</link><pubDate>Thu, 01 Dec 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/12/custom-xml-serialization/</guid><description>&lt;p>Another advantage of sto&lt;a href="http://www.codewrecks.com/blog/index.php/2011/06/13/leverage-the-concept-of-state-of-your-entities/">ring properties of entities into a state object&lt;/a> based on a Dictionary, is the ability to easily serialize objects in custom formats. As an example I create an XML serializer that is capable to serialize an entity in a custom XML format.&lt;/p>
&lt;p>I used this simple serializer to create a NHibernate User Type that permits me to save a child entity in a single XML column of SQL Server, a feature useful when you need to save objects which schema changes quite often and you do not want to keep database schema updated, or you need to store dynamic data into the DB. I now that all of you are screaming “USE NO SQL DB”, like &lt;a href="http://ravendb.net/">Raven&lt;/a>, but it is not simple to introduce new technologies into existing projects, and only to justify the need to save the 2% of objects.&lt;/p></description></item></channel></rss>