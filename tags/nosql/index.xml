<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NoSql on Codewrecks</title><link>https://www.codewrecks.com/tags/nosql/</link><description>Recent content in NoSql on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 27 May 2021 20:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/nosql/index.xml" rel="self" type="application/rss+xml"/><item><title>Keep MongoDb logfile size at bay</title><link>https://www.codewrecks.com/post/general/mongo-db-logfiles/</link><pubDate>Thu, 27 May 2021 20:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongo-db-logfiles/</guid><description>MongoDb is a great option for NoSql but sometimes it is installed in production forgetting some basic maintenance tasks, like managing log files. You should remember that MongoDb does not automatically rotate log files as for official documentation.
This lead to logfiles of Gigabyte size and sometimes they can even be a space problem in your installation. If a logfile is gone out of control, you cannot delete because it is in use by mongod process, so you need to ask for a manual rotate.</description></item><item><title>Long numbers are truncated in MongoDb shell</title><link>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</link><pubDate>Thu, 02 Jun 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</guid><description>Let’s try this simple code in a mongo shell:
1 2 db.TestCollection.insert({&amp;#34;_id&amp;#34; : 1, &amp;#34;Value&amp;#34; : NumberLong(636002954392732556) }) db.TestCollection.find() What you expect is that mongo inserted one record and then that record is returned. Actually a record is inserted, but the return value can surprise you. Here is the output I got from RoboMongo
1 2 3 4 { &amp;#34;_id&amp;#34; : 1.0, &amp;#34;Value&amp;#34; : NumberLong(636002954392732544) } Property “Value” has not the number you inserted, the number seems to be rounded and some precision is lost , even if it is a NumberLong and 636002954392732556 is a perfectly valid Int64 number.</description></item><item><title>Secure your MongoDb installation</title><link>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</link><pubDate>Thu, 19 May 2016 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</guid><description>In last months a lots of rumor spreads about MongoDb and Data Leak because people found lots of MongoDb exposed on the internet without any protection.
The root of the problem is probably a bad default for MongoDb that actually starts without any autentication by default. Developers usually download mongodb, configure without authentication and access MongoDb instance without any knowledge of MongoDb security model. This simplicity of usage can lead to unsecure installation in production.</description></item><item><title>Start ElasticSearch in windows with a different configuration file</title><link>https://www.codewrecks.com/post/old/2015/09/start-elasticsearch-in-windows-with-a-different-configuration-file/</link><pubDate>Thu, 24 Sep 2015 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/start-elasticsearch-in-windows-with-a-different-configuration-file/</guid><description>When you start elasticsearch double clicking on Elasticsearch.bat in windows, it uses the standard config/elasticsearch.yml files that is contained in the installation directory. Especially for development, it is really useful to be able to start ES with different configuration file.
Probably my googleFu is not perfect, but each time that I need to find the correct option to pass to Elasticsearch.bat batch file I’m not able to find with the first search and I always loose some time, and this means that probably this information is not indexed perfectly.</description></item><item><title>Query untyped object inside a Mongo Db log4net mongoappender</title><link>https://www.codewrecks.com/post/old/2012/05/query-untyped-object-inside-a-mongo-db-log4net-mongoappender/</link><pubDate>Fri, 25 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/query-untyped-object-inside-a-mongo-db-log4net-mongoappender/</guid><description>I’ve blogged about using MongoDb to store log4net logs , but the original appender has a little problem, it stores a BsonDocument inside the MongoCollection, and does not use any C# object and when it is time to query data you cannot use the new LINQ Mongo provider that is included in newest C# drivers (1.4), because data is completely untyped.
This is usually not a big problem, because you can query a collection using simple JSON-like query , but if you are used to standard LINQ provider, probably you will get a little bit lost on how to create the JSON query to retrieve the data you need.</description></item><item><title>Misusing an ORM</title><link>https://www.codewrecks.com/post/old/2012/05/misusing-an-orm/</link><pubDate>Sat, 12 May 2012 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/misusing-an-orm/</guid><description>I’ve blogged some time ago that I’m starting to consider ORM an Antipattern, and recently Mr Fowler posted similar thoughts in his bliki, moreover I have the pleasure to be one of the organizer of the first RavenDB official Course in Italy, with my dear friend Mauro as teacher.
Since I’m strongly convinced that in a full OOP approach to problem objects should not have nor setter nor getter , most of the work and complexities of an ORM is simply not needed, because you usually retrieve objects from the storage with only one function GetById and nothing else.</description></item><item><title>Logging object with circular reference with Mongo Appender chrashes your process</title><link>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</link><pubDate>Tue, 03 Apr 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</guid><description>I’ve blogged some days ago on the possibility to save log4net logs inside a Mongo database, but you should be aware that this technique can be dangerous if your objects have circular references. A circular reference happens when object A reference object B and object B directly or indirectly reference object A againand this is a high risk when you work with Mongo Serializer.
Mongo Serializer does not likes circular references (it is perfectly acceptable, because documents with circular references cannot be saved into a document database), but the problem is: if you try to serialize an object that has a circular reference you will get a StackOverflowException and your process will crash, as stated in official documentation from MSDN</description></item><item><title>MongoDB and concept of identity in NoSql db</title><link>https://www.codewrecks.com/post/old/2012/02/mongodb-and-concept-of-index-in-nosql-db/</link><pubDate>Mon, 27 Feb 2012 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/02/mongodb-and-concept-of-index-in-nosql-db/</guid><description>Previous posts on the NoSql and Raven Series
NoSql and a life without Schema NoSql and a life without schema continued Rename a property in RavenDb First Touch of RavenDb HTTP API Renaming property in RavenDb with HTTP API Other posts by Mauro on RavenDb Subject.
RavenDb: Start your engines RavenDb: First Contact RavenDB: Storing Data In this article I deal with a different NoSql database called MongoDb a mature NoSql engine born outside the.</description></item><item><title>Custom XML Serialization</title><link>https://www.codewrecks.com/post/old/2011/12/custom-xml-serialization/</link><pubDate>Thu, 01 Dec 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/12/custom-xml-serialization/</guid><description>Another advantage of storing properties of entities into a state object based on a Dictionary, is the ability to easily serialize objects in custom formats. As an example I create an XML serializer that is capable to serialize an entity in a custom XML format.
I used this simple serializer to create a NHibernate User Type that permits me to save a child entity in a single XML column of SQL Server, a feature useful when you need to save objects which schema changes quite often and you do not want to keep database schema updated, or you need to store dynamic data into the DB.</description></item></channel></rss>