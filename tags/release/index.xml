<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Release on Codewrecks</title><link>https://www.codewrecks.com/tags/release/</link><description>Recent content in Release on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 05 Jan 2025 08:12:42 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/release/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure DevOps Pills: Differences between old and new release pipeline</title><link>https://www.codewrecks.com/post/azdo/pills/release-new-and-old/</link><pubDate>Sun, 05 Jan 2025 08:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/release-new-and-old/</guid><description>&lt;p>Happy New Year to everyone. Today I&amp;rsquo;ll deal with a common question I got from customer regarding Azure DevOps release pipeline. The problem arise because &lt;strong>we already had a GUI based pipeline in the past and then we had a fully YAML pipeline&lt;/strong> so people are somewhat puzzled on which one to use in their scenario.&lt;/p>
&lt;blockquote>
&lt;p>When you have two way to do the same thing you are often confused on which tool to use to reach your goal&lt;/p></description></item><item><title>Pill: Create an environment in an AzDo pipeline</title><link>https://www.codewrecks.com/post/azdo/pills/create-environment-on-pipeline/</link><pubDate>Tue, 19 Mar 2024 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/create-environment-on-pipeline/</guid><description>&lt;p>Scenario: We have to create a new environment for a new customer, and an environment consists of some resources on Azure, plus &lt;strong>an environment in azure DevOps to use with deploy pipeline&lt;/strong>. Since we are deploying with Azure DevOps pipeline, it makes sense to create everything for new customer environment with another pipeline.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">stages&lt;/span>: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">create_environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">create_environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">displayName&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Create environment if not present&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vmImage&lt;/span>: &lt;span style="color:#ae81ff">windows-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">powershell&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> write-Host &amp;#34;We are about to create the environment with api if not present&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # Need to create the token in basic auth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $AuthHeaders = @{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;Authorization&amp;#34; = &amp;#39;Basic &amp;#39; + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(&amp;#34;:$(AccessToken)&amp;#34;)) 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;Content-Type&amp;#34; = &amp;#34;application/json&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $listEnvironment = Invoke-RestMethod -uri &amp;#34;https://dev.azure.com/org/teamproject/_apis/distributedtask/environments?api-version=7.1-preview.1&amp;#34; -Headers $AuthHeaders
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # Now check if some of the environment already was present in the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> $envExisting = $listEnvironment.value | Where-Object { $_.name -eq &amp;#34;$(customer_fullname)&amp;#34; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> if ($envExisting) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;The environment already exists&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> exit 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> } 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> # Create an environment because it does not exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $createEnvPayload = @{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name = &amp;#34;$(customer_fullname)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> description = &amp;#34;Created by pipeline&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> } | ConvertTo-Json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $createUri = &amp;#34;https://dev.azure.com/org/teamproject/_apis/distributedtask/environments?api-version=7.1-preview.1&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Invoke-RestMethod -uri $createUri -method POST -Headers $AuthHeaders -Body $createEnvPayload&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see the stage contains a job that is used to create an environment. This is based on a secret contained in the pipeline called &lt;code>AccessToken&lt;/code> that is &lt;strong>used to authenticate to Azure DevOps REST API&lt;/strong>. The script is quite simple, it first retrieves the list of environments and then checks if the environment is already present. If it is not present, it creates a new environment with a simple POST request to the REST API of Azure DevOps.&lt;/p></description></item><item><title>Azure DevOps multi stage pipeline environments</title><link>https://www.codewrecks.com/post/old/2019/11/azure-devops-multi-stage-pipeline-environments/</link><pubDate>Tue, 12 Nov 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/azure-devops-multi-stage-pipeline-environments/</guid><description>&lt;p>In a previous post on &lt;a href="http://www.codewrecks.com/blog/index.php/2019/10/21/release-app-with-azure-devops-multi-stage-pipeline/">releasing with Multi Stage Pipeline and YAML code&lt;/a> I briefly introduced the concept of environments. In that example I used an environment called single_env and &lt;strong>you can be surprised that, by default, an environment is automatically created when the release runs.&lt;/strong> This happens because an environment can be seen as sets of resources used as target for deployments, but in the actual preview version, in Azure DevOps, you can only add Kubernetes resources. The question is: &lt;strong>why have I used an environment to deploy an application to Azure if there is no connection between the environment and your azure resources?&lt;/strong> &amp;gt; At this stage of the preview, we can only connect Kubernetes to an environment, no other physical resource can be linked.&lt;/p></description></item><item><title>Release app with Azure DevOps Multi Stage Pipeline</title><link>https://www.codewrecks.com/post/old/2019/10/release-app-with-azure-devops-multi-stage-pipeline/</link><pubDate>Mon, 21 Oct 2019 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/release-app-with-azure-devops-multi-stage-pipeline/</guid><description>&lt;p>MultiStage pipelines are still in preview on Azure DevOps, but it is time to experiment with real build-release pipeline, to taste the news. The Biggest limit at this moment is that you can use Multi Stage to deploy in Kubernetes or in the cloud, but there is not support for agent in VM (like standard release engine). This support will be added in the upcoming months but &lt;strong>if you use azure or kubernetes as a target you can already use it.&lt;/strong> My sample solution is &lt;a href="https://github.com/alkampfergit/AzureDevopsReleaseSamples">in GitHub&lt;/a>, it contains a real basic Asp.NET core project that contains some basic REST API and a really simple angular application. On of the advantage of having everything in the repository is that you can simply fork my repository and make experiment.&lt;/p></description></item><item><title>Build and Deploy AspNet App with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2019/03/build-and-deploy-asp-net-app-with-azure-devops/</link><pubDate>Thu, 28 Mar 2019 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/03/build-and-deploy-asp-net-app-with-azure-devops/</guid><description>&lt;p>I’ve blogged in the past about deploying ASP.NET application, but lots of new feature changed in Azure DevOps and it is time to do some refresh of basic concepts. &lt;strong>Especially in the field of web.config transform there is always lots of confusion and even if I’m an advocate of removing every configuration from files and source, it is indeed something that worth to be examined.&lt;/strong> &amp;gt; &lt;strong>The best approach for configuration is removing then from source control, use configuration services, etc and move away from web.config.&lt;/strong> But since most people still use web.config, lets start with a standard ASP.NET application with a Web.Config and a &lt;strong>couple of application settings that should be changed during deploy.&lt;/strong> &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/03/image-8.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/03/image_thumb-8.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/03/image_thumb-8.png" alt="image" />&lt;/a>&lt;/a>&lt;/p></description></item><item><title>Mounting network share in Release Definition</title><link>https://www.codewrecks.com/post/old/2017/08/mounting-network-share-in-release-definition/</link><pubDate>Mon, 21 Aug 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/mounting-network-share-in-release-definition/</guid><description>&lt;p>Using Deployment Groups with Release Management in VSTS is really nice, because you can use a pull release model, where the agent is running on machines that are deployment target, and all scripts are executed locally (instead of using PowerShell Remoting and WinRM).&lt;/p>
&lt;p>A typical release definition depends on artifacts produced by a build and with VSTS &lt;strong>sometimes it is convenient to store build artifacts in a network share instead that on VSTS.&lt;/strong> This is especially true if, like me, you have a internet connection with really slow upload bandwidth (256 Kbps). Storing artifacts in network share reduce the time needed from the build to upload artifact and the time needed by the release to download them to almost few seconds.&lt;/p></description></item><item><title>Running UAT tests in a VSTS TFS release</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</link><pubDate>Thu, 17 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</guid><description>&lt;p>I’ve blogged on how to &lt;a href="http://www.codewrecks.com/blog/index.php/2017/08/05/running-uat-and-integration-tests-during-a-vsts-build/">run UAT and integration tests during a VSTS Build&lt;/a>; that solution works quite well but probably is not the right way to proceed. Generally speaking that build does its work but I have two main concerns.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Executing test with remote execution &lt;strong>requires installation of test agent and involves WinRm&lt;/strong> , a beast that is not so easy to tame outside a domain&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>I’m deploying the new version of the application with an XCopy deployment, that is different from a real deploy to production&lt;/strong>.&lt;/p></description></item></channel></rss>