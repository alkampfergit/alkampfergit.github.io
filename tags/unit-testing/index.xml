<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unit Testing on Codewrecks</title><link>https://www.codewrecks.com/tags/unit-testing/</link><description>Recent content in Unit Testing on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 02 Jul 2014 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/unit-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>How to deal with Slow Unit Tests with Visual Studio Test Runner</title><link>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</link><pubDate>Wed, 02 Jul 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>One of the most dreadful problem of Unit Testing is slow testing. If your whole suite of tests runs in 10 minutes, it is normal for developers not to run the whole suite at each build. One of the most common question is&lt;/p>
&lt;blockquote>
&lt;p>How can I deal with slow Unit Tests?&lt;/p>&lt;/blockquote>
&lt;p>Here is my actual scenario: in a project I’m working in, we have some multilingual full text search done in Elastic Search and we have a battery of Unit Tests that verify that searches work as expected. Since each test deletes all documents, insert a bunch of new documents and finally commits lucene index, execution times is high compared to the rest of tests. Each test need almost 2 seconds to run on my workstation, where I have really fast SSD and plenty of RAM.&lt;/p></description></item><item><title>Unit Test class that makes use of HttpWebRequest thanks to Visual Studio fakes library</title><link>https://www.codewrecks.com/post/old/2013/05/unit-test-class-that-makes-use-of-httpwebrequest-thanks-to-visual-studio-fakes-library/</link><pubDate>Sat, 04 May 2013 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/05/unit-test-class-that-makes-use-of-httpwebrequest-thanks-to-visual-studio-fakes-library/</guid><description>&lt;p>Thanks to &lt;a href="http://msdn.microsoft.com/en-us/library/hh549175.aspx">Visual Studio Fakes&lt;/a> is it possible to isolate your unit test and testing &lt;em>difficult to test code&lt;/em>. Today I need to test a class that issues some Web Request around the internet and I’m concerned about &lt;strong>testing the SUT when the web response contains some specific code like 404&lt;/strong> (Not Found) or something.&lt;/p>
&lt;p>If you simply right-click the reference to system assembly in your project and Add a fakes assembly, you probably will be annoyed by the fact that when you try to create a ShimHttpWebRequest you are not able to do it. When some shim are not available, the reason is usually due to &lt;strong>some limitation of fakes library, so types are skipped when shims and stub code are generated&lt;/strong> (during compilation).&lt;/p></description></item><item><title>New Unit Test functionality in VS2012 Update 2 Test Playlist</title><link>https://www.codewrecks.com/post/old/2013/03/new-unit-test-functionality-in-vs2012-update-2-test-playlist/</link><pubDate>Thu, 14 Mar 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/new-unit-test-functionality-in-vs2012-update-2-test-playlist/</guid><description>&lt;p>In VS2012 we have support for basically any Unit Test Framework, because the new test runner is plugin based, and everyone can write plugin to make it compatible with the framework of choice. From the original version that was released with Visual Studio 2012 RTM, in Update 1 and Update 2 the test runner gained a lot of new feature, really useful for everyday work.&lt;/p>
&lt;p>&lt;strong>Update 2 introduced the concept of “Test Playlist”&lt;/strong> : basically a simple tool to create a subset of Unit Tests that are meant to be managed together. Since Update 1 already introduced the concept of Traits to group tests, this feature can be seen as a duplicate, but traits and playlist have different meaning. Let’s see how to create a playlist.&lt;/p></description></item><item><title>Shim constructors to isolate 'Future Objects'</title><link>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</link><pubDate>Thu, 14 Jun 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</guid><description>&lt;p>I’ve already blogged previously about the new Shim Library of Visual Studio 2012&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/27/using-shims-in-visual-studio-11-to-test-untestable-code/">Using Shims in Visual Studio to test untestable code&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/05/10/shim-and-instancebehavior-fallthrough-to-isolate-part-of-the-sut/">Shim and InstanceBehavior fallthrough to isolate part of the SUT.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Now it is time to explore another scenario where shim can save your life. Suppose you are working with Hardware, Es. a barcode reader and you have a class in your system wrote in this way.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BarcodeReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> BarcodeReader() { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//connect to the hardware, if the hardware is not there &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//throw an exception&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> String ReadCode() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//dialogate with the hardware and get the Barcode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This class manage the &lt;strong>connection to a physical BarcodeReader in the constructor&lt;/strong> and if &lt;strong>something went wrong throws an exception&lt;/strong> and expose a ReadCode method that ask the Physical reader to read a Barcode. This class is used with the following pattern throughout all the software.&lt;/p></description></item><item><title>Advantage of DDD approach to problem</title><link>https://www.codewrecks.com/post/old/2011/11/advantage-of-ddd-approach-to-problem/</link><pubDate>Tue, 08 Nov 2011 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/advantage-of-ddd-approach-to-problem/</guid><description>&lt;p>If you read my &lt;a href="http://www.codewrecks.com/blog/index.php/2011/11/07/traffic-light-experiment/">last post&lt;/a>, I explain how I solved a really stupid problem of managing a Traffic Light using OOP principles and the concept of Domain Events, now I want to emphasize some of the advantages you have using this approach.&lt;/p>
&lt;p>One benefit is in unit testing, suppose you want to test that a traffic light in red state does not cancel the request of another Traffic Light that want to become green.&lt;/p></description></item><item><title>Unit testing floating point numbers</title><link>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</link><pubDate>Thu, 05 May 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</guid><description>&lt;p>Testing for equality Floating point numbers is usually a bad idea, this because rounding occurs with floating point operations and you need to test with a tolerance. Suppose you test that some algorithm produces the expected result and you find that unit test fails with this message.&lt;/p>
&lt;blockquote>
&lt;p>SharpTestsEx.AssertException : 2.36 Should Be Equal To 2.36.&lt;/p>&lt;/blockquote>
&lt;p>This seems strange, but the problem is that the real value is 2.360000000003 that surely is different from 2.36. Now you have two different scenario, the first one is &lt;em>the test is wrong because I want to verify that the two numbers are really equals&lt;/em>. With floating point calculation this cannot be achieved, you can use numbers with high precision, but doing operations with any floating point numbers lead to rounding, and you should never test for equality two floating point numbers.&lt;/p></description></item><item><title>Test infrastructure</title><link>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</link><pubDate>Tue, 24 Nov 2009 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</guid><description>&lt;p>Unit tests must be as clearer as possible, I found that in standard project I&amp;rsquo;m working, I use nhibernate + stored procedures for massive operations. Most of the tests contains code to preload database, recreate structure or manage transaction, so, lot of time ago I decided to build some infrastructure to make this possible.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/11/image20.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/11/image_thumb20.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/11/image_thumb20.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>It makes my test really simple to read. This test use SqlServer, and it needs to be transactional, so every test run inside a Transaction, but I can specify more complex stuff&lt;/p></description></item></channel></rss>