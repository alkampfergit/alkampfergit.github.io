<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unit Testing on Codewrecks</title><link>https://www.codewrecks.com/tags/unit-testing/</link><description>Recent content in Unit Testing on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Jul 2014 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/unit-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>How to deal with Slow Unit Tests with Visual Studio Test Runner</title><link>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</link><pubDate>Wed, 02 Jul 2014 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/how-to-deal-with-slow-unit-tests-with-visual-studio-test-runner/</guid><description>The problem One of the most dreadful problem of Unit Testing is slow testing. If your whole suite of tests runs in 10 minutes, it is normal for developers not to run the whole suite at each build. One of the most common question is
How can I deal with slow Unit Tests?
Here is my actual scenario: in a project I’m working in, we have some multilingual full text search done in Elastic Search and we have a battery of Unit Tests that verify that searches work as expected.</description></item><item><title>Unit Test class that makes use of HttpWebRequest thanks to Visual Studio fakes library</title><link>https://www.codewrecks.com/post/old/2013/05/unit-test-class-that-makes-use-of-httpwebrequest-thanks-to-visual-studio-fakes-library/</link><pubDate>Sat, 04 May 2013 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/05/unit-test-class-that-makes-use-of-httpwebrequest-thanks-to-visual-studio-fakes-library/</guid><description>Thanks to Visual Studio Fakes is it possible to isolate your unit test and testing difficult to test code. Today I need to test a class that issues some Web Request around the internet and I’m concerned about testing the SUT when the web response contains some specific code like 404 (Not Found) or something.
If you simply right-click the reference to system assembly in your project and Add a fakes assembly, you probably will be annoyed by the fact that when you try to create a ShimHttpWebRequest you are not able to do it.</description></item><item><title>New Unit Test functionality in VS2012 Update 2 Test Playlist</title><link>https://www.codewrecks.com/post/old/2013/03/new-unit-test-functionality-in-vs2012-update-2-test-playlist/</link><pubDate>Thu, 14 Mar 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/new-unit-test-functionality-in-vs2012-update-2-test-playlist/</guid><description>In VS2012 we have support for basically any Unit Test Framework, because the new test runner is plugin based, and everyone can write plugin to make it compatible with the framework of choice. From the original version that was released with Visual Studio 2012 RTM, in Update 1 and Update 2 the test runner gained a lot of new feature, really useful for everyday work.
Update 2 introduced the concept of “Test Playlist” : basically a simple tool to create a subset of Unit Tests that are meant to be managed together.</description></item><item><title>Shim constructors to isolate 'Future Objects'</title><link>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</link><pubDate>Thu, 14 Jun 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</guid><description>I’ve already blogged previously about the new Shim Library of Visual Studio 2012
Using Shims in Visual Studio to test untestable code Shim and InstanceBehavior fallthrough to isolate part of the SUT. Now it is time to explore another scenario where shim can save your life. Suppose you are working with Hardware, Es. a barcode reader and you have a class in your system wrote in this way.</description></item><item><title>Running NUnit and xUnit tests in TFS11 build</title><link>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</link><pubDate>Mon, 05 Mar 2012 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/running-nunit-and-xunit-tests-in-tfs11-build/</guid><description>I’ve blogged in the past various solution to run NUnit tests during a TFS build, and now it is time to make it again for TFS11, but this time it is incredibly simple, because the new Test Runner supports multiple frameworks, so it works almost automatically.
You can read from Peter Provost blog that actually we have three plugin for UTE (Unit Test Explorer) available: Nunit, xUnit and HTML/JAvascript, they are simple.</description></item><item><title>Advantage of DDD approach to problem</title><link>https://www.codewrecks.com/post/old/2011/11/advantage-of-ddd-approach-to-problem/</link><pubDate>Tue, 08 Nov 2011 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/advantage-of-ddd-approach-to-problem/</guid><description>If you read my last post, I explain how I solved a really stupid problem of managing a Traffic Light using OOP principles and the concept of Domain Events, now I want to emphasize some of the advantages you have using this approach.
One benefit is in unit testing, suppose you want to test that a traffic light in red state does not cancel the request of another Traffic Light that want to become green.</description></item><item><title>Unit testing floating point numbers</title><link>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</link><pubDate>Thu, 05 May 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/unit-testing-floating-point-numbers/</guid><description>Testing for equality Floating point numbers is usually a bad idea, this because rounding occurs with floating point operations and you need to test with a tolerance. Suppose you test that some algorithm produces the expected result and you find that unit test fails with this message.
SharpTestsEx.AssertException : 2.36 Should Be Equal To 2.36.
This seems strange, but the problem is that the real value is 2.360000000003 that surely is different from 2.</description></item><item><title>Test infrastructure</title><link>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</link><pubDate>Tue, 24 Nov 2009 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/test-infrastructure/</guid><description>Unit tests must be as clearer as possible, I found that in standard project I&amp;rsquo;m working, I use nhibernate + stored procedures for massive operations. Most of the tests contains code to preload database, recreate structure or manage transaction, so, lot of time ago I decided to build some infrastructure to make this possible.
It makes my test really simple to read. This test use SqlServer, and it needs to be transactional, so every test run inside a Transaction, but I can specify more complex stuff</description></item></channel></rss>