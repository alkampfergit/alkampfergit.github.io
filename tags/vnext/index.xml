<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VNext on Codewrecks</title><link>https://www.codewrecks.com/tags/vnext/</link><description>Recent content in VNext on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 30 Mar 2016 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/vnext/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding more than one build agent in VSTS</title><link>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</guid><description>&lt;p>Pricing for Build Agents in Visual Studio Team Services states that the &lt;strong>first agent is free, subsequent on-premise agent will cost 15$/month&lt;/strong>. If you, like me, have a demo account, or you want to use &lt;strong>more than one agent not simultaneously&lt;/strong> , you can register more than one agents, and then, from the administration panel, you can disable all agents except one.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image-1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image_thumb-1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image_thumb-1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Leave only one agent enabled at a time to be license compliant&lt;/em>&lt;/p></description></item><item><title>Installing a linux Agent for VSTS build was never so easy</title><link>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</guid><description>&lt;p>If you installed Linux Agents for VSTS vNext build in the past, you already know that it was a simple experience, especially because &lt;strong>the agent was installed with npm&lt;/strong> , so it is a matter of a couple of commands.&lt;/p>
&lt;p>The agent is undergoing a substantial change, and in GitHub there is a project about &lt;a href="https://github.com/Microsoft/vsts-agent/blob/master/README.md">VSTS Cross Platform Agent (CoreCLR)&lt;/a>, &lt;strong>a new version of the agent, entirely written in CoreCLR that will substitute the closed source Windows agent and the actual XPlat agent&lt;/strong>. This version of the agent is still work-in-progress, and we can expect a preview for OSX and Linux in the next month. Until now, to run vNext build on linux, you should use the &lt;a href="https://github.com/Microsoft/vso-agent/blob/master/docs/vsts.md">XPlat Agent&lt;/a>.&lt;/p></description></item><item><title>Writing a custom task for Build vNext</title><link>https://www.codewrecks.com/post/old/2016/03/writing-a-custom-task-for-build-vnext/</link><pubDate>Wed, 16 Mar 2016 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/writing-a-custom-task-for-build-vnext/</guid><description>&lt;p>I wrote on how to integrate &lt;a href="http://www.codewrecks.com/blog/index.php/2015/10/17/integrating-gitversion-and-gitflow-in-your-vnext-build/">GitFlow and Semantic Versioning for my nuget packages&lt;/a> thanks to GitVersion.exe and a simple powershell script, but still the solution is not perfect. The worst drawback is that you need to remember to include all needed PowerShell scripts and GitVersion.exe executable in project source code. This approach does not give best experience and clutter source code with build related executables.&lt;/p>
&lt;p>Since the script is valid for any project, it would be &lt;strong>a better solution to wrap it in a build task for the new vNext build system&lt;/strong>. Even in this area, the new build system shines, because writing a task is really a breeze.&lt;/p></description></item><item><title>Save a build as a Draft</title><link>https://www.codewrecks.com/post/old/2015/12/save-a-build-as-a-draft/</link><pubDate>Tue, 01 Dec 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/save-a-build-as-a-draft/</guid><description>&lt;p>There are a lots of interesting new features in TFS / VSTS Build vNext, but surely, one of the coolest one is the &lt;strong>ability to edit a build and save as a draft&lt;/strong>. Actually available only in the online version (Visual Studio Team Services)&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image_thumb.png" alt="Saving build as a draft" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Saving a build as a Draft&lt;/em>&lt;/p>
&lt;p>Actually, saving build as a draft allows you to &lt;strong>edit a build, try a new configuration / task / personalization, without distrupt the old build that works&lt;/strong>. Customizing a build can be a difficult task, and the greatest risk with older build System is having an unusable build until the new personalization is done.&lt;/p></description></item><item><title>Publishing a Nuget package to NugetMyget with VSO Build vNext</title><link>https://www.codewrecks.com/post/old/2015/09/publishing-a-nuget-package-to-nugetmyget-with-vso-build-vnext/</link><pubDate>Sat, 26 Sep 2015 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/publishing-a-nuget-package-to-nugetmyget-with-vso-build-vnext/</guid><description>&lt;p>Publishing a package to myget or nuget with a TFS/VSO vNext build is a breeze. First of all you should &lt;strong>create a&lt;/strong> &lt;a href="https://docs.nuget.org/create/nuspec-reference">&lt;strong>.nuspec file&lt;/strong>&lt;/a> &lt;strong>that specify everything about your package and include it in your source control&lt;/strong>. Then Add a variable to the build called NugetVersion as shown in &lt;strong>Figure 1.&lt;/strong> &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2015/09/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2015/09/image_thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2015/09/image_thumb6.png" alt="Adding NugetVersion variable to the list of variables for this build." />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Added NugetVersion variable to build definition.&lt;/em>&lt;/p>
&lt;p>In this build I disabled continuous integration, because I want to publish my package only when I decided that the code is good enough to be published. Publishing to a feed for each build is usually a waste of resources and a nice way to make the history of your package a pain. Since I want to do manual publishing I’ve checked the &lt;strong>“Allow at Queue Time” checkbox, to be able to change Nuget Version Number at queue time.&lt;/strong> &lt;strong>Build vNext has a dedicated step called NugetPackager that takes care of creating your package from nuspec file&lt;/strong> , so you do not need to include nuget.exe in your repository or in the server. If you are curious where is nuget.exe stored, you can check installation folder of your build agent, and browse the Task Directory where all the tasks are contained. There you should find the NugetPackager folder where all the script used by the tasks are stored.&lt;/p></description></item><item><title>Manage Artifacts with TFS Build vNext</title><link>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</link><pubDate>Tue, 30 Jun 2015 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/manage-artifacts-with-tfs-build-vnext/</guid><description>&lt;h2 id="artifacts-and-build-vnext">Artifacts and Build vNext&lt;/h2>
&lt;p>Another big improvement of Build vNext in TFS and VSO is the ability to **explicitly manage the content of &lt;em>artifacts&lt;/em>during a build **. With the term Artifacts in Continuous Integration we are referring to every result of of the build that is worth publishing together with build result, to be further consumed by consumers of the build. Generally speaking think to artifacts as build binary outputs.&lt;/p></description></item><item><title>Build vNext and continuous integration on GitHub</title><link>https://www.codewrecks.com/post/old/2015/06/build-vnext-and-continuous-integration-on-github/</link><pubDate>Mon, 08 Jun 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/build-vnext-and-continuous-integration-on-github/</guid><description>&lt;p>One of the great &lt;strong>news of build vNext is the ability to create a build that targets source on GitHub project&lt;/strong> , not only on Git or TFVC repositories that are in current TFS or VSO instance. Given this, plus the fact that VSO has a 5 basic user license for Free, and you can use VSO as Continuous integration Engine for your GitHub projects.&lt;/p>
&lt;p>To create a build that targets GitHub source code, you should simply login into your GitHub account, then navigate in your personal settings and finally choose “Personal Access tokens”&lt;/p></description></item><item><title>TFS New Build System vNext agents</title><link>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</link><pubDate>Wed, 03 Jun 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</guid><description>&lt;p>&lt;strong>With the latest Visual Studio Online update, the new build system is now online for all users&lt;/strong>. As I said in old post, it is completely rewritten and covering all new features really requires lots of time. Since I’m a great fan of Continuous Integration and Continuous Deploy procedures I’d like to do some post to introduce you this new build system, along with the reason why it is really superior to the old one.&lt;/p></description></item></channel></rss>