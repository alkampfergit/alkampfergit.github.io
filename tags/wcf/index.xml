<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wcf on Codewrecks</title><link>https://www.codewrecks.com/tags/wcf/</link><description>Recent content in Wcf on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 12 Mar 2013 07:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/wcf/index.xml" rel="self" type="application/rss+xml"/><item><title>Exposing WCF service without svc extension</title><link>https://www.codewrecks.com/post/old/2013/03/exposing-wcf-service-without-svc-extension/</link><pubDate>Tue, 12 Mar 2013 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/exposing-wcf-service-without-svc-extension/</guid><description>&lt;p>I know, this is a weird requirement, but sometimes they appear in your backlog. The story is: &lt;strong>as company XXX I want to expose a service based on WCF in IIS without having the.svc suffix in the address&lt;/strong>. I’m actually using Castle Windsor WCF Integration to resolve my service class with castle, and it turns out that exposing a service without using standard.svc files it is just a matter of configure routing. This line of code is configuring the route of a specific name to a wcf service&lt;/p></description></item><item><title>Avoid WCF to test validity of HTTPS certificates</title><link>https://www.codewrecks.com/post/old/2012/12/avoid-wcf-to-test-validity-of-https-certificates/</link><pubDate>Wed, 19 Dec 2012 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/12/avoid-wcf-to-test-validity-of-https-certificates/</guid><description>&lt;p>In a previous article I deal on &lt;a href="http://www.codewrecks.com/blog/index.php/2011/11/21/how-to-test-ssl-based-wcf-services/">How To test ssl based wcf service&lt;/a> and part of the solution is to create a self issued certificate and make it valid inserting generated certificate in Trusted Root Certification Authority.&lt;/p>
&lt;p>This operation makes that CA trusted and is an operation that &lt;strong>is not so good if you really care on the security of your machine&lt;/strong>. There is also situation where you want to temporarily disable the check of the validity of the certificate, ES: you need to revoke certificate and issue another one with a new certification trusted authority , or basically you want your application to use a self issued https certificate in your intranet but you do not want to install that CA in everyone computer Trusted Root Certification Authority. Whatever is your need, sometimes there is the need to use WCF over https and ignore completely any certification error (untrusted CA, revoked certificate, etc)&lt;/p></description></item><item><title>The username is not provided Specify username in ClientCredentials when use CreateChannel at Runtime</title><link>https://www.codewrecks.com/post/old/2012/10/the-username-is-not-provided-specify-username-in-clientcredentials-when-use-createchannel-at-runtime/</link><pubDate>Fri, 19 Oct 2012 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/10/the-username-is-not-provided-specify-username-in-clientcredentials-when-use-createchannel-at-runtime/</guid><description>&lt;p>I’ve encountered a strange problem with WCF today, &lt;strong>I have a custom Castle facility that is able to automatically create Wcf proxies with code&lt;/strong> , and it worked perfectly until I need to add a simple functionality: I want to be able to change at runtime some of the options of bindings that are configured in app.config. The solution was really simple, just write a method to retrieve the BindingConfiguration from the configuration file and the game is almost done.&lt;/p></description></item><item><title>Wcf over HTTPS compression binary binding and some measurement</title><link>https://www.codewrecks.com/post/old/2012/09/wcf-over-https-compression-binary-binding-and-some-measurement/</link><pubDate>Tue, 11 Sep 2012 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/wcf-over-https-compression-binary-binding-and-some-measurement/</guid><description>&lt;p>I’ve an application that is composed by &lt;strong>WPF clients deployed over the internet and a central WCF service exposed over Https for security reason&lt;/strong> , everything works fine, but as the number of clients grows, performance starts to decrease a little. Since I have a great number of clients that operates behind a single standard ADSL 8 MBit (used for everything, mail, browsing, etc..), I measured and found that bandwidth is becoming a bottleneck, so &lt;strong>I need to reduce amount of traffic between clients and server&lt;/strong>.&lt;/p></description></item><item><title>Troubleshoot WCF The underlying connection was closed A connection that was expected to be kept alive was closed by the server</title><link>https://www.codewrecks.com/post/old/2012/05/troubleshoot-wcf-the-underlying-connection-was-closed-a-connection-that-was-expected-to-be-kept-alive-was-closed-by-the-server/</link><pubDate>Wed, 16 May 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/troubleshoot-wcf-the-underlying-connection-was-closed-a-connection-that-was-expected-to-be-kept-alive-was-closed-by-the-server/</guid><description>&lt;p>I’ve already blogged in the past on how to &lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/23/troubleshoot-wcf-exception/">easily troubleshoot WCF Exception&lt;/a> and that suggestion is valid for every exception you encounter in WCF. Today I have a function that gave the error&lt;/p>
&lt;blockquote>
&lt;p>System.ServiceModel.CommunicationException: The underlying connection was closed: A connection that was expected to be kept alive was closed by the server. —&amp;gt; System.Net.WebException: The underlying connection was closed: A connection that was expected to be kept alive was closed by the server. —&amp;gt; System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. —&amp;gt; System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host&lt;/p></description></item><item><title>Getting the list of Type associated to a given export in MEF</title><link>https://www.codewrecks.com/post/old/2012/05/getting-the-list-of-type-associated-to-a-given-export-in-mef/</link><pubDate>Tue, 08 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/getting-the-list-of-type-associated-to-a-given-export-in-mef/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">Basic Request Response WCF service&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/05/reson-behind-request-responseservice-in-wc/">Reason behind a request – response service in WCF&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/23/evolving-request-response-service-to-separate-contract-and-business-logic/">Evolving Request Response service to separate contract and business logic&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/05/08/how-to-instantiate-wcf-host-class-with-mef/">How to instantiate WCF host class with MEF&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>One of the problem I had to solve to make WCF and MEF live together,  is knowing all the types discovered by MEF at runtime for a given export. This information is really important because &lt;strong>I need the list of type that derived from Request and Response to inform WCF of all the KnownTypes available to the service.&lt;/strong> First of all let’s see how I initialized MEF engine&lt;/p></description></item><item><title>How to instantiate WCF host class with MEF</title><link>https://www.codewrecks.com/post/old/2012/05/how-to-instantiate-wcf-host-class-with-mef/</link><pubDate>Tue, 08 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/how-to-instantiate-wcf-host-class-with-mef/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">Basic Request Response WCF service&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/05/reson-behind-request-responseservice-in-wc/">Reason behind a request – response service in WCF&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/23/evolving-request-response-service-to-separate-contract-and-business-logic/">Evolving Request Response service to separate contract and business logic&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I described in the last post of the series the structure behind the Request/Reponse service based on MEF, now it is time to explain how to make MEF and WCF happily live together. In the first version I hosted the service with these simple lines of code&lt;/p></description></item><item><title>Evolving Request Response service to separate contract and business logic</title><link>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</link><pubDate>Mon, 23 Apr 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</guid><description>&lt;p>Example &lt;a href="http://www.codewrecks.com/Files/requestresponsemef.zip">&lt;strong>can be downloaded here&lt;/strong>&lt;/a> &lt;strong>.&lt;/strong> I previously described a scenario where the customer needs a &lt;a href="www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">really basic Request Response service in WCF&lt;/a>, the goal is being able to take &lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/05/reson-behind-request-responseservice-in-wc/">advantage of a request / response structure&lt;/a>, but with an approach like: “&lt;em>the simpliest thing that could possibly works&lt;/em>”. This technique is usually needed to &lt;strong>introduce new architectural concepts in a team&lt;/strong> without requiring people to learn a huge amount of concepts in a single shot, a scenario that could ends in a  team that actively * &lt;strong>fight the new architecture because it is too complex&lt;/strong> *.&lt;/p></description></item><item><title>Troubleshoot WCF exception</title><link>https://www.codewrecks.com/post/old/2012/04/troubleshoot-wcf-exception/</link><pubDate>Mon, 23 Apr 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/troubleshoot-wcf-exception/</guid><description>&lt;p>WCF is an exceptional library but sometimes it is hard to troubleshoot problems, especially when you start to encounter intermittent communication errors and you feel lost because you have no clue on where the error is. As an example I have a service that worked for a lot of time, then sometimes the client started to receive this error&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>The server did not provide a meaningful reply; this might be caused by a contract mismatch, a premature session shutdown or an internal server error&lt;/strong> The easiest way to troubleshoot this kind of error is to enable logging for WCF in the system.diagnostic section of the application configuration file, just modify the system.Diagnostics adding a System.ServiceModel source to enable logging and be sure to redirect the log into a file with the.svclog extension because it has the Microsoft Service Trace Viewer tools asssociated with it.&lt;/p></description></item><item><title>Wcf error Keyset does not exist with security certificate</title><link>https://www.codewrecks.com/post/old/2012/04/wcf-error-keyset-does-not-exist-with-security-certificate/</link><pubDate>Sat, 21 Apr 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/wcf-error-keyset-does-not-exist-with-security-certificate/</guid><description>&lt;p>I worked a lot with WCF secured services and whenever is time to use certificates it is not uncommon to encounter strange and not so much descriptive exceptions. One of the less intuitive one is “ &lt;strong>keyset does not exists with security certificate”&lt;/strong> , that basically means that the worker process in IIS is not able to access the service.&lt;/p>
&lt;p>I’ve dealt with this problem in an old post, when I used self issued certificates to manage secure client/server communication between windows forms client and a service hosted in IIS, but the very same error happened yesterday trying to configure a &lt;strong>net.tcp binding on a service that already uses wsHttpBinding to communicate through Https&lt;/strong>. The root cause of this error usually is due to a wrong security configuration so you should fire mmc.exe (just start-&amp;gt;run-&amp;gt;mmc) then choose the certificate snap-in on local computer, locate the certificate used by IIS for HTTPS and give read permission to the user used to run the worker process of the service.&lt;/p></description></item><item><title>Reason behind a request 8211 response service in WCF</title><link>https://www.codewrecks.com/post/old/2012/04/reson-behind-request-responseservice-in-wc/</link><pubDate>Thu, 05 Apr 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/reson-behind-request-responseservice-in-wc/</guid><description>&lt;p>I dealt with a minimal implementation of a &lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">basic Request Response WCF Service&lt;/a> some times ago, now it is time to show some advantages you have using this approach. If the caller is created in.NET technology, you can &lt;strong>directly reference&lt;/strong> &lt;strong>the dll that contains all Requests and responses&lt;/strong> , without the need to create a service reference in Visual Studio. In my example the service is called CoreService, so I created a CoreServiceClient class to implement communication from client to server.&lt;/p></description></item><item><title>Basic Request Response WCF service</title><link>https://www.codewrecks.com/post/old/2012/03/basic-request-response-wcf-service/</link><pubDate>Mon, 12 Mar 2012 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/basic-request-response-wcf-service/</guid><description>&lt;p>The concept of Request-Response service is to have an endpoint with a single function capable to handle a command (a Request) and return a Response, to have a single entry point of our service. There are a lot of architectures around the web based on WCF and this pattern and this &lt;a href="http://davybrion.com/blog/2009/11/requestresponse-service-layer-series/">old series of post are a really good example&lt;/a> on how you can implement it in practice.&lt;/p>
&lt;p>The only drawback is that sometimes these architectures are quite complex for the average programmer, at least you can introduce them in a team where everyone is quite familiar with concept of Inversion Of Control, Dependency Injection, etc etc. The risk is that people are scared about the complexity and they start to believe that the benefit of such an architecture does not worth the extra complexity of the code, after all with WCF you can simply create a function on the interface, an implementation on a service class, update service reference and the game is done. On the contrary, some implementations of Request/Response pattern are quite complicated, you need to create a request, then the handler, then configure the IoC engine, etc etc.&lt;/p></description></item><item><title>How to test SSL based WCF services</title><link>https://www.codewrecks.com/post/old/2011/11/how-to-test-ssl-based-wcf-services/</link><pubDate>Mon, 21 Nov 2011 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/how-to-test-ssl-based-wcf-services/</guid><description>&lt;p>I usually work with WCF service that needs to be secured with Certificates or simply using HTTPS. The usual question from other dev in the team is “how can I simulate HTTPS to work with WCF?”&lt;/p>
&lt;p>The problem arise that to test https sites, people usually work with IIS self issued certificates.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/11/SNAGHTMLa82f3d.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/11/SNAGHTMLa82f3d_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/11/SNAGHTMLa82f3d_thumb.png" alt="SNAGHTMLa82f3d" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Self-Signed certificate in IIS&lt;/em>&lt;/p>
&lt;p>This works great for sites, you can use the auto signed certificate in your sites in https binding, then when you navigate to the site you usually got an error because the certificate is not issued for the right site. What I need is usually to modifiy the hosts file in windows, creating an alias of &lt;a href="http://www.mydomain.com">www.mydomain.com&lt;/a> to 127.0.0.1, so I can directly point to the right address with WCF client application and can simply manage to use the local or remote service simply modifying the hosts file.&lt;/p></description></item><item><title>Extending the WCF castle proxy generator</title><link>https://www.codewrecks.com/post/old/2010/04/extending-the-wcf-castle-proxy-generator/</link><pubDate>Fri, 02 Apr 2010 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/04/extending-the-wcf-castle-proxy-generator/</guid><description>&lt;p>Since I&amp;rsquo;m using extensively the &lt;a href="http://www.codewrecks.com/blog/index.php/2009/10/21/wcf-client-proxies-created-by-wcf-and-timeout/">Wcf castle proxy generator&lt;/a> today I needed to add a new feature, I need to be able to specify via code the base address of the various services. I know that my service are usually in &lt;a href="https://www.mysite.com/services/">https://www.mysite.com/services/&lt;/a> but I want to be able to specify via code the base address, especially to target different environment, like production and test.&lt;/p>
&lt;p>To keep everything simple, I created a simple static property on the proxy creator&lt;/p></description></item><item><title>Wcf over https authentication with aspnet membership</title><link>https://www.codewrecks.com/post/old/2009/11/wcf-over-https-authentication-with-asp-net-membership/</link><pubDate>Thu, 26 Nov 2009 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/wcf-over-https-authentication-with-asp-net-membership/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/11/25/wcf-over-secure-transport/">last article&lt;/a> I explained how to configure WCF to secure a service with https, with no authentication, now I want to show you the configuration needed to enable role and user membership using a standard asp.net provider.&lt;/p>
&lt;p>Here is the service definition on the server&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;service&lt;/span> &lt;span style="color:#a6e22e">behaviorConfiguration=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WsHttpWithAuthBehavior&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyProject.DoSomethingService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;endpoint&lt;/span> &lt;span style="color:#a6e22e">address=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://mydomain.it/DoSomethingService.svc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wsHttpBinding&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyService&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bindingConfiguration=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wsHttps&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contract=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyProject.IDoSomethingService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;identity&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;dns&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mydomain.it&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/identity&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/endpoint&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;endpoint&lt;/span> &lt;span style="color:#a6e22e">address=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mex&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mexHttpsBinding&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">contract=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IMetadataExchange&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/service&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>the binding is wsHttpBinding, because we need to specify credentials, so we cannot use a basicHttpBinding, also the mex uses mexHttpsBinding because we are in https and not http. The interesting stuff is in the behavior and binding configuration.&lt;/p></description></item><item><title>Wcf over secure transport</title><link>https://www.codewrecks.com/post/old/2009/11/wcf-over-secure-transport/</link><pubDate>Wed, 25 Nov 2009 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/wcf-over-secure-transport/</guid><description>&lt;p>In some &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">older&lt;/a> &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/">posts&lt;/a>, I dealt with wcf configuration to manage authentication of a service with the asp.net &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">membership provider&lt;/a>.&lt;/p>
&lt;p>Now I need to modify configuration, because in another project, all the site is forced over https, and the configuration I used in the other project cannot be used anymore. In older post in fact, I explained how to send credentials over http with message security, using self issued certificates. Now I have transport security, so I can avoid the need to distribute certificates to people that will use the service.&lt;/p></description></item><item><title>Generate a certificate for Wcf service with windows server 2003</title><link>https://www.codewrecks.com/post/old/2009/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/</link><pubDate>Wed, 09 Sep 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/</guid><description>&lt;p>In the &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">previous post&lt;/a>, I showed how to setup authentication with asp.net membership in wsHttpBinding for a Wcf server, and in that post I showed how to use the utility &lt;strong>makecert.exe&lt;/strong> to generate temporary certificates. In production environment you should generate certificates with a Certification Authority.&lt;/p>
&lt;p>If you search in the internet how to generate a certificate with windows server 2003 CA, you find very little information, here is how I did it.&lt;/p></description></item></channel></rss>