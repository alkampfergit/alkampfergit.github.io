<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enterprise Library on Codewrecks</title><link>https://www.codewrecks.com/tags/enterprise-library/</link><description>Recent content in Enterprise Library on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 28 Feb 2009 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/enterprise-library/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage trees with entity framework part II</title><link>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework-part-ii/</link><pubDate>Sat, 28 Feb 2009 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework-part-ii/</guid><description>Manage Tree With Entity Framework – The basic
One of the most obvious problem showed in previous post is the need to issue a single Select for each node to rebuild the tree, but the good thing is that there are a lot of solutions over there to solve this problem. One of the most interesting technique was developed by Joe Celko, first of all I added two field to the table, one field is named * hierarchyLevel *and the other is named * fullpath *, then I setup a couple of triggers.</description></item><item><title>Unity and AOP in enterprise library</title><link>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</link><pubDate>Sat, 31 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</guid><description>Part 1 – Basic of IoC unity container
Part 2 – Basic of resolving dependencies and configure objects.
Part 3 – AOP with Policy Injection Application Block
Part 4 – Custom Handler to use with Policy Injection Application Block
Part 5 – Combine policy Injection Application Block with UnityIn last post I showed how Policy Injection Application Block is now only a tiny wrapper around Unity. So Unity is the enterprise library section that does both AOP and Dependency Injection, this make me a little bit confused :) so I decided to forget about PIAB, just to avoid confusion.</description></item><item><title>Combine Policy Injection Application Block with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</link><pubDate>Mon, 26 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</guid><description>Part 1 – Basic of IoC unity container
Part 2 – Basic of resolving dependencies and configure objects.
Part 3 – AOP with Policy Injection Application Block
Part 4 – Custom Handler to use with Policy Injection Application Block
In previous parts I showed how to configure unity container and how to create a custom handler for policy injection application block, now it is time to speak about integration between PIAB and Unity container.</description></item><item><title>Custom Handler to use with Policy Injection Application Block</title><link>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</link><pubDate>Sun, 18 Jan 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</guid><description>Previous Posts:
Part 1 – Basic of IoC unity container
Part 2 – Basic of resolving dependencies and configure objects.
Part 3 – AOP with Policy Injection Application Block
In this fourth part I’ll examine how to build a simple custom handler that will be used with Policy Injection Application Block. The purpose of the handler is simply dumping to console the name of the called method as well all the parameters with theirs values.</description></item></channel></rss>