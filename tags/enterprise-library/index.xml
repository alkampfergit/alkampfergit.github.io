<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enterprise Library on Codewrecks</title><link>https://www.codewrecks.com/tags/enterprise-library/</link><description>Recent content in Enterprise Library on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 28 Feb 2009 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/enterprise-library/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage trees with entity framework part II</title><link>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework-part-ii/</link><pubDate>Sat, 28 Feb 2009 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/manage-trees-with-entity-framework-part-ii/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/02/27/manage-trees-with-entity-framework/">Manage Tree With Entity Framework – The basic&lt;/a>&lt;/p>
&lt;p>One of the most obvious problem showed in previous post is the need to issue a single Select for each node to rebuild the tree, but the good thing is that there are a lot of solutions over there to solve this problem. One of the most interesting technique was developed by &lt;a href="http://www.celko.com/">Joe Celko&lt;/a>, first of all I added two field to the table, one field is named * &lt;strong>hierarchyLevel&lt;/strong> *and the other is named * &lt;strong>fullpath&lt;/strong> *, then I setup a couple of triggers.&lt;/p></description></item><item><title>Unity and AOP in enterprise library</title><link>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</link><pubDate>Sat, 31 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-and-aop-in-enterprise-library/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/18/custom-handler-to-use-with-policy-injection-application-block/">Part 4 – Custom Handler to use with Policy Injection Application Block&lt;/a>&lt;br>
&lt;u>&lt;font color="#acb613">&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/26/combine-policy-injection-application-block-with-unity/">Part 5 – Combine policy Injection Application Block with Unity&lt;/a>&lt;/font>&lt;/u>&lt;/p>
&lt;p>In last post I showed how Policy Injection Application Block is now only a tiny wrapper around Unity. So Unity is the enterprise library section that does both AOP and Dependency Injection, this make me a little bit confused :) so I decided to forget about PIAB, just to avoid confusion.&lt;/p></description></item><item><title>Combine Policy Injection Application Block with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</link><pubDate>Mon, 26 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</guid><description>&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/18/custom-handler-to-use-with-policy-injection-application-block/">Part 4 – Custom Handler to use with Policy Injection Application Block&lt;/a>&lt;/p>
&lt;p>In previous parts I showed how to configure unity container and how to create a custom handler for policy injection application block, now it is time to speak about integration between PIAB and Unity container.&lt;/p></description></item><item><title>Custom Handler to use with Policy Injection Application Block</title><link>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</link><pubDate>Sun, 18 Jan 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/custom-handler-to-use-with-policy-injection-application-block/</guid><description>&lt;p>Previous Posts:&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/16/first-steps-with-unity/">Part 1 – Basic of IoC unity container&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/other-experiments-with-unity/">Part 2 – Basic of resolving dependencies and configure objects.&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2009/01/17/unity-policy-injection-application-block-and-aop/">Part 3 – AOP with Policy Injection Application Block&lt;/a>&lt;/p>
&lt;p>In this fourth part I’ll examine how to build a simple custom handler that will be used with &lt;a href="http://msdn.microsoft.com/en-us/library/dd139982.aspx">Policy Injection Application Block&lt;/a>. The purpose of the handler is simply dumping to console the name of the called method as well all the parameters with theirs values. Here is the class.&lt;/p></description></item></channel></rss>