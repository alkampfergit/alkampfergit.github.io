<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on Codewrecks</title><link>https://www.codewrecks.com/tags/oop/</link><description>Recent content in OOP on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 02 Jan 2012 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Fluent interface for factory to create hierarchy of objects</title><link>https://www.codewrecks.com/post/old/2012/01/fluent-interface-for-factory-to-create-hierarchy-of-objects/</link><pubDate>Mon, 02 Jan 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/01/fluent-interface-for-factory-to-create-hierarchy-of-objects/</guid><description>&lt;p>&lt;a href="http://www.martinfowler.com/bliki/FluentInterface.html">Fluent interfaces&lt;/a> are great for a various amount of situations because they permit to create a simple DSL using only the base capabilities of your language of choice. I like very much Fluent Interfaces especially to create &lt;a href="http://en.wikipedia.org/wiki/Factory_%28software_concept%29">Factories&lt;/a> to avoid messing with several constructors when your classes are complex to create.&lt;/p>
&lt;p>&lt;font size="3">&lt;strong>The model&lt;/strong>&lt;/font>&lt;/p>
&lt;p>Suppose you want to create a fluent Factory for a * &lt;strong>Character&lt;/strong> *abstract class that has two concrete classes called: &lt;strong>Warriors&lt;/strong> and &lt;strong>Wizards,&lt;/strong> with this model you want to create a Fluent Interface to create object. This is the Class Diagram&lt;/p></description></item><item><title>Traffic Light Experiment</title><link>https://www.codewrecks.com/post/old/2011/11/traffic-light-experiment/</link><pubDate>Mon, 07 Nov 2011 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/traffic-light-experiment/</guid><description>&lt;p>Suppose you need to implement a traffic light manager for a crossroad and you decide to approach with a DDD style to experiment some patterns and techniques. Going with DDD-Like approach in such a simple scenario is probably not the best idea, but the aim of this little experiment is trying to approach a problem trying to follow “object thinking”.&lt;/p>
&lt;p>A classic approach to this problem usually produces a  TrafficLight class with a bunch of properties and probably a CrossRoad or TrafficLightManager class with all the logic, that basically read the status of Traffic Lights elaborates these data and change the status accordingly.&lt;/p></description></item><item><title>Leverage the concept of 'state' of your entities</title><link>https://www.codewrecks.com/post/old/2011/06/leverage-the-concept-of-state-of-your-entities/</link><pubDate>Mon, 13 Jun 2011 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/leverage-the-concept-of-state-of-your-entities/</guid><description>&lt;p>One of the interesting ideas found in &lt;a href="http://radical.codeplex.com/">Radical&lt;/a> and other implementations of DDD architectures, is implementing properties of Domain objects in a slightly different way from the standard, using something like a dictionary to store values of properties. When we want to implement a property for a Domain class you usually end up with similar code.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String Property { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _fieldBasedProperty;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String FieldBasedProperty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> _fieldBasedProperty; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">set&lt;/span> { _fieldBasedProperty = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Both of them use a private field to store the real value of the property, the first one is a compact form  (I to not like it for Domain object because it gives you no control on state changing of the object), the second one is the standard code to implement a property with a Backing field. Remember that in OOP an Object is a composition of Code and Data and having getter and setter for properties give use control on the * &lt;strong>state&lt;/strong> *of the object. Both of the above implementations are based on this concept and are widely used in all projects.&lt;/p></description></item><item><title>EntityLock implement a logic locking strategy in my domain</title><link>https://www.codewrecks.com/post/old/2011/05/entitylock-implement-a-logic-locking-strategy-in-my-domain/</link><pubDate>Wed, 25 May 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/entitylock-implement-a-logic-locking-strategy-in-my-domain/</guid><description>&lt;p>I have a domain where one of the business operation consists of analysis of some entities, for each entity we need to do complex analysis involving external servers and until now we could live with a single server that sequentially analyze those entities one after another.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2011/05/image12.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2011/05/image_thumb12.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2011/05/image_thumb12.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>All works good, but we reach a point where the amount of work reached the capacity of the Analyzer server, so we need to change the analysis algorithm to parallelize the analysis.&lt;/p></description></item></channel></rss>