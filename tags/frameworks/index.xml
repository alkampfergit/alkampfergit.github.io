<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frameworks on Codewrecks</title><link>https://www.codewrecks.com/tags/frameworks/</link><description>Recent content in Frameworks on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jan 2009 02:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/frameworks/index.xml" rel="self" type="application/rss+xml"/><item><title>Combine Policy Injection Application Block with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</link><pubDate>Mon, 26 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/combine-policy-injection-application-block-with-unity/</guid><description>Part 1 – Basic of IoC unity container
Part 2 – Basic of resolving dependencies and configure objects.
Part 3 – AOP with Policy Injection Application Block
Part 4 – Custom Handler to use with Policy Injection Application Block
In previous parts I showed how to configure unity container and how to create a custom handler for policy injection application block, now it is time to speak about integration between PIAB and Unity container.</description></item><item><title>Unity policy injection application block and AOP</title><link>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</link><pubDate>Sat, 17 Jan 2009 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/unity-policy-injection-application-block-and-aop/</guid><description>This is the third on a series of post I’m doing while exploring the Unity IoC container.
Part 1 – Basic of IoC unity container
Part 2 – Basic of resolving dependencies and configure objects.
Now it is time of AOP and using Policy Injection Application Block. AOP it is a very interesting technique, used to inject behavior on a class at runtime. To use AOP with Unity and policy injection application block you should wrap the instances returned by the Unity container as shown in this snippet.</description></item><item><title>Other experiments with Unity</title><link>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</link><pubDate>Sat, 17 Jan 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/01/other-experiments-with-unity/</guid><description>Yesterday I give a look at unity, an Inversion Of Control container made by Microsoft, today I’m experimenting a little more to have more confidence with it.
An IoC container not only permits to resolve a concrete entity, but it also permits you to configure it. Here is how you can set a simple property on an object.
1 2 3 4 5 6 7 8 9 &amp;lt;type type=&amp;#34;ITest&amp;#34; mapTo=&amp;#34;TestB&amp;#34; name=&amp;#34;OtherTest&amp;#34;&amp;gt; &amp;lt;typeConfig extensionType=&amp;#34;Microsoft.</description></item><item><title>Live logging with log4net and WCF part 2</title><link>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</link><pubDate>Wed, 05 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/live-logging-with-log4net-and-wcf-part-2/</guid><description>In previous post I showed how to create a publish/subscribe logger with WCF and log4net, now I show you my first use of this particular appender.
When you work with nhibernate you can use show-sql configuration parameter to instruct nhibernate to show generated sql, but how can you see this output in a running windows application? You should know that NHibernate has various log4Net logger, and you can instruct the session to dump all sql code to a logger, here it is a possible configuration</description></item><item><title>Again on INotifyPropertyChanged and POCO object</title><link>https://www.codewrecks.com/post/old/2008/08/again-on-inotifypropertychanged-and-poco-object/</link><pubDate>Thu, 07 Aug 2008 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/08/again-on-inotifypropertychanged-and-poco-object/</guid><description>In this post Matteo shows that if you build a dynamic object to create a proxy that implements INotifyPropertyChanged this does not works with BindingList&amp;lt;T&amp;gt;.
First of all I want to say that my previous two post were made only to show how to create a proxy, I really believe that using Dynamic Code Generation to implement Interfaces like INotifyPropertyChanged is not a good idea.
The greatest problem with dynamic objects is that the *type is known only at run time, and not at compile time,*this means that at compile time you cannot make any supposition on the proxy itself.</description></item><item><title>Writing a custom formatter for log4net</title><link>https://www.codewrecks.com/post/old/2008/04/writing-a-custom-formatter-for-log4net/</link><pubDate>Tue, 29 Apr 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/writing-a-custom-formatter-for-log4net/</guid><description>Log4Net is certainly one of the most important instrumentation library for logging. Let’s see how to extend, writing a custom formatter for exceptions. Exceptions are important things to log, and it is important to log more information as possible, here is how can you write a simple class to log exception
1 2 3 4 5 6 7 8 9 10 public class ExceptionLayoutExtended : log4net.Layout.LayoutSkeleton { private PatternLayout patternLayout; PatternLayout PatternLayout { get { return patternLayout ?</description></item><item><title>CCNEt and Unable to read the specified saved state The configuration data may be invalid</title><link>https://www.codewrecks.com/post/old/2008/04/ccnet-and-unable-to-read-the-specified-saved-state-the-configuration-data-may-be-invalid/</link><pubDate>Thu, 24 Apr 2008 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/04/ccnet-and-unable-to-read-the-specified-saved-state-the-configuration-data-may-be-invalid/</guid><description>Yesterday one of my colleagues stopped for a while the cc.net in our server, then this morning I look at the dashboard and find an error
Unable to read the specified saved state. The configuration data may be invalid.
after some minutes wendering in internet trying to find a solution I check the cc.net directory, in my server is D:\CruiseControl\CruiseControl.NET\server. Now in this directory there are some files with stateextension, one for each project.</description></item><item><title>A new container for Inversion of Control</title><link>https://www.codewrecks.com/post/old/2008/02/a-new-container-for-inversion-of-control/</link><pubDate>Wed, 27 Feb 2008 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/a-new-container-for-inversion-of-control/</guid><description>I’ve stumbled onto Autofac, this seems to be a new IOC container, that promise good thing….maybe it’s worth to take a look at.
Alk.</description></item><item><title>Linq and Domain Model</title><link>https://www.codewrecks.com/post/old/2008/02/linq-and-domain-model/</link><pubDate>Mon, 04 Feb 2008 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/02/linq-and-domain-model/</guid><description>For those loving the Domain Model approach, LINQ could be the most interesting features of VS2008. Here is a stupid example. When you have to transfer data to the UI, usually you do not want to pass to the UI the real object of the domain, but it is better to use some DTO. Converting a list of domain object into DTO can be a boring issue, but with linq it is really simple.</description></item></channel></rss>