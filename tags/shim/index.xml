<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shim on Codewrecks</title><link>https://www.codewrecks.com/tags/shim/</link><description>Recent content in Shim on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 14 Jun 2012 15:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/shim/index.xml" rel="self" type="application/rss+xml"/><item><title>Shim constructors to isolate 'Future Objects'</title><link>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</link><pubDate>Thu, 14 Jun 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/06/shim-constructors-to-isolate-future-objects/</guid><description>I’ve already blogged previously about the new Shim Library of Visual Studio 2012
Using Shims in Visual Studio to test untestable code Shim and InstanceBehavior fallthrough to isolate part of the SUT. Now it is time to explore another scenario where shim can save your life. Suppose you are working with Hardware, Es. a barcode reader and you have a class in your system wrote in this way.
1 2 3 4 5 6 7 8 9 10 11 12 public class BarcodeReader { public BarcodeReader() { //connect to the hardware, if the hardware is not there //throw an exception } public String ReadCode() { //dialogate with the hardware and get the Barcode } } This class manage the connection to a physical BarcodeReader in the constructor and if something went wrong throws an exception and expose a ReadCode method that ask the Physical reader to read a Barcode.</description></item><item><title>Shim and InstanceBehavior fallthrough to isolate part of the SUT</title><link>https://www.codewrecks.com/post/old/2012/05/shim-and-instancebehavior-fallthrough-to-isolate-part-of-the-sut/</link><pubDate>Thu, 10 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/shim-and-instancebehavior-fallthrough-to-isolate-part-of-the-sut/</guid><description>I’ve dealt in a previous post with the new Shim library in Vs11 that permits you to test “difficult to test code” and I showed a really simple example on how to use Shim to isolate the call to DateTime.Now to simulate passing time in a Unit Test. Now I want to change a little bit the perspective of the test, in the test showed in previous post I simply exercise the sut calling Execute() a couple of time, simulating the time that pass between the two calls.</description></item></channel></rss>