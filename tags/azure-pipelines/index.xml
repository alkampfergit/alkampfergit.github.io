<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Pipelines on Codewrecks</title><link>https://www.codewrecks.com/tags/azure-pipelines/</link><description>Recent content in Azure Pipelines on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 11 Apr 2020 06:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/azure-pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Strange Error uploading artifacts in Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline/</link><pubDate>Sat, 11 Apr 2020 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline/</guid><description>&lt;p>I have a pipeline that worked perfectly for Years, but yesterday a &lt;strong>build failed while uploading artifacts,&lt;/strong> I queued it again and it still failed, so it does not seems to be an intermittent error (network could be unreliable). I was really puzzled because from the last good build we changed 4 C# files, nothing really changed that can justify the failing and also we have no network problem that can justify problem uploading artifacts to Azure DevOps.&lt;/p></description></item><item><title>Azure DevOps Pipeline template steps and NET Core 3 local tools</title><link>https://www.codewrecks.com/post/old/2020/04/azure-devops-pipeline-template-steps-and-net-core-3-local-tools/</link><pubDate>Tue, 07 Apr 2020 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/azure-devops-pipeline-template-steps-and-net-core-3-local-tools/</guid><description>&lt;p>I’m a strong fan of Azure DevOps templates for pipelines because it is a really good feature to both simplify Pipeline authoring and avoid proliferation of too many way to do the same things. &lt;strong>In some of my&lt;/strong> &lt;a href="http://www.codewrecks.com/blog/index.php/2020/03/29/azure-devops-pipeline-template-for-build-and-release-net-core-project/">&lt;strong>previous examples&lt;/strong>&lt;/a> &lt;strong>I’ve always used a template that contains full Multi Stage pipeline definition&lt;/strong> , this allows you to create a new pipeline with easy, reference repository with the template, choose right template, set parameters and you are ready to go.&lt;/p></description></item><item><title>Azure DevOps agent with Docker Compose</title><link>https://www.codewrecks.com/post/old/2019/12/azure-devops-agent-with-docker-compose/</link><pubDate>Fri, 27 Dec 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/12/azure-devops-agent-with-docker-compose/</guid><description>&lt;p>I’ve dealt in the past on using Docker for your Azure DevOps Linux Build Agent in a post called &lt;a href="http://www.codewrecks.com/blog/index.php/2017/10/14/configure-a-vsts-linux-agent-with-docker-in-minutes/">Configure a VSTS Linux agent with docker in minutes&lt;/a> and also I’ve blogged on how you can &lt;a href="http://www.codewrecks.com/blog/index.php/2019/06/10/hosted-agents-plus-docker-perfect-match-for-azure-devops-and-open-source-project/">use Docker inside a build definition to have some prerequisite for testing&lt;/a> (like MongoDb and Sql Server), now it is time to move a little step further and leverage Docker compose.&lt;/p>
&lt;p>&lt;strong>Using Docker commands in pipeline definition is nice, but has some drawbacks:&lt;/strong> First of all this approach suffers in speed of execution, because the container must start each time you run a build (and should be stopped at the end of the build). Is indeed true that if the docker image is already present in the agent machine startup time is not so high, but some images, like MsSql, are not immediately operative, so you need to wait for them to be ready for Every Build. The alternative is leave them running even if the build is finished, but this could lead to resource exaustion.&lt;/p></description></item><item><title>Multiline PowerShell on YAML pipeline</title><link>https://www.codewrecks.com/post/old/2019/11/multiline-powershell-on-yaml-pipeline/</link><pubDate>Tue, 19 Nov 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/multiline-powershell-on-yaml-pipeline/</guid><description>&lt;p>Sometimes having a &lt;strong>few lines of PowerShell in your pipeline is the only thing you need to quickly customize a build without using a custom task or having a PowerShell file in source code&lt;/strong>. One of the typical situation is: write a file with some content that needs to be determined by a PowerShell script, in my situation I need to create a configuration file based on some build variable.&lt;/p></description></item><item><title>Azure DevOps gems YAML Pipeline and Templates</title><link>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</link><pubDate>Sun, 18 Aug 2019 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</guid><description>&lt;p>If you read my blog you already know that I’m a great fan of YAML Pipeline instead of using Graphic editor in the Web UI, there are lots of reasons why you should use YAML; one for &lt;strong>all the ability to branch Pipeline definition with code, but there is another really important feature:&lt;/strong> &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops">&lt;strong>templates&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>There is a really detailed documentation on &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops">MSDN&lt;/a> on how to use this feature, but I want to give you a complete walkthrough on how to start to effectively use templates. &lt;strong>Thanks to templates you can create a standard build definition with steps or jobs and steps in a template file, then reference that file from real build, just adding parameters.&lt;/strong> &amp;gt; &lt;strong>The ability to capture a sequence of steps in a common template file and reuse it over and over again in real pipeline is probably one of the top reason for moving to YAML template.&lt;/strong> One of the most common scenario for me is: account with lots of utilities projects (multitargeted for full framework and dotnetstandard), each one with its git repository and the need for a standard CI definition to:&lt;/p></description></item></channel></rss>