<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EF on Codewrecks</title><link>https://www.codewrecks.com/tags/ef/</link><description>Recent content in EF on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 22 Jan 2014 20:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/ef/index.xml" rel="self" type="application/rss+xml"/><item><title>Inserting a Geography data in Sql Server with plain C SqlCommand</title><link>https://www.codewrecks.com/post/old/2014/01/inserting-a-geography-data-in-sql-server-with-plain-c-sqlcommand/</link><pubDate>Wed, 22 Jan 2014 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/01/inserting-a-geography-data-in-sql-server-with-plain-c-sqlcommand/</guid><description>Usually I access data with ORM like NHibernate or Entity Framework and resort to plain T-SQL only for reporting or manipulation of massive data, but yesterday I had to use some plain SQL to insert data in a table that has Geograpy column.
Figure 1: A table with geography data
If you use EF 5 you can simply declare the property of type DbGeography and everything is handled by Entity Framework for you.</description></item><item><title>Entity Framework error Some part of your SQL statement is nested too deeply</title><link>https://www.codewrecks.com/post/old/2013/10/entity-framework-error-some-part-of-your-sql-statement-is-nested-too-deeply/</link><pubDate>Wed, 02 Oct 2013 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/10/entity-framework-error-some-part-of-your-sql-statement-is-nested-too-deeply/</guid><description>Today a colleague told me that he got a strange Entity Framework error
Some part of your SQL statement is nested too deeply. Rewrite the query or break it up into smaller queries
I immediately ask him what kind of huge and big query he was issuing to EF , but the answer is pretty simple.
Context.EntityName.Where(u =&amp;gt; listOfId.Any(s =&amp;gt; s.Equals(u.UserId))).ToList()
and listOfId is a List&amp;lt;Int32&amp;gt; with 100 integer
Basically he want to retrieve all entities that are related to a list of UserIds, having the list of UserId inside a simple list of integer.</description></item></channel></rss>