<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VSTS on Codewrecks</title><link>https://www.codewrecks.com/tags/vsts/</link><description>Recent content in VSTS on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 05 Sep 2018 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/vsts/index.xml" rel="self" type="application/rss+xml"/><item><title>Copy Work Items between VSTS accounts TFS Instances</title><link>https://www.codewrecks.com/post/old/2018/09/copy-work-items-between-vsts-accounts-tfs-instances/</link><pubDate>Wed, 05 Sep 2018 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/09/copy-work-items-between-vsts-accounts-tfs-instances/</guid><description>&lt;p>This is a very common question: how can I copy Work Items information from a VSTS account to another account, or between VSTS and TFS. There are many scenarios where such functionality would be useful, but sadly enough, there is no option out-of-the box in the base product.&lt;/p>
&lt;p>If you do not have images or other complex data inside your WI and you do not care to maintain history, you can simply create a query that load all the WI you want to copy, open it in excel with TFS / VSTS integration (be sure to select all columns of interest), then copy and past into another Excel instance connected to the destination project, press push and you are done. This is only useful if you do not care losing images contained in description of your Work Item and if you do not care about history, because Excel is not capable of handling images.&lt;/p></description></item><item><title>Be sure to use latest version of Nuget Restore Task in VSTS Build</title><link>https://www.codewrecks.com/post/old/2018/08/be-sure-to-use-latest-version-of-nuget-restore-task-in-vsts-build/</link><pubDate>Mon, 27 Aug 2018 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/be-sure-to-use-latest-version-of-nuget-restore-task-in-vsts-build/</guid><description>&lt;p>If you have in VSTS some old build that uses Nuget restore task, it is time to check if you are using the new version, because if you still use the 0.x version you are missing some interesting features.&lt;/p>
&lt;blockquote>
&lt;p>With VSTS build it is always a good habit to periodically check if some of the tasks have new version.&lt;/p>&lt;/blockquote>
&lt;p>Here is as an example, how the version 0 is configured&lt;/p></description></item><item><title>Who moved my chees but now it is in a better place</title><link>https://www.codewrecks.com/post/old/2018/08/who-moved-my-chees-but-now-it-is-in-a-better-place/</link><pubDate>Mon, 13 Aug 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/who-moved-my-chees-but-now-it-is-in-a-better-place/</guid><description>&lt;p>I’m not a great fan when software I used everyday change position of stuffs, especially when main menu / navigation system changes. This is a problem generally known as “who moved my cheese” and lead to small frustration because you need to find where your everyday options were moved. &lt;strong>Recently VSTS changed navigation system, from an horizontal menu to a vertical menu&lt;/strong> , rearranging the whole navigation, my cheese was moved, but this time for better.&lt;/p></description></item><item><title>Creating a Wiki with code in VSTS</title><link>https://www.codewrecks.com/post/old/2018/08/creating-a-wiki-with-code-in-vsts/</link><pubDate>Thu, 02 Aug 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/creating-a-wiki-with-code-in-vsts/</guid><description>&lt;p>Information spread is one of the key of success for Agile Teams, the ability to quick find information about a project, definition of UBIQUITOUS LANGUAGE and everything that can be related to the project should be prominent for each member of the project. In this scenario, **the information should also be &lt;em>near&lt;/em> where it need to be, but at the same time it should be widely available to every member of the team **.&lt;/p></description></item><item><title>Leaving a VSTS Account</title><link>https://www.codewrecks.com/post/old/2018/06/leaving-a-vsts-account/</link><pubDate>Thu, 21 Jun 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/06/leaving-a-vsts-account/</guid><description>&lt;p>As a VSTS trainer, it is quite common for me to made students create VSTS Accounts, play with them and being enlisted in those account to help them in various stuff. It happens also that some customer gives me temporary access to the VSTS account, and in all those years, many of them forgot to remove me from the account.&lt;/p>
&lt;p>This is annoying because each time Visual Studio or other tools try to understand VSTS accounts I have right to access, the list is really long. &lt;strong>Luckily enough few months ago, the team added the ability to leave an account directly from your profile list&lt;/strong>.&lt;/p></description></item><item><title>Public projects in VSTS</title><link>https://www.codewrecks.com/post/old/2018/05/public-projects-in-vsts/</link><pubDate>Mon, 07 May 2018 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/05/public-projects-in-vsts/</guid><description>&lt;p>This is a long and awaited feature, not because VSTS should fight GitHub as Open Source repository standard, but because an organization is often composed by many private projects and some projects that are public and Open Source.&lt;/p>
&lt;p>You can read about the new feature &lt;a href="https://blogs.msdn.microsoft.com/devops/2018/04/27/vsts-public-projects-limited-preview/">in this blog post&lt;/a>, the feature is in preview, but will become available to every account in the future. Enjoy it.&lt;/p>
&lt;p>Gian Maria.&lt;/p></description></item><item><title>VSTS TFS use Wildcards for continuous integration in Git</title><link>https://www.codewrecks.com/post/old/2018/02/vsts-tfs-use-wildcards-for-continuous-integration-in-git/</link><pubDate>Tue, 20 Feb 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/02/vsts-tfs-use-wildcards-for-continuous-integration-in-git/</guid><description>&lt;p>If you setup a build in VSTS / TFS against a git repository, you can choose to trigger the build when some specific branch changed. &lt;strong>You can press plus button and a nice combobox appears to select the branch you want to monitor&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2018/02/image-3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2018/02/image_thumb-3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2018/02/image_thumb-3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Adding a branch as trigger in VSTS / TFS Build&lt;/em>&lt;/p>
&lt;p>This means that if you add feature/1312_languageSelector, each time a new commit will be pushed on that branch, a new build will trigger. Actually if you use GitFlow you are interested in building each feature branch, so you do not want to add every feature branch in the list of monitored branches.&lt;/p></description></item><item><title>New cool feature of VSTS to limit impact of erratic tests</title><link>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</link><pubDate>Tue, 13 Feb 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</guid><description>&lt;p>I’ve blogged some time ago about &lt;a href="http://www.codewrecks.com/blog/index.php/2017/08/17/running-uat-tests-in-a-vsts-tfs-release/">running UAT testing&lt;/a> with a mix of Build + Release in VSTS. &lt;strong>Actually, UAT testing are often hard to write, because they can be erratic&lt;/strong>. As an example, we have a software composed by 5 services that collaborates together, CQRS and Event Sourcing, so most of the tests are based on a typical pattern: Do something then wait for something to happen.&lt;/p>
&lt;blockquote>
&lt;p>Writing tests that interact with the UI or are based on several services interacting togheter can be difficult.&lt;/p></description></item><item><title>VSTS Package packages failed to publish</title><link>https://www.codewrecks.com/post/old/2018/01/vsts-package-packages-failed-to-publish/</link><pubDate>Thu, 18 Jan 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/01/vsts-package-packages-failed-to-publish/</guid><description>&lt;p>I have a build that publishes nuget packages on MyGet, we decided to move packages to VSTS internal package management, so I simply added another Build Task that pushes packages to VSTS internal feed. Sadly enough I got a really generic error&lt;/p>
&lt;p>&lt;strong>Error: An unexpected error occurred while trying to push the package with VstsNuGetPush.exe.&lt;/strong> &lt;strong>Packages failed to publish&lt;/strong> Those two errors does not gives me real information on what went wrong, but looking in the whole log, I verified that the error happens when the task was trying to publish symbols packages (2).&lt;/p></description></item><item><title>Migrate your TFS to VSTS</title><link>https://www.codewrecks.com/post/old/2017/12/migrate-your-tfs-to-vsts/</link><pubDate>Sat, 16 Dec 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/12/migrate-your-tfs-to-vsts/</guid><description>&lt;p>I’ve discussed a lot with many customers over the benefit of VSTS over TFS, especially for small companies, where there is no budget for a dedicated TFS administrator. The usual risk is not updating TFS, loosing the update train and then have a problem doing upgrades like TFS 2008 to TFS 2017.&lt;/p>
&lt;p>For those realities, adopting &lt;strong>VSTS is a huge benefit, no administration costs, no hardware costs, automatic upgrade, accessible from everywhere&lt;/strong> , same licensing (license for VSTS are also valid for TFS) and much more.  Also one of the original limitation, the inability to customize process, is now gone and, for certain aspect, VSTS is superior to the on-premise version (in VSTS you can do less customization but everything is done with Web Interface without needs to edit XML process file)&lt;/p></description></item><item><title>Converting regular build in YAML build</title><link>https://www.codewrecks.com/post/old/2017/12/converting-regular-build-in-yaml-build/</link><pubDate>Thu, 14 Dec 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/12/converting-regular-build-in-yaml-build/</guid><description>&lt;p>&lt;strong>YAML build in VSTS / TFS is one of the most welcomed feature in the Continuous Integration engine&lt;/strong> , because it really opens many new possibilities. Two of the most important advantages you have with this approach are: build definitions will follow branches, so each branch can have a different definition, then, since the build is in the code, &lt;strong>everything is audited, you can pull request build modification and you can test different build in branches as you do with code&lt;/strong>.&lt;/p></description></item><item><title>Configure a VSTS Linux agent with docker in minutes</title><link>https://www.codewrecks.com/post/old/2017/10/configure-a-vsts-linux-agent-with-docker-in-minutes/</link><pubDate>Sat, 14 Oct 2017 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/10/configure-a-vsts-linux-agent-with-docker-in-minutes/</guid><description>&lt;p>It is really simple to create a build agent for VSTS that runs in Linux and is capable of building and packaging your DotNetCore project, I’ve explained everything in &lt;a href="http://www.codewrecks.com/blog/index.php/2017/09/30/dotnetcore-ci-linux-and-vsts/">a previous post&lt;/a>, but I want to remind you that, with docker, the whole process is really simple.&lt;/p>
&lt;p>&lt;strong>Anyone knows that setting up a build machine often takes time.&lt;/strong> VSTS makes it super simple to install the Agent , just download a zip, call a script to configure the agent and the game is done. But this is only one side of the story. Once the agent is up, if you fire a build, it will fail if you did not install all the tools to compile your project (.NET Framework) and often you need to install the whole Visual Studio environment because you have specific dependencies. I have also code that needs MongoDB and Sql Server to run tests against those two databases, this will usually require more manual work to setup everything.&lt;/p></description></item><item><title>Pause build and clear long build queue</title><link>https://www.codewrecks.com/post/old/2017/10/pause-build-and-clear-long-build-queue/</link><pubDate>Thu, 12 Oct 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/10/pause-build-and-clear-long-build-queue/</guid><description>&lt;p>In VSTS / TFS Build system, you can change the status of the build, between three states: Enabled, Paused and Disabled. &lt;strong>The Paused state is really special, because all the build trigger are still active and builds are queued, but all these queued build does not starts&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Paused build&lt;/em>&lt;/p>
&lt;p>Paused state should be used with great care, because if you forget a build in this state, you can end up with lots of queued build, as you can see in &lt;em>&lt;strong>Figure 2&lt;/strong>&lt;/em>: &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image-1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image_thumb-1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/10/image_thumb-1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p></description></item><item><title>Check Angular AoT with a TFS Build</title><link>https://www.codewrecks.com/post/old/2017/09/check-angular-aot-with-a-tfs-build/</link><pubDate>Sat, 23 Sep 2017 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/09/check-angular-aot-with-a-tfs-build/</guid><description>&lt;p>Developing with Angular is a real fun, but usually during development you serve the application without any optimization, mainly because you want to speedup the compilation and serving of your Angular application.&lt;/p>
&lt;p>&lt;strong>When it is time to release the software, usually you build with –prod switch and usually you also use the –aot switch&lt;/strong> (it seems to me that it is on by default on –prod in latest version of the ng compiler). The aot switch enable the Ahead of Time compiling, that is used to speedup your deployed application and also it find some more error than a normal compilation.&lt;/p></description></item><item><title>Choose agent at build queue time</title><link>https://www.codewrecks.com/post/old/2017/09/choose-agent-at-build-queue-time/</link><pubDate>Thu, 07 Sep 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/09/choose-agent-at-build-queue-time/</guid><description>&lt;p>This is a simple feature that is not known very well and deserve a blog post. Sometimes you &lt;strong>want to queue a build to a specific agent in a queue and this can be simply done using agent.name as a demand&lt;/strong>.&lt;/p>
&lt;p>Demands are simple key/value pairs that allows the build engine to choose compatible agents and each agent automatically have a couple of capability to store computer name and agent name (they can be different)&lt;/p></description></item><item><title>VSTS agent on Ubuntu 1604 error in configuresh</title><link>https://www.codewrecks.com/post/old/2017/08/vsts-agent-on-ubuntu-16-04-error-in-configure-sh/</link><pubDate>Tue, 22 Aug 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/vsts-agent-on-ubuntu-16-04-error-in-configure-sh/</guid><description>&lt;p>I’ve downloaded the build/release agent from VSTS page to install in my Ubuntu 16.04 system, but when I tried to run the configuration shell script I got the following error&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Failed to initialize CoreCLR, HRESULT: 0x80131500&lt;/strong> *&lt;/li>
&lt;/ul>
&lt;p>This happens because &lt;strong>I installed the version for Ubuntu 14.04 and not the one specifically compiled for Ubuntu 16.04&lt;/strong>. In my situation the error happened because the download page of my VSTS account does not list the version for Ubuntu 16.04, but only for Ubuntu 14.04 and this incorrectly lead me to the false belief that it works for both versions. The page from where you download the agent is &lt;a href="https://myaccount.visualstudio.com/_admin/_AgentQueue" title="https://prxm.visualstudio.com/_admin/_AgentQueue">https://myaccount.visualstudio.com/_admin/_AgentQueue&lt;/a> and should also list the version for 16.04.&lt;/p></description></item><item><title>New Nuget Task in VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</link><pubDate>Tue, 22 Aug 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/new-nuget-task-in-vsts-build/</guid><description>&lt;p>If you edit a build in VSTS where you configured Nuget Packaging and Publishing, you can notice that all the old tasks to pack and publish are marked as deprecated.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/08/image-18.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/08/image_thumb-18.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/08/image_thumb-18.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Old nuget tasks that are now deprecated.&lt;/em>&lt;/p>
&lt;p>&lt;strong>Deprecating a package is needed when the Author decide to completely replace the entire package, changing also the id&lt;/strong>. This is needed when the task will be completely redesigned and will work in a complete different way from the old version.&lt;/p></description></item><item><title>Running UAT tests in a VSTS TFS release</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</link><pubDate>Thu, 17 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</guid><description>&lt;p>I’ve blogged on how to &lt;a href="http://www.codewrecks.com/blog/index.php/2017/08/05/running-uat-and-integration-tests-during-a-vsts-build/">run UAT and integration tests during a VSTS Build&lt;/a>; that solution works quite well but probably is not the right way to proceed. Generally speaking that build does its work but I have two main concerns.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Executing test with remote execution &lt;strong>requires installation of test agent and involves WinRm&lt;/strong> , a beast that is not so easy to tame outside a domain&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>I’m deploying the new version of the application with an XCopy deployment, that is different from a real deploy to production&lt;/strong>.&lt;/p></description></item><item><title>Running UAT and integration tests during a VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</link><pubDate>Sat, 05 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</guid><description>&lt;p>There are a lots of small suggestions I’ve learned from experience when it is time to create a suite of integration / UAT test for your project. &lt;strong>A UAT or integration test is a test that exercise the entire application, sometimes composed by several services that are collaborating to create the final result.&lt;/strong> The difference from UAT tests and Integration test, in my personal terminology, is that the UAT uses direct automation of User Interface, while an integration tests can skip the UI and exercise the system directly from public API (REST, MSMQ Commands, etc).&lt;/p></description></item><item><title>Dump all environment variables during a TFS VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/dump-all-environment-variables-during-a-tfs-vsts-build/</link><pubDate>Fri, 04 Aug 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/dump-all-environment-variables-during-a-tfs-vsts-build/</guid><description>&lt;p>Environment variables are really important during a build, especially because all Build variables are stored as environment variables, and this imply that &lt;strong>most of the build context is stored inside them&lt;/strong>. One of the feature I miss most, is the ability to easily visualize on the result of the build a nice list of all the values of Environment variables. We need also to be aware of the fact that tasks can change environment variables during the build, so we need to be able to decide the exact point of the build where we want variables to be dumped.&lt;/p></description></item><item><title>Writing a VSTS TFS task that uses 7zip</title><link>https://www.codewrecks.com/post/old/2017/07/writing-a-vsts-tfs-task-that-uses-7zip/</link><pubDate>Sat, 29 Jul 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/writing-a-vsts-tfs-task-that-uses-7zip/</guid><description>&lt;p>Writing a Build / Release task for VSTS / TFS is really simple, but when you need third party software you need to be aware of license issue. &lt;strong>As an example I have a small task that uses 7zip under the hood to compress / extract with the fantastic 7zip format.&lt;/strong> 7zip is good because, even if it uses more processing power to compress files, the result is often really smaller than a standard zip, and this is especially good for build agent that are behind a standard ADSL (300 Kbs upload speed). To create a task that uses 7zip you could simply include 7zip executable in your task, but this can lead to problem for licensing.&lt;/p></description></item><item><title>Decide to publish artifacts on Server or Network Share at queue time</title><link>https://www.codewrecks.com/post/old/2017/07/decide-to-publish-artifacts-on-server-or-network-share-at-queue-time/</link><pubDate>Wed, 19 Jul 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/decide-to-publish-artifacts-on-server-or-network-share-at-queue-time/</guid><description>&lt;p>A build usually produces artifacts and thanks to the extreme flexibility of VSTS / TFS Build system, you have complete freedom on what to include as artifacts and where you should locate them.&lt;/p>
&lt;p>Actually you have a couple of options out of the box, a network share or directly on your VSTS / TFS Server. This second option is especially interesting because you does not need a special network share and you do not have permission issue (every script or person that can access the server and have build permission can use the artifacts). &lt;strong>Having everything (build result and artifacts) on the server simplify your architecture&lt;/strong> , but it is not always feasible.&lt;/p></description></item><item><title>Hyper-V and Windows AutoLogon</title><link>https://www.codewrecks.com/post/old/2017/07/hyper-v-and-windows-autologon/</link><pubDate>Tue, 18 Jul 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/hyper-v-and-windows-autologon/</guid><description>&lt;p>When you configure build agents and especially when you configure Release Agents for VSTS, it is quite normal to have some installations where you want to use AutoLogon. &lt;strong>This is needed whenever you want to run integration tests that needs to interact with the UI.&lt;/strong> Having autologon enabled avoid the need to manually login and start the agent when the machine is rebooted, because you always have a user session opened that runs the agent.&lt;/p></description></item><item><title>Deploy test agent and run functional test tasks</title><link>https://www.codewrecks.com/post/old/2017/07/deploy-test-agent-and-run-functional-test-tasks/</link><pubDate>Fri, 14 Jul 2017 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/deploy-test-agent-and-run-functional-test-tasks/</guid><description>&lt;p>In VSTS / TFS Build there are a couple of tasks that are really useful to execute UAT or Functional tests during a build. &lt;strong>The first one deploy the test agent remotely on a target machine while the second one runs a set of tests on that machine using the agent.&lt;/strong> If you use multiple Run Functional Test task, please &lt;strong>be sure that before each task there is a corresponding Deploy test agent tasks or you will get an error.&lt;/strong> Actually I have a build that run some functional tests, then I’ve added another Run Functional Test task to run a second sets of functional tests. The result is that the first run does not have a problem, while the secondo one fails with a strange error&lt;/p></description></item><item><title>Publish a website available only in some branches with VSTS build</title><link>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</link><pubDate>Mon, 03 Jul 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/publish-a-website-available-only-in-some-branches-with-vsts-build/</guid><description>&lt;p>I have several builds that publish some web projects using standard msbuild task. Here is a sample configuration.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/07/image_thumb.png" alt="Simple image that shows the configuration of a Msbuild Task used to publish a web project." />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Publishing a web site with msbuild task.&lt;/em>&lt;/p>
&lt;p>This is super simple thanks to MsBuild task and a bit of MSBuild arguments, but quite often I face an annoying problem: &lt;strong>what about a new project that lives only on certain branches, but I need to publish in the build only if exists?&lt;/strong> &amp;gt; &lt;strong>Sometimes you need to execute some task in a build only if a file exists on disk (ex: a csproj file)&lt;/strong> Suppose this new Jarvis.Catalog.Web project exists today in a feature called feature/xyz, then the feature will be closed to develop in the future then will be merged to a release branch and finally on master branch. This poses a problem, &lt;strong>the MsBuild task to publish the web project will fail for every branch where that specific web project still does not exists.&lt;/strong> This is super annoying because you can set the build not to fail if this specific task failed, but this will mistakenly mark all build as partially succeeded only because that project still is not on that branch.&lt;/p></description></item><item><title>Publish nuget package during build NET Standard</title><link>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</link><pubDate>Mon, 29 May 2017 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/publish-nuget-package-during-build-net-standard/</guid><description>&lt;p>In a previous post I dealt with how to build a &lt;a href="http://www.codewrecks.com/blog/index.php/2017/05/24/build-net-standard-multitargeted-solution-in-vsts/">Multitargeted dotnetcore solution in VSTS&lt;/a>, but the build is not really complete unless you are publishing the result somewhere. Since my example was a simple library, the obvious solution is publishing everything to a nuget feed.&lt;/p>
&lt;p>&lt;strong>Publishing with nuget is really really simple with VSTS build system&lt;/strong> , because you should simply use another.NET Core task instance plus a NuGet publisher.&lt;/p></description></item><item><title>Error during dotnet restore in a VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/05/error-during-dotnet-restore-in-a-vsts-build/</link><pubDate>Sat, 27 May 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/05/error-during-dotnet-restore-in-a-vsts-build/</guid><description>&lt;p>I’ve a build that runs perfectly on some agents, but fails in others, and the error is in the &lt;strong>dotnet restore&lt;/strong> action. Here is the log of the failure:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>2017-05-27T10:07:39.3285800Z C:&lt;span style="color:#ae81ff">\P&lt;/span>rogram Files&lt;span style="color:#ae81ff">\d&lt;/span>otnet&lt;span style="color:#ae81ff">\s&lt;/span>dk&lt;span style="color:#ae81ff">\1&lt;/span>.0.4&lt;span style="color:#ae81ff">\N&lt;/span>uGet.targets&lt;span style="color:#f92672">(&lt;/span>97,5&lt;span style="color:#f92672">)&lt;/span>: error : The content at &lt;span style="color:#e6db74">&amp;#39;http://nuget.syncfusion.com/javascript&amp;#39;&lt;/span> is not a valid JSON object. &lt;span style="color:#f92672">[&lt;/span>C:&lt;span style="color:#ae81ff">\v&lt;/span>so&lt;span style="color:#ae81ff">\_&lt;/span>work&lt;span style="color:#ae81ff">\1&lt;/span>4&lt;span style="color:#ae81ff">\s\s&lt;/span>rc&lt;span style="color:#ae81ff">\N&lt;/span>Bus.sln&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017-05-27T10:07:39.3285800Z C:&lt;span style="color:#ae81ff">\P&lt;/span>rogram Files&lt;span style="color:#ae81ff">\d&lt;/span>otnet&lt;span style="color:#ae81ff">\s&lt;/span>dk&lt;span style="color:#ae81ff">\1&lt;/span>.0.4&lt;span style="color:#ae81ff">\N&lt;/span>uGet.targets&lt;span style="color:#f92672">(&lt;/span>97,5&lt;span style="color:#f92672">)&lt;/span>: error : Unexpected character encountered &lt;span style="color:#66d9ef">while&lt;/span> parsing value: &amp;amp;lt;. Path &amp;amp;&lt;span style="color:#75715e">#039;&amp;amp;#039;, line 0, position 0. [C:\vso\_work\14\s\src\NBus.sln]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017-05-27T10:07:39.5535786Z &lt;span style="color:#75715e">##[error]Error: C:\Program Files\dotnet\dotnet.exe failed with return code: 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2017-05-27T10:07:39.5545769Z &lt;span style="color:#75715e">##[error]Dotnet command failed with non-zero exit code on the following projects : C:\vso\_work\14\s\src\NBus.sln&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>It turns out that &lt;strong>those specifics agent machines have a global nuget configuration file that adds syncfusion nuget package source to the list of available nuget sources&lt;/strong>. That nuget source probably is not valid for dotnet restore command and the result is that the build is failing because dotnet restore throws errors.&lt;/p></description></item><item><title>The new Build editor in VSTS</title><link>https://www.codewrecks.com/post/old/2017/02/the-new-build-editor-in-vsts/</link><pubDate>Sat, 18 Feb 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/02/the-new-build-editor-in-vsts/</guid><description>&lt;p>In the latest update of VSTS a new build editor was rolled out and it is now available in your account. This is a preview of the new build editor and this imply that it is not immediately available, but &lt;strong>you need to activate it for your user&lt;/strong>. You can find the button to enable it in the build hub&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2017/02/image-3.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2017/02/image_thumb-3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2017/02/image_thumb-3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>New build editor can be activated within the UI&lt;/em>&lt;/p></description></item><item><title>Keep Git repository in sync between VSTS TFS and Git</title><link>https://www.codewrecks.com/post/old/2016/10/keep-git-repository-in-sync-between-vsts-tfs-and-git/</link><pubDate>Sat, 22 Oct 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/keep-git-repository-in-sync-between-vsts-tfs-and-git/</guid><description>&lt;blockquote>
&lt;p>Scenario: you have a repository in Git, both open source or in private repository and you want to keep a synchronized mirror in VSTS / TFS.&lt;/p>&lt;/blockquote>
&lt;p>There are some legitimate reason to have a mirrored repository between Github or some external provider and an instance of VSTS / TFS, probably the most common one is &lt;strong>keeping all development of a repository private and publish in open source only certain branches.&lt;/strong> Another reason is having all the code in Github completely in open source, but internally use VSTS Work Item to manage work with all the advanced tooling VSTS has to offer.&lt;/p></description></item><item><title>Using PAT to authenticate your tools</title><link>https://www.codewrecks.com/post/old/2016/10/using-pat-to-authenticate-your-tools/</link><pubDate>Sat, 15 Oct 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/using-pat-to-authenticate-your-tools/</guid><description>&lt;p>&lt;strong>One of the strength point of VSTS / TFS is the extensibility through API&lt;/strong> , and now that we have a really nice set of REST API, it is quite normal to write little tools that interacts with your VSTS / TFS instances.&lt;/p>
&lt;p>&lt;strong>Whenever you write tools that interact with VSTS / TFS you need to decide how to authenticate to the server.&lt;/strong> While for TFS is quite simple because you can simply run the tool with Active Directory user and use AD integration, in VSTS integrating with your AD requires more work and it is not always a feasible solution.&lt;/p></description></item><item><title>Import a Git Project with REST API between VSTS Team Projects</title><link>https://www.codewrecks.com/post/old/2016/10/import-a-git-project-with-rest-api-between-vsts-team-projects/</link><pubDate>Sat, 08 Oct 2016 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/import-a-git-project-with-rest-api-between-vsts-team-projects/</guid><description>&lt;p>I’ve got an interesting question about the possibility to import via REST API a Git Repository between Team Projects of VSTS. Actually the problem is: **you want to import a private git repository from a &lt;em>Source repository&lt;/em>(in this situation is another VSTS git repository but it could be hosted everywhere) to a VSTS &lt;em>Target  repository&lt;/em> using only REST API. **The operation is quite simple thanks to the new api described here (&lt;a href="https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository" title="https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository">https://www.visualstudio.com/en-us/docs/integrate/api/git/import-requests#create-a-request-to-import-a-repository&lt;/a>) and in this post I’ll give you all the details.&lt;/p></description></item><item><title>Use different Excel TFS VSTS Addin at the same time</title><link>https://www.codewrecks.com/post/old/2016/09/use-different-excel-tfs-vsts-addin-at-the-same-time/</link><pubDate>Sat, 03 Sep 2016 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/09/use-different-excel-tfs-vsts-addin-at-the-same-time/</guid><description>&lt;p>If you are a consultant, it is quite common that you work with various version of TFS Server at the same time. I have my personal account on VSTS, always updated to the latest version, but I have also customer that still uses TFS 2012 or TFS 2010.&lt;/p>
&lt;p>Microsoft test newer version of TFS against lots of applications to be sure that &lt;strong>newer versions of TFS do not break usage of existing tools.&lt;/strong> This means that usually you can upgrade your TFS without worrying that your VS 2010 or Visual Basic 6 stops working. You need to be aware that the opposite is not true. This imply that &lt;strong>newer version of Visual Studio could not work well with older version of TFS&lt;/strong>. This decision is done because Microsoft is encouraging people to keep their TFS installation up to date, and it would be a nightmare to always guarantee that newer tools would be able to communicate with the older service API.&lt;/p></description></item><item><title>Adding more than one build agent in VSTS</title><link>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/adding-more-than-one-build-agent-in-vsts/</guid><description>&lt;p>Pricing for Build Agents in Visual Studio Team Services states that the &lt;strong>first agent is free, subsequent on-premise agent will cost 15$/month&lt;/strong>. If you, like me, have a demo account, or you want to use &lt;strong>more than one agent not simultaneously&lt;/strong> , you can register more than one agents, and then, from the administration panel, you can disable all agents except one.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image-1.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image_thumb-1.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2016/03/image_thumb-1.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Leave only one agent enabled at a time to be license compliant&lt;/em>&lt;/p></description></item><item><title>Installing a linux Agent for VSTS build was never so easy</title><link>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</link><pubDate>Wed, 30 Mar 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/03/installing-a-linux-agent-for-vsts-build-was-never-so-easy/</guid><description>&lt;p>If you installed Linux Agents for VSTS vNext build in the past, you already know that it was a simple experience, especially because &lt;strong>the agent was installed with npm&lt;/strong> , so it is a matter of a couple of commands.&lt;/p>
&lt;p>The agent is undergoing a substantial change, and in GitHub there is a project about &lt;a href="https://github.com/Microsoft/vsts-agent/blob/master/README.md">VSTS Cross Platform Agent (CoreCLR)&lt;/a>, &lt;strong>a new version of the agent, entirely written in CoreCLR that will substitute the closed source Windows agent and the actual XPlat agent&lt;/strong>. This version of the agent is still work-in-progress, and we can expect a preview for OSX and Linux in the next month. Until now, to run vNext build on linux, you should use the &lt;a href="https://github.com/Microsoft/vso-agent/blob/master/docs/vsts.md">XPlat Agent&lt;/a>.&lt;/p></description></item><item><title>Versioning assembly with powershell and build vNext</title><link>https://www.codewrecks.com/post/old/2016/01/versioning-assembly-with-powershell-and-build-vnext/</link><pubDate>Fri, 29 Jan 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/01/versioning-assembly-with-powershell-and-build-vnext/</guid><description>&lt;p>In an old blog post I explained how to &lt;a href="http://www.codewrecks.com/blog/index.php/2014/01/11/customize-tfs-2013-build-with-powershell-scripts/">version  assembly  during TFS 2013 build with Powershell Scripts&lt;/a>. The goal is &lt;strong>modifying assemblyinfo.cs and assemblyinfo.vb with PowerShell in a TFS 2013 build&lt;/strong> for a project based on TFVC. If you are interested in Git I’ve &lt;a href="http://www.codewrecks.com/blog/index.php/2015/10/17/integrating-gitversion-and-gitflow-in-your-vnext-build/">other post on the subject&lt;/a>.&lt;/p>
&lt;p>Now that the build system is changed in Visual Studio Team Services and in TFS 2015, people asked me to &lt;strong>update that scripts to work with the new build system&lt;/strong>. It turns out that the work needed to update the scripts is only one line of code, because an environment variable is changed between the two build system, but all the rest remains equal.&lt;/p></description></item><item><title>Getting Work Item data in powershell through REST API</title><link>https://www.codewrecks.com/post/old/2016/01/getting-work-item-data-in-powershell-through-rest-api/</link><pubDate>Mon, 11 Jan 2016 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/01/getting-work-item-data-in-powershell-through-rest-api/</guid><description>&lt;p>&lt;strong>VSTS and the latests versions of on-premise TFS has the ability to access data through&lt;/strong> &lt;a href="https://www.visualstudio.com/en-us/integrate/api/overview">&lt;strong>REST API&lt;/strong>&lt;/a> &lt;strong>.&lt;/strong> This way to access TFS data is really convenient expecially if used from PowerShell scripts, because you do not need any external dependency, except being able to issue REST requests with the &lt;a href="https://technet.microsoft.com/en-us/library/hh849971.aspx">Invoke-RestRequest&lt;/a> cmdlet.&lt;/p>
&lt;p>To simplify accessing your VSTS account, you can &lt;strong>enable alternate credentials, needed to issue request with simple Basic Authentication&lt;/strong>. Here is a PowerShell snippet that retrieve a Work Item with a given ID.&lt;/p></description></item><item><title>Use the right Azure Service Endpoint in build vNext</title><link>https://www.codewrecks.com/post/old/2015/12/use-the-right-azure-service-endpoint-in-build-vnext/</link><pubDate>Tue, 29 Dec 2015 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/use-the-right-azure-service-endpoint-in-build-vnext/</guid><description>&lt;p>Build vNext has a &lt;strong>task dedicated to uploading files in azure blob&lt;/strong> , as you can see from &lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image2.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image_thumb2.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2015/12/image_thumb2.png" alt="Sample build vNext that has an Azure File Copy task configured." />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Azure File Copy task configured in a vNext build&lt;/em>&lt;/p>
&lt;p>The nice parte is the Azure Subscription setting, that allows to choose one of the Azure endpoint configured for the project. Using service endpoint, you can ask to the person that has password/keys for Azure Account to configure an endpoint. Once it is configured &lt;strong>it can be used by team members with sufficient right to access it, without requiring them to know password or token or whatever else&lt;/strong>.&lt;/p></description></item><item><title>Finally VSTS VSO has Basic Work Item customization</title><link>https://www.codewrecks.com/post/old/2015/12/finally-vsts-vso-has-basic-work-item-customization/</link><pubDate>Sat, 12 Dec 2015 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/finally-vsts-vso-has-basic-work-item-customization/</guid><description>&lt;p>Just a quick post to make you know that, with update of 10 December 2015, &lt;strong>VSTS now support a basic form of Work Item customization&lt;/strong>.&lt;/p>
&lt;p>&lt;a href="https://www.visualstudio.com/news/2015-dec-10-vso">Visual Studio News December 10 2015&lt;/a>&lt;/p>
&lt;p>You can add new fields in existing work item and you can also rearrange the layout of Work Items. &lt;strong>The experience is completely web based&lt;/strong> , no more download XML Work Item Type Definition and Manually edit XML Files (or use Power Tools in VS).&lt;/p></description></item></channel></rss>