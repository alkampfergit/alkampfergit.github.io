<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuos Integration on Codewrecks</title><link>https://www.codewrecks.com/tags/continuos-integration/</link><description>Recent content in Continuos Integration on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 10 Mar 2020 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/continuos-integration/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure DevOps YAML pipeline authorization problem</title><link>https://www.codewrecks.com/post/old/2020/03/azure-devops-yaml-pipeline-authorization-problem/</link><pubDate>Tue, 10 Mar 2020 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/azure-devops-yaml-pipeline-authorization-problem/</guid><description>&lt;p>It could happen, sometimes, that when you create a pipeline in Azure Devops at first run you got the following error.&lt;/p>
&lt;blockquote>
&lt;p>##[error]Pipeline does not have permissions to use the referenced pool(s) Default. For authorization details, refer to &lt;a href="https://aka.ms/yamlauthz">https://aka.ms/yamlauthz&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;p>There are more than one kind of this error, the most common one is the build using some external resource that requires authorization, but &lt;strong>in this specific error message, pipeline has no permission to run on default pool&lt;/strong>.&lt;/p></description></item><item><title>Azure DevOps gems YAML Pipeline and Templates</title><link>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</link><pubDate>Sun, 18 Aug 2019 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/08/azure-devops-gems-yaml-pipeline-and-templates/</guid><description>&lt;p>If you read my blog you already know that I’m a great fan of YAML Pipeline instead of using Graphic editor in the Web UI, there are lots of reasons why you should use YAML; one for &lt;strong>all the ability to branch Pipeline definition with code, but there is another really important feature:&lt;/strong> &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops">&lt;strong>templates&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>There is a really detailed documentation on &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops">MSDN&lt;/a> on how to use this feature, but I want to give you a complete walkthrough on how to start to effectively use templates. &lt;strong>Thanks to templates you can create a standard build definition with steps or jobs and steps in a template file, then reference that file from real build, just adding parameters.&lt;/strong> &amp;gt; &lt;strong>The ability to capture a sequence of steps in a common template file and reuse it over and over again in real pipeline is probably one of the top reason for moving to YAML template.&lt;/strong> One of the most common scenario for me is: account with lots of utilities projects (multitargeted for full framework and dotnetstandard), each one with its git repository and the need for a standard CI definition to:&lt;/p></description></item><item><title>TFS New Build System vNext agents</title><link>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</link><pubDate>Wed, 03 Jun 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/06/tfs-new-build-system-vnext-agents/</guid><description>&lt;p>&lt;strong>With the latest Visual Studio Online update, the new build system is now online for all users&lt;/strong>. As I said in old post, it is completely rewritten and covering all new features really requires lots of time. Since I’m a great fan of Continuous Integration and Continuous Deploy procedures I’d like to do some post to introduce you this new build system, along with the reason why it is really superior to the old one.&lt;/p></description></item><item><title>TF Service deploy on Azure Web Site with Database Project</title><link>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</link><pubDate>Fri, 15 Mar 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</guid><description>&lt;p>The ability to automatically deploy a site on Azure Web Site from TFService is really interesting, but sadly enough there is no out-of-the-box solution to &lt;strong>update the structure of an Azure Database with a VS2012 Database Project&lt;/strong>. In this post I’ll show &lt;strong>how to modify the standard build template to deploy a Database Project during Azure Web Site Deployment&lt;/strong>. I’ve blogged in the past to explain how to &lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/04/deploy-a-database-project-with-tfs-build-2010/">Deploy a Database Project with TFS Build&lt;/a>, but that post refers to the old type of Database Project (VS2010) and now I want to explain how to customize the AzureContinuousDeployment build to deploy on azure a database project of VS2012.&lt;/p></description></item><item><title>Speedup Tfs builds with parallel compilation and incremental get</title><link>https://www.codewrecks.com/post/old/2009/08/speedup-tfs-builds-with-parallel-compilation-and-incremental-get/</link><pubDate>Thu, 13 Aug 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/08/speedup-tfs-builds-with-parallel-compilation-and-incremental-get/</guid><description>&lt;p>For large projects, the time needed to run a build can grow considerably large, until it eventually pass the famous barrier of &lt;a href="http://www.think-box.co.uk/blog/2006/02/ten-minute-build-continuous.html">10 minutes&lt;/a>. To speedup build time you can try to use some features of TFS,&lt;/p>
&lt;p>&lt;strong>Parallel Builds:&lt;/strong> Msbuild can run faster in multicore environment with the use of &lt;a href="http://msdn.microsoft.com/en-us/library/bb383805.aspx">parallel builds&lt;/a>, to enable this feature you can simply go to the machine where the tfs build agent is installed and you need to modify the file &lt;em>tfsbuildservice.exe.config&lt;/em> located in *C:\Program Files\Microsoft Visual Studio 9.0\Common7\IDE\PrivateAssemblies,*and change the value for the MaxProcesses key property&lt;/p></description></item></channel></rss>