<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture Castle on Codewrecks</title><link>https://www.codewrecks.com/tags/architecture-castle/</link><description>Recent content in Architecture Castle on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 07 Jul 2010 11:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/architecture-castle/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache layer</title><link>https://www.codewrecks.com/post/old/2010/07/cache-layer/</link><pubDate>Wed, 07 Jul 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/cache-layer/</guid><description>&lt;p>Thanks to AOP concept, creating a cache layer that is transparent to the caller is not a big deal. I have a piece of code that in a loop calls this method&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>ClientCompetitor competitor = Repository.ClientCompetitor.GetByCriteria(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query.CreateEq(&lt;span style="color:#e6db74">&amp;#34;AssociatedClient&amp;#34;&lt;/span>, clieid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.SingleOrDefault();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This is based on a standard implementation of repository and a &lt;a href="http://en.wikipedia.org/wiki/Specification_pattern">Specification Pattern&lt;/a> as a query model. With &lt;a href="http://nhprof.com/">nhibernate profiler&lt;/a> I see that during the execution of this task, a lot of identical query are issued, because it gets called around 1000 times always with the same clieid.&lt;/p></description></item><item><title>Value of architecture</title><link>https://www.codewrecks.com/post/old/2009/07/value-of-architecture/</link><pubDate>Tue, 28 Jul 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/value-of-architecture/</guid><description>&lt;p>If I have to tell what is the main property of a good architecture, I surely will answer that a good architecture centralize common operations and make simple to extend the application.&lt;/p>
&lt;p>Here is a typical example. I have a WCF services called from external clients, but I use the same service inside my organization. I created a little WPF project that needs to use services functions, but since this program is run internally, I do not want it to pass in the WCF stack, but I simply want to use concrete services classes that access the database.&lt;/p></description></item></channel></rss>