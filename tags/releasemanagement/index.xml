<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ReleaseManagement on Codewrecks</title><link>https://www.codewrecks.com/tags/releasemanagement/</link><description>Recent content in ReleaseManagement on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Feb 2019 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/releasemanagement/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Manual Release in Azure DevOps useful</title><link>https://www.codewrecks.com/post/old/2019/02/is-manual-release-in-azure-devops-useful/</link><pubDate>Fri, 08 Feb 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/02/is-manual-release-in-azure-devops-useful/</guid><description>When people creates a release in AzureDevOps, they primarily focus on how to make the release automatic , but to be 100% honest, automation in only one side of the release, and probably not the more useful.
First of all Release is about auditing and understand which version of the software is released where and by whom. In this scenario what is more important is “how I can deploy my software in production”.</description></item><item><title>Add a capability to agent in a Deployment Group</title><link>https://www.codewrecks.com/post/old/2017/07/add-a-capability-to-agent-in-a-deployment-group/</link><pubDate>Fri, 14 Jul 2017 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/07/add-a-capability-to-agent-in-a-deployment-group/</guid><description>When you deploy a Build agent in VSTS / TFS, in the administration page you have the ability to add custom Capabilities to the agent, as you can see in Figure 1.
Figure 1: Adding capabilities to a standard build agent.
With the new Release Management, you can install agents in machine that will be added to Deployment Groups. If you look at the UI, you can see that the capabilities tab is listing all the capabilities of the agent, but you have not the option to specify custom capabilities.</description></item><item><title>Release to Azure with Azure ARM templates</title><link>https://www.codewrecks.com/post/old/2016/08/release-to-azure-with-azure-arm-templates/</link><pubDate>Tue, 16 Aug 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/08/release-to-azure-with-azure-arm-templates/</guid><description>Thanks to new Release Management system in VSTS / TFS creating a release to your on-premise environment is really simple (I’ve described the process here). Another option is creating a test environment in Windows Azure, and if you choose this option life can be even easier.
In this example I’m using Azure as IAAS, deploying a software on a Windows Virtual Machine. While this is probably not the best approach to cloud (PAAS is surely a better approach) to create a test environment it can be perfectly acceptable.</description></item><item><title>Create a release in TFS 2015 VSTS Release Management</title><link>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</link><pubDate>Sat, 18 Jun 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/create-a-release-in-tfs-2015-vsts-release-management/</guid><description>This is the end of the journey of the last serie of posts. I’m now at the situation where I have a build that produces a single zip file with everything I need to deploy the software and a bunch of PowerShell scripts that relase the software using that zip as a source artifact.
Now it is time to automate the process with Release Management. I want to use RM because the process is automated on a chain of environments, but also I have traceability, auditing, and verification of the release procedures.</description></item><item><title>Checklists are prerequisites for Release Automation</title><link>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</link><pubDate>Thu, 09 Jun 2016 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/checklists-are-prerequisites-for-release-automation/</guid><description>I’ve dealt in some posts on how to deploy an application with a PowerShell script that uses an archive produced by a build. Automating a release could be simple or complex, depending on the nature of the software to be deployed, but there is a single suggestion that I always keep in my mind:
If you don’t have one or more Checklists for manual installation of a software do not even try to autmate installation process</description></item><item><title>Connect your TFS Release Management to Azure subscription with Update 3</title><link>https://www.codewrecks.com/post/old/2014/07/connect-your-tfs-release-management-to-azure-subscription-with-update-3/</link><pubDate>Thu, 31 Jul 2014 04:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/connect-your-tfs-release-management-to-azure-subscription-with-update-3/</guid><description>In the Update 3, now in RC, you have the ability to configure your Release Management to directly access your Azure Subscription to have a list of all of your environment. The operation is really simple, you need to go to Administration tab and then choose to Manage Azure.
Figure 1: Adding your subscription to Release Management
Adding a new Subscription is just a matter to enter some information taken from a valid publish certificate.</description></item><item><title>Install and configure a TFS Release Manager Deployer Agent in Azure VM</title><link>https://www.codewrecks.com/post/old/2014/06/install-and-configure-a-tfs-release-manager-deployer-agent-in-azure-vm/</link><pubDate>Wed, 11 Jun 2014 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/06/install-and-configure-a-tfs-release-manager-deployer-agent-in-azure-vm/</guid><description>The Problem You have a domain with TFS and -release management, there are no problems deploying agents on machines inside the domain, but you are not able to configure an agent for machines outside the domain.
Es: you have some Azure VMs you want to use for your release pipeline and you do not want to join them to the domain with VPN or other mechanism.
This scenario usually ends in being not able to configure Deployment Agents in those machines due to various authorization problems.</description></item><item><title>Upgrading Release Management to Update 1</title><link>https://www.codewrecks.com/post/old/2014/03/upgrading-release-management-to-update-1/</link><pubDate>Sat, 15 Mar 2014 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/03/upgrading-release-management-to-update-1/</guid><description>If you want to upgrade Release Management for TFS 2013 to Update 1 you surely noticed that there is no Update 1 upgrade package, but you should first uninstall the old version of Release Management and the install again the version with Update 1.
While this does not delete any previous settings and simply upgrade the database to the new structure, it is possible that after upgrading when you try to connect with the Release Management Client you get and error telling you that the Release Management Server is not working.</description></item></channel></rss>