<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Api on Codewrecks</title><link>https://www.codewrecks.com/tags/api/</link><description>Recent content in Api on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jan 2024 07:12:42 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Devops Api - Update list of allowed values for Custom Fields</title><link>https://www.codewrecks.com/post/azdo/api/manage-custom-field-with-api/</link><pubDate>Mon, 22 Jan 2024 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/manage-custom-field-with-api/</guid><description>The ability to customize process of Azure DevOps is one of the most powerful feature of the platform. Usually you add custom fields to work items to allow tracking information related to your own process and for your organization. One of the most common question I got usually is:
How can I create a field that allows for a series of values that is taken from a database of mine?</description></item><item><title>Azure Devops Api - Automatically Re-Queue Pull Request Checks</title><link>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-with-pipeline/</link><pubDate>Tue, 07 Mar 2023 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-with-pipeline/</guid><description>In previous post on this subject Reschedule PR Check with API I&amp;rsquo;ve demonstrated a simple PowerShell api script that can automatically re-queue all checks for Opened pull Requests where the check is expired. The problem is: you need to schedule this script to run.
Actually the easiest way to schedule running a script that uses API is using a standard pipeline. Give the ability to run whenever the target branch changes it is the best choice.</description></item><item><title>Azure Devops Api - Re-Queue Pull Request Checks</title><link>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-with-api/</link><pubDate>Tue, 21 Feb 2023 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-with-api/</guid><description>Pull Requests checks are a perfect gate to keep your code quality High. The easiest way to perform a check is to do something inside a standard pipeline and then use that pipeline in branch policies. This will allow you to prevent people to push on the main develop branch (main/master/develop) and be forced to do a pull request against that branch and wait for the checks to complete.
Remember that checks on a Pull Request actually runs on the result of the merge between source and target branch.</description></item><item><title>Azure Devops Api - Export Work Items</title><link>https://www.codewrecks.com/post/azdo/api/api-step-2-work-item-dump/</link><pubDate>Sat, 26 Nov 2022 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/api-step-2-work-item-dump/</guid><description>One of the most common scenario where Azure DevOps API shine is exporting data into some other db/file. There can be lots of legitimate reason why you want to export data: Custom Reporting, Custom Analysis, put everything into a file/database to perform offline query on your data outside Azure DevOps interface.
In previous parts we already saw how to connect to the server and how to check if credentials are ok; if we want to interact with the various part of the server you need to get an instance of appropriate client class.</description></item><item><title>Azure Devops Api - Detect if credentials are ok</title><link>https://www.codewrecks.com/post/azdo/api/api-step-1a-connection-check/</link><pubDate>Sat, 19 Nov 2022 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/api-step-1a-connection-check/</guid><description>In previous article of the series I&amp;rsquo;ve played with Azure DevOps api connection showing how you can use a .NET 4.8 full framework application that can login to Azure DevOps with a token or with an interactive login.
When you use interactive login, usually Windows operating system will retain credentials in credentials store, this will avoid asking for credential every time the application is run. The code that perform the check is really simple, it just check if _vssConnection.</description></item><item><title>Azure Devops Api - Connection</title><link>https://www.codewrecks.com/post/azdo/api/api-step-1-connection/</link><pubDate>Sat, 05 Nov 2022 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/api-step-1-connection/</guid><description>Quite often people asks me how to interact programmatically with Azure DevOps server, main purpose is retrieving data for custom reporting but also interacting with Work Item store etc. Luckily enough, all Azure DevOps functionalities are exposed via API, so you can write small programs to automate mundane tasks and obtain what you need.
In this post I&amp;rsquo;ll show how to setup the project in .NET and how to connect to the server.</description></item><item><title>Clone a simple dashboard with API in Azure DevOps</title><link>https://www.codewrecks.com/post/azdo/api/api-clone-dashboard-azure-devops/</link><pubDate>Fri, 11 Feb 2022 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/api-clone-dashboard-azure-devops/</guid><description>If you work in Scrum, being able to visualize data on current and past Sprints is an invaluable way to keep track on team improvement. Azure DevOps allows you to create Dashboards to visualize interesting metrics, but actually you do not have a way to create Dynamic Dashboards, I.E. a Dashboard that allows you to specify a parametric query so you can, for example, change the iteration and view how the data changes.</description></item><item><title>Retrieve Attachment in Azure DevOps with REST API</title><link>https://www.codewrecks.com/post/old/2019/07/retrieve-attachment-in-azure-devops-with-rest-api/</link><pubDate>Thu, 25 Jul 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/07/retrieve-attachment-in-azure-devops-with-rest-api/</guid><description>In a previous post I’ve dealt on how to retrieve image in Work Items description or Comments with a simple WebClient request, using network credentials taken from TfsTeamProjectCollection class.
The solution presented in that article is not complete, because it does not works against Azure Devops, but only against a on-premise TFS or Azure DevOps Server . If you connect to Azure DevOps you will find that the Credentials of the TfsTeamProjectCollection class are null , thus you cannot download the attachment because the web request is not authenticated.</description></item><item><title>Export Work Item Information to Word Document</title><link>https://www.codewrecks.com/post/old/2019/07/export-work-item-information-to-word-document/</link><pubDate>Thu, 25 Jul 2019 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/07/export-work-item-information-to-word-document/</guid><description>This is a series of posts on how to export data from Azure DevOps to a Word Document, composing word templates with Open XML Sdk.
The project is open source and available Here: https://github.com/alkampfergit/AzureDevopsWordPlayground
Post in the series:
API Connection Retrieve Work Items Information Azure DevOps API, Embed images into HTML Create Word Document For Work Items Retrieve image in Work Item Description with TFS API Retrieve Attachment in Azure DevOps with REST API in C# Gian Maria</description></item><item><title>Retrieve image in Work Item Description with TFS API</title><link>https://www.codewrecks.com/post/old/2019/07/retrieve-image-in-work-item-description-with-tfs-api/</link><pubDate>Wed, 10 Jul 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/07/retrieve-image-in-work-item-description-with-tfs-api/</guid><description>When you try to export content of Work Item from Azure DevOps (online or server) you need to deal with external images that are referenced in HTML fields of Work Item. I’ve dealt in the past on this subject, showing how you can retrieve images with Store and Attachment Work Item Property.
Sadly enough, I’ve encountered situation with on-premise version of TFS where I found this type of image src inside HTML fields.</description></item><item><title>Create Word document from Work Items</title><link>https://www.codewrecks.com/post/old/2018/12/create-word-document-from-work-items/</link><pubDate>Mon, 31 Dec 2018 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/create-word-document-from-work-items/</guid><description>Post in the series:
API Connection Retrieve Work Items Information Azure DevOps API, Embed images into HTML Now we have all the prerequisites in place to connect to an Azure DevOps account, execute a query to grab all work items of a sprint and modifying HTML of Rich Edit fields to embed images. It is time to create a word document.
To have a better look and feel of exported document, the best approach is using the concept of Templates created by simple Word documents.</description></item><item><title>Azure DevOps API Embed images into html</title><link>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-embed-images-into-html/</link><pubDate>Mon, 31 Dec 2018 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-embed-images-into-html/</guid><description>Post in the series:
API Connection Retrieve Work Items Information Before going to generate a Word File from Work Item Data we need to solve a little problem with HTML content in Work Item fields. As you know Azure DevOps has a rich web editor that allows you to create complex text in some fields, like Description, the problem is: whenever you copy and paste images inside the Web Editor, those images were added as Work Item attachments and the real HTML content is just a reference to the attachmen Url.</description></item><item><title>Azure DevOps API Retrieve Work Items Information</title><link>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-retrieve-work-items-information/</link><pubDate>Fri, 28 Dec 2018 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-retrieve-work-items-information/</guid><description>Post in the series:
API Connection Now that we know how to connect to Azure DevOps services, it is time to understand how to retrieve information about Work Items to accomplish the requested task: export Work Items data inside a Word Document.
Once you connected to Azure DevOps account you start retrieving helper classes to work with the different functions of the service, if you need to interact with Work Items you need a reference to the WorkItemStore class.</description></item><item><title>Azure Devops API Connection</title><link>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-connection/</link><pubDate>Fri, 28 Dec 2018 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/azure-devops-api-connection/</guid><description>One of the great benefit of using Azure DevOps is the ability to interact with the service through API calls, making it possible to extend the service with a few bunch of C#, or PowerShell or whatever language you want, because almost everything is exposed with REST API, and a simple HTTP call is enough.
Since I’m mostly a C# and.NET guy, I’ll explain how to build a C# program that interact with an Azure DevOps account, because thanks to Nuget Packages offered by Microsoft, you can interact with your account with Strongly Typed C# classes, so you can have intellisense and compile type checking to verify that everything is good.</description></item><item><title>Nuget packages for TFS VSO Client Object Model</title><link>https://www.codewrecks.com/post/old/2015/08/nuget-packages-for-tfs-vso-client-object-model/</link><pubDate>Sat, 22 Aug 2015 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/08/nuget-packages-for-tfs-vso-client-object-model/</guid><description>Finally the Client Object Model for TFS / VSO is finally distributed with Nuget Packages, as you can read here. This is a great news especially because the Dll are finally redistributable, and your tool does not need to require a previous installation of Visual Studio or Team Explorer, or Client Object Model Package.
Another interesting fact, is that REST API are now supported for TFS 2015 / VSO (previous version of TFS does not support REST API).</description></item><item><title>Use a WebBrowser to login into a site that use HttpOnly cookie</title><link>https://www.codewrecks.com/post/old/2011/04/use-a-webbrowser-to-login-into-a-site-that-use-httponly-cookie/</link><pubDate>Tue, 12 Apr 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/use-a-webbrowser-to-login-into-a-site-that-use-httponly-cookie/</guid><description>Suppose you need to programmatically analyze some web pages that are protected by a login procedure and you have a valid login to the site. A simple solution is issuing a POST request to the login page with the correct credentials, then continue to use the same cookie container to issue subsequent downloads, but in some situation this is not enough. Suppose the site uses some strange login procedure that uses redirect</description></item></channel></rss>