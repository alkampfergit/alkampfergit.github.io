<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MongoDb on Codewrecks</title><link>https://www.codewrecks.com/tags/mongodb/</link><description>Recent content in MongoDb on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 18 May 2022 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>Case insensitive key dictionaries and MongoDb C# serializers</title><link>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</link><pubDate>Wed, 18 May 2022 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongodb-dictionary-serialization-case-insensitive/</guid><description>First of all, every C# programmer should know that Dictionary&amp;lt;Tkey, Tvalue&amp;gt; class (as well as other collections) have a special constructor that can be used to specify the serializer used to compare keys in the dictionary. The most obvious situation is where you have a string key and you want the dictionary to be case insensitive during key search.
1 2 public SortedDictionary&amp;lt;string, StringProperty&amp;gt; StringProperties { get; private set; } = new SortedDictionary&amp;lt;string, StringProperty&amp;gt;(StringComparer.</description></item><item><title>Keep MongoDb logfile size at bay</title><link>https://www.codewrecks.com/post/general/mongo-db-logfiles/</link><pubDate>Thu, 27 May 2021 20:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/mongo-db-logfiles/</guid><description>MongoDb is a great option for NoSql but sometimes it is installed in production forgetting some basic maintenance tasks, like managing log files. You should remember that MongoDb does not automatically rotate log files as for official documentation.
This lead to logfiles of Gigabyte size and sometimes they can even be a space problem in your installation. If a logfile is gone out of control, you cannot delete because it is in use by mongod process, so you need to ask for a manual rotate.</description></item><item><title>How to fix 'No matching creator found' mongodb error after upgrade</title><link>https://www.codewrecks.com/post/nosql/replace-immutable-serializer-in-mongodb/</link><pubDate>Sat, 15 Aug 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/nosql/replace-immutable-serializer-in-mongodb/</guid><description>Even if Release changes seems to have no breaking changes in MongodDb Driver latest upgrade, it is possible that your code could be affected by a change in the driver and you starts having strange exception with code that works perfectly with an older version of the driver.
I&amp;rsquo;ve a big project where after updating from 2.7.3 driver to 2.11.0 MongoDb driver I&amp;rsquo;ve started having all sort of weird errors that disappear restoring 2.</description></item><item><title>Error in mapping MongoDb classes after updating to 2.10 driver</title><link>https://www.codewrecks.com/post/general/error-in-mongodb-serializer/</link><pubDate>Thu, 02 Jul 2020 10:17:25 +0200</pubDate><guid>https://www.codewrecks.com/post/general/error-in-mongodb-serializer/</guid><description>After updating a big project from MongoDb C# driver 2.7 to latest 2.10 version I started having lots of error on Integration tests.
MongoDB.Bson.BsonSerializationException HResult=0x80131500 Message=Creator map for class TestMongoBug.TestArray has 2 arguments, but none are configured. Source=MongoDB.Bson StackTrace: at MongoDB.Bson.Serialization.BsonCreatorMap.Freeze() at MongoDB.Bson.Serialization.BsonClassMap.Freeze() at MongoDB.Bson.Serialization.BsonClassMap.LookupClassMap(Type classType) at MongoDB.Bson.Serialization.BsonClassMapSerializationProvider.GetSerializer(Type type, IBsonSerializerRegistry serializerRegistry) at MongoDB.Bson.Serialization.BsonSerializerRegistry.CreateSerializer(Type type) at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory) The stack trace is especially strange, because it reveals that the error happens when the BsonClkassMap is trying to create mapping for the object.</description></item><item><title>Store a function to delete all db in MongoDb</title><link>https://www.codewrecks.com/post/old/2017/06/store-a-function-to-delete-all-db-in-mongodb/</link><pubDate>Wed, 28 Jun 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/store-a-function-to-delete-all-db-in-mongodb/</guid><description>Deleting everything in a test MongoDb is a common operation for test and dev machine and it is a relative simple operation that I described here. After a little while I got really tired every time to search my gist or into my hd the little script that deletes everything , thus I decided to store it inside the admin db.
The solution is really really simple, just connect to the admin database and register a server side function to delete all databases.</description></item><item><title>Delete all mongo db except admin and local</title><link>https://www.codewrecks.com/post/old/2017/06/delete-all-mongo-db-except-admin-and-local/</link><pubDate>Sat, 24 Jun 2017 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/06/delete-all-mongo-db-except-admin-and-local/</guid><description>When you develop with mongo, sometimes you simply need to delete all database quickly because you need to start from scratch. Using shell is really simple, because this gist does exactly what you need.
1 2 3 4 5 6 7 8 9 var dbs = db.getMongo().getDBNames() for(var i in dbs){ db = db.getMongo().getDB( dbs[i] ); if (db.getName() !== &amp;#39;admin&amp;#39; &amp;amp;&amp;amp; db.getName() !== &amp;#39;local&amp;#39;) { print( &amp;#34;dropping db &amp;#34; + db.</description></item><item><title>Bulk insert in MongoDb with C driver</title><link>https://www.codewrecks.com/post/old/2016/11/bulk-insert-in-mongodb-with-c-driver/</link><pubDate>Wed, 02 Nov 2016 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/11/bulk-insert-in-mongodb-with-c-driver/</guid><description>There are situation where you need to save a lot of documents inside a collection in MongoDb. My scenario is a migration of documents from a collection to another database, with in-memory manipulation of the documents.
The most common error in these situation is to read the documents from the original collection, then execute a function that modify the document in-memory, and finally issuing an insert in destination collection. This is wrong because you have a roundrip against MongoDb for each document you are saving.</description></item><item><title>Long numbers are truncated in MongoDb shell</title><link>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</link><pubDate>Thu, 02 Jun 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/06/long-numbers-are-truncated-in-mongodb-shell/</guid><description>Let’s try this simple code in a mongo shell:
1 2 db.TestCollection.insert({&amp;#34;_id&amp;#34; : 1, &amp;#34;Value&amp;#34; : NumberLong(636002954392732556) }) db.TestCollection.find() What you expect is that mongo inserted one record and then that record is returned. Actually a record is inserted, but the return value can surprise you. Here is the output I got from RoboMongo
1 2 3 4 { &amp;#34;_id&amp;#34; : 1.0, &amp;#34;Value&amp;#34; : NumberLong(636002954392732544) } Property “Value” has not the number you inserted, the number seems to be rounded and some precision is lost , even if it is a NumberLong and 636002954392732556 is a perfectly valid Int64 number.</description></item><item><title>Grant right to use eval on Mongodb 32</title><link>https://www.codewrecks.com/post/old/2016/05/grant-right-to-use-eval-on-mongodb-3-2/</link><pubDate>Sat, 21 May 2016 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/grant-right-to-use-eval-on-mongodb-3-2/</guid><description>One of the side effect of enabling authorization on MongDb is that, even if you create a user with “root” right, this account is not able to execute the $eval command. The simpthom is, when you try to execute $eval you got this error
1 mongodb Command &amp;#39;$eval&amp;#39; failed: not authorized on jarvis-framework-saga-test to execute command This happens because $eval is somewhat deprecated, and it should not be used. Since it is a dangerous command, a user should have access to all action on all resources, and you need to create a role that has anyAction on anyResource.</description></item><item><title>Secure your MongoDb installation</title><link>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</link><pubDate>Thu, 19 May 2016 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/05/secure-your-mongodb-installation/</guid><description>In last months a lots of rumor spreads about MongoDb and Data Leak because people found lots of MongoDb exposed on the internet without any protection.
The root of the problem is probably a bad default for MongoDb that actually starts without any autentication by default. Developers usually download mongodb, configure without authentication and access MongoDb instance without any knowledge of MongoDb security model. This simplicity of usage can lead to unsecure installation in production.</description></item><item><title>'Unsupported filter' using ContainsAny in Mongo 2x driver</title><link>https://www.codewrecks.com/post/old/2016/04/unsupported-filter-using-containsany-in-mongo-2-x-driver/</link><pubDate>Tue, 26 Apr 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/04/unsupported-filter-using-containsany-in-mongo-2-x-driver/</guid><description>Porting code from Legacy driver to new driver syntax is quite annoying for.NET MongoDb driver. In the new Drivers almost everything is changed, and unless you want to still use old legacy syntax creating a mess of new and old syntax, you should convert all the code to the new syntax.
One of the annoying problem is ContainsAny in LINQ compatibility driver. In old drivers, if you have an object that contains an array of strings, and you want to filter for objects that have at least one of the value contained in a list of allowed values you had to resort to this syntax.</description></item><item><title>Change how MongoDb C Driver serialize Guid in new driver version</title><link>https://www.codewrecks.com/post/old/2016/04/change-how-mongodb-c-driver-serialize-guid-in-new-driver-version/</link><pubDate>Fri, 15 Apr 2016 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/04/change-how-mongodb-c-driver-serialize-guid-in-new-driver-version/</guid><description>We have code based on the old legacy mongo driver that uses MemberSerializationOptionsConvention class to serialize all Guid as plain strings. This option is really useful because saving Guid in Bson format is often source of confusion (CSUUID, … ) for.NET users. On the contrary, having saving Guid as plain string solves some pain and made your Bson really more readable.
Here is the old code that runs with the old legacy driver.</description></item><item><title>Why Irsquom not a great fan of LINQ query for MongoDb</title><link>https://www.codewrecks.com/post/old/2015/09/why-im-not-a-great-fan-of-linq-query-for-mongodb/</link><pubDate>Sat, 26 Sep 2015 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/why-im-not-a-great-fan-of-linq-query-for-mongodb/</guid><description>I’m not a great fan of LINQ provider in Mongo, because I think that developers that start using only LINQ misses the best part of working with a Document Database. The usual risk is: developer always resort to LINQ queries to load-modify-save a document instead of using all powerful update operators available in Mongo.
Despite this consideration, if you need to retrieve full document content, sometimes writing a LINQ query is the simplest approach, but, as always, not every valid LINQ statement you can write can be translated to MongoQuery.</description></item><item><title>Mongo compression with Wired Tiger Engine</title><link>https://www.codewrecks.com/post/old/2015/09/mongo-compression-with-wired-tiger-engine/</link><pubDate>Tue, 08 Sep 2015 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/09/mongo-compression-with-wired-tiger-engine/</guid><description>With 3.0 version of Mongo database the most welcomed feature was the introduction of pluggable storage engine. This imply that we are not forced to use standard NMAPv1 storage system, but we can use other way of storing data on our filesystem. The first and official alternative storage system is Wired Tiger.
One of the most interesting aspect of Wired Tiger is Data Compression, a feature that can reduce the space of your database on disk, and that is especially effective since Mongo stores document as BSON, where most of the data is text.</description></item><item><title>Mixing native query and LINQ in Mongo Query</title><link>https://www.codewrecks.com/post/old/2015/04/mixing-native-query-and-linq-in-mongo-query/</link><pubDate>Tue, 21 Apr 2015 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/04/mixing-native-query-and-linq-in-mongo-query/</guid><description>Lets look at the following query issued to a standard MongoCollection&amp;lt;T&amp;gt; instance object:
1 2 3 4 return _bufferCollection.Find( GetNextBlockQuery(lastTick, lastRevisionId)) .OrderBy(d =&amp;gt; d.LastUpdated) .ThenBy(d =&amp;gt; d.RevisionIdNumeric); The method GetNextBlockQuery simply return a Query&amp;lt;T&amp;gt; query object expressed with C# mongo query syntax. In this query the result of Find() method is simply sorted using standard LINQ syntax.
Do you spot where the problem is?
Find() method returns an object of type MongoCursor&amp;lt;T&amp;gt; that implements IEnumerable&amp;lt;T&amp;gt; but not IQueryable&amp;lt;T&amp;gt;.</description></item><item><title>Manage authentication with Mongo MMS</title><link>https://www.codewrecks.com/post/old/2014/11/manage-authentication-with-mongo-mms/</link><pubDate>Thu, 20 Nov 2014 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/11/manage-authentication-with-mongo-mms/</guid><description>In an old post I’ve shown how to easily deploy mongo thanks to MMS online services. Mms is not only useful to deploy mongo instances, but it is exceptional also for monitoring and configuring. One of the most interesting features is managing users easily from mms web interface. Suppose you had installed mongo on an Azure Virtual Machine and you do not want everyone being able to access your instance. A possible solution is enabling authentication.</description></item><item><title>Aggregate in Mongo using only Date Part of a DateTime property</title><link>https://www.codewrecks.com/post/old/2014/10/aggregate-in-mongo-using-only-date-part-of-a-datetime-property/</link><pubDate>Mon, 13 Oct 2014 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/10/aggregate-in-mongo-using-only-date-part-of-a-datetime-property/</guid><description>If you need to do an aggregation in MongoDb on a DateTime property and you want to aggregate only by Date part, you can use a simple trick and use a filter to compose the date part before the grouping. Here is the code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 db.mycollection.aggregate( { &amp;#34;$project&amp;#34; : { _id : 0, &amp;#34;datePartDay&amp;#34; : {&amp;#34;$concat&amp;#34; : [ {&amp;#34;$substr&amp;#34; : [{&amp;#34;$dayOfMonth&amp;#34; : &amp;#34;$LastUpdate&amp;#34;}, 0, 2]}, &amp;#34;-&amp;#34;, {&amp;#34;$substr&amp;#34; : [{&amp;#34;$month&amp;#34; : &amp;#34;$LastUpdate&amp;#34;}, 0, 2]}, &amp;#34;-&amp;#34;, {&amp;#34;$substr&amp;#34; : [{&amp;#34;$year&amp;#34; : &amp;#34;$LastUpdate&amp;#34;}, 0, 4]} ] } } }, { &amp;#34;$group&amp;#34; : { &amp;#34;_id&amp;#34; : &amp;#34;$datePartDay&amp;#34;, &amp;#34;Count&amp;#34; : { &amp;#34;$sum&amp;#34; : 1 } } } ) Thanks to the power of aggregation framework, we can construct a pipeline where the first stage create a document with a new property that is composed only by the day-month-year.</description></item><item><title>Use Capped collection on MongoAppender for Log4Net</title><link>https://www.codewrecks.com/post/old/2012/05/use-capped-collection-on-mongoappender-for-log4net/</link><pubDate>Tue, 22 May 2012 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/use-capped-collection-on-mongoappender-for-log4net/</guid><description>One of the coolest feature of Mongo is the concept of Capped Collection , or “fixed size” collection. They are based on a FIFO queue where the first record to be discharded is the first inserted, and this is exceptional to create a log-collection that automatically purge all old logs without any user intervention.
To be able to automatically enable this feature on the Log4Net Mongo appender you need to do a little modification to the code, this is because the original code simply gets a reference to the collection with this code.</description></item><item><title>Logging object with circular reference with Mongo Appender chrashes your process</title><link>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</link><pubDate>Tue, 03 Apr 2012 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/logging-object-with-circular-reference-with-mongo-appender-chrashes-your-process/</guid><description>I’ve blogged some days ago on the possibility to save log4net logs inside a Mongo database, but you should be aware that this technique can be dangerous if your objects have circular references. A circular reference happens when object A reference object B and object B directly or indirectly reference object A againand this is a high risk when you work with Mongo Serializer.
Mongo Serializer does not likes circular references (it is perfectly acceptable, because documents with circular references cannot be saved into a document database), but the problem is: if you try to serialize an object that has a circular reference you will get a StackOverflowException and your process will crash, as stated in official documentation from MSDN</description></item><item><title>Keep your Mongo log database small deleting old logs</title><link>https://www.codewrecks.com/post/old/2012/03/mongo-cleanup-older-log/</link><pubDate>Mon, 26 Mar 2012 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/mongo-cleanup-older-log/</guid><description>As I showed in an old post, Mongo Db is perfect to store logs, but as everyone knows, log databases tend to become really big, especially if the verbosity level is high, so I usually schedule a process that deletes all log older than a certain date to free space in log databases. To cleanup record in a Mongo Db I decided to create a little Powershell script to delete all entry in a collection that are older than a certain value.</description></item><item><title>Using Mongo Database to store Log4Net logs</title><link>https://www.codewrecks.com/post/old/2012/03/using-mongo-database-to-store-log4net-logs/</link><pubDate>Mon, 19 Mar 2012 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/using-mongo-database-to-store-log4net-logs/</guid><description>One of the most simple and useful way to introduce a Documents Database like Mongo in your organization is to use as Log Storage. If you use log4Net you can download a Mongo appender capable of storing logs inside mongo with few lines of code and you are ready to go.
The original appender is really good but I’ve done a little modification to make it capable of storing complex item in extended properties, just locate the function LogginEventToBSON and modify the section that stores Composite Properties with following code</description></item></channel></rss>