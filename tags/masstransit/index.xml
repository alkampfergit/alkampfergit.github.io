<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Masstransit on Codewrecks</title><link>https://www.codewrecks.com/tags/masstransit/</link><description>Recent content in Masstransit on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 11 Sep 2012 19:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/masstransit/index.xml" rel="self" type="application/rss+xml"/><item><title>Masstransit latest version even simpler than ever</title><link>https://www.codewrecks.com/post/old/2012/09/masstransit-latest-version-even-simpler-than-ever/</link><pubDate>Tue, 11 Sep 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/masstransit-latest-version-even-simpler-than-ever/</guid><description>&lt;p>In a recent post about Masstransit I’ve explained how to &lt;a href="http://www.codewrecks.com/blog/index.php/2012/08/03/quick-start-on-mass-transit-and-msmq-on-windows/">setup communication using a Subscription Service&lt;/a>, and this configuration needs a dispatcher that can be build directly from MassTransit source code. If you do not want to have a central dispatcher, because you need to install a windows service (or run program in console) and a sql server used by the dispatcher you can also avoid this using Multicast.&lt;/p>
&lt;p>The key is the &lt;strong>call to sbc.UseMulticastSubscriptionClient() that basically permits you to completely avoid the complexity of having/maintaining a dispatcher with MSMQ. This works using&lt;/strong> &lt;a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms740125%28v=vs.85%29.aspx">&lt;strong>PGM on top of MSMQ&lt;/strong>&lt;/a>, so if you want to create a simple program that listen for a specific message on the bus you can use a minimal configuration, here is all the code you need&lt;/p></description></item><item><title>Masstransit and dispatching of messages</title><link>https://www.codewrecks.com/post/old/2012/09/masstransit-and-dispatching-of-messages/</link><pubDate>Mon, 03 Sep 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/09/masstransit-and-dispatching-of-messages/</guid><description>&lt;p>One of the coolest aspect of Masstransit is &lt;strong>simplicity of use (even if it still lacks a really comprehensive documentation&lt;/strong> ), dispatching of message is one of this aspect. The key of Masstransit is that dispatching is done on type of the message instead that address, &lt;em>we can simply ignore everything in the middle, we have just components that declares to Masstransit that they are able to handle a certain type of messages, other components will simply publish messages in the bus and dispatching is done thanks to the CLR type of message sent&lt;/em>.&lt;/p></description></item><item><title>Quick start on Mass Transit and MSMQ on windows</title><link>https://www.codewrecks.com/post/old/2012/08/quick-start-on-mass-transit-and-msmq-on-windows/</link><pubDate>Fri, 03 Aug 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/quick-start-on-mass-transit-and-msmq-on-windows/</guid><description>&lt;p>&lt;a href="http://masstransit-project.com/">&lt;strong>MassTransit&lt;/strong>&lt;/a> &lt;strong>is a bus implementation for.NET that promise frictionless configuration and simple usage&lt;/strong>. The main problem about MassTransit in my opinion is the lack of organic documentation, especially a quick start guide that shows you really the basic concepts behind MassTransit. If you jump into online documentation there is a nice page called “&lt;a href="http://docs.masstransit-project.com/en/latest/configuration/quickstart.html">Show Me the code&lt;/a>” that promise a quick start to jump into MassTransit concepts. The problem with that example is that &lt;strong>it shows a single snippet of code that opens a bus based on Windows MSMQ and send a message to itself&lt;/strong>.&lt;/p></description></item></channel></rss>