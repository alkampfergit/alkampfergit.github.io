<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ClickOnce on Codewrecks</title><link>https://www.codewrecks.com/tags/clickonce/</link><description>Recent content in ClickOnce on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 07 Dec 2018 17:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/clickonce/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy click-once application on Azure Blob with Azure DevOps</title><link>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</link><pubDate>Fri, 07 Dec 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/12/deploy-click-once-application-on-azure-blob-with-azure-devops/</guid><description>It was a long time ago I blogged on how to publish a click-once application from a VSTS Build to Azure Blob, long time was passed, and lots of stuff changed. The whole process is now simpler, thanks to many dedicated tasks that avoid doing any manual work.
My new build always start with a GitVersion custom tasks, that populates some environment variables with version numbers generated by GitVersion, this will allow me to simply add an MsBuild task in the build to publish click-once using automatic GitVersion versioning.</description></item><item><title>Deploying a click-once application with build vNext in Azure Blob Storage</title><link>https://www.codewrecks.com/post/old/2015/12/rename-xmlrpc-php-on-your-wordpress-installation-2/</link><pubDate>Wed, 30 Dec 2015 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/12/rename-xmlrpc-php-on-your-wordpress-installation-2/</guid><description>Thanks to the new build system in TFS / VSTS, publishing an application with Click-once during a build is really simple.
Versioning the click-once app The project is using Git and GitFlow, thus it comes natural to use GitVersion (as described in a previous post ) to automatically add Semantic Versioning. In previous post I’ve demonstrated how to use this technique to publish Nuget Packages and nothing changes for Click Once applications.</description></item><item><title>Error publishing Click-once moving from NET 35 to 45</title><link>https://www.codewrecks.com/post/old/2014/05/error-publishing-click-once-moving-from-net-3-5-to-4-5/</link><pubDate>Tue, 20 May 2014 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/05/error-publishing-click-once-moving-from-net-3-5-to-4-5/</guid><description>I’ve a customer where we set up a TFS Build that automatically compile, obfuscates assembly and finally publish with click-once on an internal server. As a part of the process, a tool is used to move the published packages from the internal server to public server, to make it available to final customers. This tool uses mage.exe to change some properties of the package and then repack to publish to final server.</description></item><item><title>Mshtml and Click-Once the saga continues</title><link>https://www.codewrecks.com/post/old/2011/04/mshtml-and-click-once-the-saga-continues/</link><pubDate>Thu, 14 Apr 2011 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/mshtml-and-click-once-the-saga-continues/</guid><description>I must admit that I really do not like deploying Click-Once application that uses MSHTML.dll, because I had several problem in the past and another one rigth now. Today I have to deploy (click once) a new version of an application that was migrated from VS 2008 to Visual Studio 2010, and I found a really strange problem. When I checked the ApplicationFiles to be sure that MSHTML.dll is included in the Click-once package, I did not see it listed from the available assemblies to be included in the deploy.</description></item></channel></rss>