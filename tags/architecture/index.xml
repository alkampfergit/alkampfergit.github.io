<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on Codewrecks</title><link>https://www.codewrecks.com/tags/architecture/</link><description>Recent content in Architecture on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 08 May 2012 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>How to instantiate WCF host class with MEF</title><link>https://www.codewrecks.com/post/old/2012/05/how-to-instantiate-wcf-host-class-with-mef/</link><pubDate>Tue, 08 May 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/05/how-to-instantiate-wcf-host-class-with-mef/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">Basic Request Response WCF service&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/05/reson-behind-request-responseservice-in-wc/">Reason behind a request – response service in WCF&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/23/evolving-request-response-service-to-separate-contract-and-business-logic/">Evolving Request Response service to separate contract and business logic&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>I described in the last post of the series the structure behind the Request/Reponse service based on MEF, now it is time to explain how to make MEF and WCF happily live together. In the first version I hosted the service with these simple lines of code&lt;/p></description></item><item><title>Evolving Request Response service to separate contract and business logic</title><link>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</link><pubDate>Mon, 23 Apr 2012 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/evolving-request-response-service-to-separate-contract-and-business-logic/</guid><description>&lt;p>Example &lt;a href="http://www.codewrecks.com/Files/requestresponsemef.zip">&lt;strong>can be downloaded here&lt;/strong>&lt;/a> &lt;strong>.&lt;/strong> I previously described a scenario where the customer needs a &lt;a href="www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">really basic Request Response service in WCF&lt;/a>, the goal is being able to take &lt;a href="http://www.codewrecks.com/blog/index.php/2012/04/05/reson-behind-request-responseservice-in-wc/">advantage of a request / response structure&lt;/a>, but with an approach like: “&lt;em>the simpliest thing that could possibly works&lt;/em>”. This technique is usually needed to &lt;strong>introduce new architectural concepts in a team&lt;/strong> without requiring people to learn a huge amount of concepts in a single shot, a scenario that could ends in a  team that actively * &lt;strong>fight the new architecture because it is too complex&lt;/strong> *.&lt;/p></description></item><item><title>Reason behind a request 8211 response service in WCF</title><link>https://www.codewrecks.com/post/old/2012/04/reson-behind-request-responseservice-in-wc/</link><pubDate>Thu, 05 Apr 2012 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/04/reson-behind-request-responseservice-in-wc/</guid><description>&lt;p>I dealt with a minimal implementation of a &lt;a href="http://www.codewrecks.com/blog/index.php/2012/03/12/basic-request-response-wcf-service/">basic Request Response WCF Service&lt;/a> some times ago, now it is time to show some advantages you have using this approach. If the caller is created in.NET technology, you can &lt;strong>directly reference&lt;/strong> &lt;strong>the dll that contains all Requests and responses&lt;/strong> , without the need to create a service reference in Visual Studio. In my example the service is called CoreService, so I created a CoreServiceClient class to implement communication from client to server.&lt;/p></description></item><item><title>Basic Request Response WCF service</title><link>https://www.codewrecks.com/post/old/2012/03/basic-request-response-wcf-service/</link><pubDate>Mon, 12 Mar 2012 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/03/basic-request-response-wcf-service/</guid><description>&lt;p>The concept of Request-Response service is to have an endpoint with a single function capable to handle a command (a Request) and return a Response, to have a single entry point of our service. There are a lot of architectures around the web based on WCF and this pattern and this &lt;a href="http://davybrion.com/blog/2009/11/requestresponse-service-layer-series/">old series of post are a really good example&lt;/a> on how you can implement it in practice.&lt;/p>
&lt;p>The only drawback is that sometimes these architectures are quite complex for the average programmer, at least you can introduce them in a team where everyone is quite familiar with concept of Inversion Of Control, Dependency Injection, etc etc. The risk is that people are scared about the complexity and they start to believe that the benefit of such an architecture does not worth the extra complexity of the code, after all with WCF you can simply create a function on the interface, an implementation on a service class, update service reference and the game is done. On the contrary, some implementations of Request/Response pattern are quite complicated, you need to create a request, then the handler, then configure the IoC engine, etc etc.&lt;/p></description></item><item><title>Using a state object to store object property values</title><link>https://www.codewrecks.com/post/old/2011/11/using-a-state-object-to-store-object-property-values/</link><pubDate>Tue, 29 Nov 2011 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/using-a-state-object-to-store-object-property-values/</guid><description>&lt;p>In an &lt;a href="http://www.codewrecks.com/blog/index.php/2011/06/13/leverage-the-concept-of-state-of-your-entities/">old post&lt;/a> I dealt with a possible implementation of a BaseEntity class that stores all properties in a State object (based on a dictionary to store properties). Technically speaking, this solution have no drawbacks respect using field variables to store properties values, but it can give a lot of benefit. If you see the object from the outside, it presents a bunch of properties and thanks to encapsulation you can use the technique you prefer to store the real data inside the object. This approach has some drawbacks, first of all accessing the value of a property can be slower, because you need to find the value inside a dictionary instead of reading directly from a memory location (the field value). Another drawback is that I use the property names as dictionary keys, so you waste more memory to store the keys of the state dictionary, but you can limit this problem using &lt;a href="http://en.wikipedia.org/wiki/String_interning">string interning&lt;/a>.&lt;/p></description></item><item><title>Square peg in a round Hole</title><link>https://www.codewrecks.com/post/old/2011/10/square-peg-in-a-round-hole/</link><pubDate>Thu, 27 Oct 2011 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/10/square-peg-in-a-round-hole/</guid><description>&lt;p>After lots of year working with NHibernate I started to think that probably the whole concept of ORM can be considered an Antipattern. Some people prefer a “classic” approach to the problem, * &lt;strong>data&lt;/strong> *is the key concept and most of the logic is inside a storage based on &lt;a href="http://en.wikipedia.org/wiki/Relational_model">Relational Model&lt;/a>.&lt;/p>
&lt;p>Is this wrong?&lt;/p>
&lt;p>Absolutely not, after all, for many years this was the preferred way to structure your application, and it worked quite well, but after OOP has come to life, a lot of people started appreciating this new paradigm of programming and started to think in terms of “ &lt;strong>objects&lt;/strong> ” instead of “ &lt;strong>data&lt;/strong> ”.&lt;/p></description></item><item><title>Leverage the concept of 'state' of your entities</title><link>https://www.codewrecks.com/post/old/2011/06/leverage-the-concept-of-state-of-your-entities/</link><pubDate>Mon, 13 Jun 2011 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/06/leverage-the-concept-of-state-of-your-entities/</guid><description>&lt;p>One of the interesting ideas found in &lt;a href="http://radical.codeplex.com/">Radical&lt;/a> and other implementations of DDD architectures, is implementing properties of Domain objects in a slightly different way from the standard, using something like a dictionary to store values of properties. When we want to implement a property for a Domain class you usually end up with similar code.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String Property { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> _fieldBasedProperty;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> String FieldBasedProperty
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> _fieldBasedProperty; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">set&lt;/span> { _fieldBasedProperty = &lt;span style="color:#66d9ef">value&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Both of them use a private field to store the real value of the property, the first one is a compact form  (I to not like it for Domain object because it gives you no control on state changing of the object), the second one is the standard code to implement a property with a Backing field. Remember that in OOP an Object is a composition of Code and Data and having getter and setter for properties give use control on the * &lt;strong>state&lt;/strong> *of the object. Both of the above implementations are based on this concept and are widely used in all projects.&lt;/p></description></item><item><title>Lifecycle of singleton objects</title><link>https://www.codewrecks.com/post/old/2011/05/lifecycle-of-singleton-objects/</link><pubDate>Fri, 06 May 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/lifecycle-of-singleton-objects/</guid><description>&lt;p>Some days ago I blogged about an implementation of persistent cache component based on Managed Esent and &lt;a href="http://managedesent.codeplex.com/wikipage?title=PersistentDictionaryDocumentation">PersistentDictionary&lt;/a>. This component is injected into other components thanks to Inversion of Control and it is a &lt;em>&lt;a href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton&lt;/a>&lt;/em> object.&lt;/p>
&lt;p>&lt;a target="_blank" href="http://zenit.senecac.on.ca/wiki/imgs/Singleton_UML.png"> &lt;img src="http://zenit.senecac.on.ca/wiki/imgs/Singleton_UML.png" alt="External Image" />&lt;/a>&lt;/p>
&lt;p>Being a singleton is a requisite because it permits to different dependent objects to share the same cache, moreover &lt;em>PersistentDictionary&lt;/em> does not permit to have multiple instances that insists on the same directory. This will make EsentCache a perfect candidate of Singleton Object Pattern. Now another dilemma arise, &lt;em>since PersistentDictionary implements IDisposable to flush all resources into disk, who will call Dispose on a Singleton object?&lt;/em>&lt;/p></description></item><item><title>Mock Service Locator and Automocking Container to the rescue</title><link>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-and-automocking-container-to-the-rescue/</link><pubDate>Mon, 18 Oct 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-and-automocking-container-to-the-rescue/</guid><description>&lt;p>In a &lt;a href="http://www.codewrecks.com/blog/index.php/2010/10/16/mock-service-locator-automocking-container-and-the-hard-life-of-testers/">previous post&lt;/a> I dealt on how to write an AutoMockingContainer that is able to resolve a mock for unregistered objects. The goal was to be able to circumvent the problem of service locator.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/SNAGHTML1e24939.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/SNAGHTML1e24939_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/SNAGHTML1e24939_thumb.png" alt="SNAGHTML1e24939" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>During a test, the real container of the service locator is substituted with an AutoMocking container.&lt;/em>&lt;/p>
&lt;p>This is a standard way to work when you have to test classes that depends from Service Locator, override the Service Locator for the test, making it returns stub. Clearly you should design your class with Dependency Injection in mind, and reduce at minimum the Service Locator usage.&lt;/p></description></item><item><title>Mock Service Locator Automocking container and the hard life of testers</title><link>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</link><pubDate>Sat, 16 Oct 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/mock-service-locator-automocking-container-and-the-hard-life-of-testers/</guid><description>&lt;p>I know, &lt;a href="http://en.wikipedia.org/wiki/Service_locator_pattern">service locator&lt;/a> is an antipattern, but sometimes, when you begin to refactor existing code written with no IoC in mind, service locator can help you a little bit in restructuring your code. A service locator pattern work this way: you have some static or gloablly avaliable class named: ServiceLocator or IoC, and every object can query it for service implementation.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image6.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image_thumb6.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/10/image_thumb6.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Simple schema of Service Locator Pattern, each object can query the SL asking for service&lt;/em>&lt;/p></description></item><item><title>Message to users should be useful</title><link>https://www.codewrecks.com/post/old/2010/08/message-to-users-should-be-useful/</link><pubDate>Wed, 18 Aug 2010 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/message-to-users-should-be-useful/</guid><description>&lt;p>There are a lot of rules for usability of User Interface, and one of the most important one is not to clutter the user with strange error messages. Since the last update of skype, sometimes when I&amp;rsquo;m chatting with someone a &lt;em>really useful&lt;/em> message box appears.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/08/image5.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/08/image_thumb3.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/08/image_thumb3.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>This windows does not communicate nothing to the user, moreover if you click ok nothing happens&amp;hellip; skype continue to work with no problem. This design violates some best practice of the UI.&lt;/p></description></item><item><title>Writing windows services smoke test form</title><link>https://www.codewrecks.com/post/old/2009/12/writing-windows-services-smoke-test-form/</link><pubDate>Wed, 16 Dec 2009 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/12/writing-windows-services-smoke-test-form/</guid><description>&lt;p>I work often with windows services, and one of the most painfully experience is that you do not have an UI and quite often they have to do some scheduled task at certain time, so whenever you have a deploy you can find yourself in this situation.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image15.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb15.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb15.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>The question mark means that you are not sure if your new deploy is really ok, because maybe some of the scheduled tasks will fail for misconfiguration or something else. Usually production machine are different to developement ones, you can miss components, point to a wrong db, forget to update configuration, etc, etc. To avoid this situation you need a series of smoke checks, I usually proceed in this way.&lt;/p></description></item><item><title>Wise architects</title><link>https://www.codewrecks.com/post/old/2009/12/wise-architects/</link><pubDate>Wed, 09 Dec 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/12/wise-architects/</guid><description>&lt;p>Software architects are similar to civil architects, both of them work to create an artifact (software or building) on paper that will be subsequent realized. If you are committed to make a project of a building, witch of them you will like more to create?&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image9.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb9.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb9.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image10.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb10.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2009/12/image_thumb10.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;m sure that the first one is probably the first choice, for many reasons. It is more challenging, it will probably make you famous, it is surely more beautiful. The problem is that those two buildings are really different in use. The first can be a congress center, a museum, but the other one is a simple house for a standard family. The problem arise if a customer ask you for &lt;em>an house for me and my family&lt;/em> and you will give him the project to build the first one&amp;hellip; probably it is not the expected result, from the perspective of the customer.&lt;/p></description></item><item><title>Writing modular software with castle</title><link>https://www.codewrecks.com/post/old/2009/09/writing-modular-software-with-castle/</link><pubDate>Mon, 14 Sep 2009 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/09/writing-modular-software-with-castle/</guid><description>&lt;p>Thanks to &lt;a href="http://www.google.it/url?sa=t&amp;amp;amp;source=web&amp;amp;amp;ct=res&amp;amp;amp;cd=1&amp;amp;amp;url=http%3A%2F%2Fwww.castleproject.org%2Fcontainer%2Findex.html&amp;amp;amp;ei=wmKqStPfLIuwsAbHhZjkBw&amp;amp;amp;usg=AFQjCNFGZtGw-ordWFZS86FEFPnx-S_Jtg&amp;amp;amp;sig2=G6cxIH_hY5aZJ93egyGxEw">Castle Windsor&lt;/a> you can write really modular software. I&amp;rsquo;m building a project in WinForm that needs to access the domain model through a service layer on a WS* service. One of the most annoying stuff is the need to setup a local service to test the application and the interface.&lt;/p>
&lt;p>The key to speedup development is writing high modular software, thanks to castle this is really simple. First of all I use &lt;a href="http://www.nablasoft.com/guardian/index.php/2009/06/08/unity-wcf-service-resolution-container-extension/">guardian facility&lt;/a> to create proxy. This permits me to decide with configuration file if a service interface must be resolved with a proxy, or with a real class. This gives you immense flexibility.&lt;/p></description></item></channel></rss>