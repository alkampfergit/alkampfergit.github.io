<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on Codewrecks</title><link>https://www.codewrecks.com/tags/c/</link><description>Recent content in C on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 21 Mar 2020 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>One Team Project to rule them all</title><link>https://www.codewrecks.com/post/old/2020/03/one-team-project-to-rule-them-all/</link><pubDate>Sat, 21 Mar 2020 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/03/one-team-project-to-rule-them-all/</guid><description>&lt;p>A similar post was made lots of time ago, but since this is always an hot topic, it is probably the time to refresh with new UI and new concepts of Azure DevOps.&lt;/p>
&lt;blockquote>
&lt;p>The subject is, how can I apply security to backlogs if I adopt the strategy one single Team Project subdivided by teams?&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>The approach One Team Project to rule them all is still valid as today&lt;/strong> , because, once you have a team project, you can divide it with Teams, where each team has its own backlog (or share a single backlog between teams) making everything more manageable.&lt;/p></description></item><item><title>Handle an event with reflection</title><link>https://www.codewrecks.com/post/old/2011/04/handle-an-event-with-reflection/</link><pubDate>Fri, 22 Apr 2011 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/handle-an-event-with-reflection/</guid><description>&lt;p>Scenario: You have a generic event handler function&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> GenericHandler(&lt;span style="color:#66d9ef">object&lt;/span> sender, EventArgs e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MessageBox.Show(&lt;span style="color:#e6db74">&amp;#34;TEST&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Now you have an object and a string representing a name of an event raised from that object and you want to call your GenericHandler whenever the object is raised. This is possible thanks to Contravariance.&lt;/p>
&lt;p>Suppose you have a WebBrowserFlexible Wpf Control (it is actually a custom control capable of browsing using WebBrowser control or Gecko) that raise an DocumentCompleted event declared in this way.&lt;/p></description></item></channel></rss>