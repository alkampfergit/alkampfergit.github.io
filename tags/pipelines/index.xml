<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pipelines on Codewrecks</title><link>https://www.codewrecks.com/tags/pipelines/</link><description>Recent content in Pipelines on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 02 Feb 2025 06:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/pipelines/index.xml" rel="self" type="application/rss+xml"/><item><title>Pill: Problems in Azure DevOps Pipelines due to Shallow Fetch</title><link>https://www.codewrecks.com/post/azdo/pills/shallow-fetch-pipeline/</link><pubDate>Sun, 02 Feb 2025 06:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/shallow-fetch-pipeline/</guid><description>&lt;p>In Azure DevOps, pipelines are a fundamental component for automating the build and release process. One of the key optimizations in these pipelines is the use of &lt;strong>shallow fetch when cloning repositories&lt;/strong>. Unlike a full clone, which downloads the entire history of the repository, a &lt;strong>shallow fetch retrieves only the specific commit needed for the build&lt;/strong>. This is a really welcomed feature, because repositories can contain years of history, or they can have &lt;strong>some big file committed by error in some older commit&lt;/strong>.&lt;/p></description></item><item><title>Pills: What to do when dotnet restore failed with 401 against an internal feed</title><link>https://www.codewrecks.com/post/azdo/pills/problem-using-internal-nuget-feed-by-powershell/</link><pubDate>Fri, 23 Feb 2024 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/problem-using-internal-nuget-feed-by-powershell/</guid><description>&lt;p>This is an argument I&amp;rsquo;ve already discussed in the past in &lt;a href="https://www.codewrecks.com/post/azdo/pipeline/nuget-feed-authenticate/">A post about nuget authentication&lt;/a>. From a couple of days, in a project I&amp;rsquo;m working into the service started to return 401 even with the technique described in the aforementioned post.&lt;/p>
&lt;p>The sympthom is this error in the script that executed &lt;code>dotnet restore&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span> Unable to load the service index for source https://pkgs.dev.azure.com/organizaion/_packaging/FeedName@Local/nuget/v3/index.json.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Response status code does not indicate success: 401
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In such a situation here is what you need to do to try to solve the problem.&lt;/p></description></item><item><title>Pills: Exploring Agent Options in Azure DevOps Pipelines: Managed vs. Self-Hosted</title><link>https://www.codewrecks.com/post/azdo/pills/do-i-need-to-deploy-my-agents/</link><pubDate>Thu, 01 Feb 2024 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/do-i-need-to-deploy-my-agents/</guid><description>&lt;p>When configuring Azure DevOps pipelines, developers have a choice to make regarding the execution environment for their pipelines: they can either leverage &lt;strong>Microsoft-managed agents provided in Azure or opt to self-host agents on their own infrastructure&lt;/strong>, whether that be on-premises virtual machines or cloud-based instances. One of the first question that arise is: which I need to use for my organization? Let&amp;rsquo;s explore the pro and cons of each option.&lt;/p></description></item><item><title>More secure Azure DevOps Pipelines API connection thanks to OAuth Tokens</title><link>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-use-oauth2-tokens/</link><pubDate>Sun, 19 Mar 2023 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-use-oauth2-tokens/</guid><description>&lt;p>In a previous blog post, I discussed how to reschedule the check of a pull request using a simple PowerShell script within an Azure DevOps pipeline. This time, &lt;strong>I&amp;rsquo;ll explain how to avoid using Personal Access Tokens for authentication&lt;/strong> and switch to a more secure alternative.&lt;/p>
&lt;p>The issue with Personal Access Tokens is that they are bearer token, which means &lt;strong>if they&amp;rsquo;re lost or accidentally leaked in logs, anyone with access to the token can use it to access your services&lt;/strong>. To address this problem, it&amp;rsquo;s better to use a specific Personal Access Token with the minimum required scopes. For instance, if you only need to reschedule Pull Requests checks, grant the token only pull request and build access. This limits the potential damage if the token falls into the wrong hands.&lt;/p></description></item></channel></rss>