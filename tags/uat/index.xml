<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UAT on Codewrecks</title><link>https://www.codewrecks.com/tags/uat/</link><description>Recent content in UAT on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 13 Feb 2018 18:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/uat/index.xml" rel="self" type="application/rss+xml"/><item><title>New cool feature of VSTS to limit impact of erratic tests</title><link>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</link><pubDate>Tue, 13 Feb 2018 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/02/new-cool-feature-of-vsts-to-limit-impact-of-erratic-tests/</guid><description>I’ve blogged some time ago about running UAT testing with a mix of Build + Release in VSTS. Actually, UAT testing are often hard to write, because they can be erratic. As an example, we have a software composed by 5 services that collaborates together, CQRS and Event Sourcing, so most of the tests are based on a typical pattern: Do something then wait for something to happen.
Writing tests that interact with the UI or are based on several services interacting togheter can be difficult.</description></item><item><title>Running UAT tests in a VSTS TFS release</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</link><pubDate>Thu, 17 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-tests-in-a-vsts-tfs-release/</guid><description>I’ve blogged on how to run UAT and integration tests during a VSTS Build; that solution works quite well but probably is not the right way to proceed. Generally speaking that build does its work but I have two main concerns.
Executing test with remote execution requires installation of test agent and involves WinRm , a beast that is not so easy to tame outside a domain
I’m deploying the new version of the application with an XCopy deployment, that is different from a real deploy to production.</description></item><item><title>Running UAT and integration tests during a VSTS Build</title><link>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</link><pubDate>Sat, 05 Aug 2017 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/08/running-uat-and-integration-tests-during-a-vsts-build/</guid><description>There are a lots of small suggestions I’ve learned from experience when it is time to create a suite of integration / UAT test for your project. A UAT or integration test is a test that exercise the entire application, sometimes composed by several services that are collaborating to create the final result. The difference from UAT tests and Integration test, in my personal terminology, is that the UAT uses direct automation of User Interface, while an integration tests can skip the UI and exercise the system directly from public API (REST, MSMQ Commands, etc).</description></item></channel></rss>