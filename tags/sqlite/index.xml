<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQLite on Codewrecks</title><link>https://www.codewrecks.com/tags/sqlite/</link><description>Recent content in SQLite on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Nov 2011 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/sqlite/index.xml" rel="self" type="application/rss+xml"/><item><title>Some interesting links for SQL Server 2012 data tools</title><link>https://www.codewrecks.com/post/old/2011/11/some-interesting-links-for-sql-server-2012-data-tools/</link><pubDate>Mon, 28 Nov 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/11/some-interesting-links-for-sql-server-2012-data-tools/</guid><description>I love Database Project, introduced with Visual Studio 2008, and with SQL server 2012 they will be replaced by the Data Tools (codename Juneau), so I have a couple of links to share about this argument.
In this link you can find a table that compares all the features. As you can see, actually, one of the most missed feature in my opinion is the Data Generation and Database Unit Testing support.</description></item><item><title>SQLite performance in production code</title><link>https://www.codewrecks.com/post/old/2011/04/sqllite-performance-in-production-code/</link><pubDate>Fri, 22 Apr 2011 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/04/sqllite-performance-in-production-code/</guid><description>SQLite is a cool relational database engine that runs embedded in code, without the need to use a server. It is usually used for unit testing, but it could be used in production code if we need to maintain a small database and we do not need the full power of a SQL Server or similar RDBMS.
When you use SQLite in production, remember to enable caching of connection into the connection string, if you use the wrong connection string, you wull not use pooling, and performance will suffer.</description></item></channel></rss>