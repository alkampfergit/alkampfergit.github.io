<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DataDude on Codewrecks</title><link>https://www.codewrecks.com/tags/datadude/</link><description>Recent content in DataDude on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 05 Aug 2013 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/datadude/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Test Data in Visual Studio Database project</title><link>https://www.codewrecks.com/post/old/2013/08/manage-test-data-in-visual-studio-database-project/</link><pubDate>Mon, 05 Aug 2013 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/08/manage-test-data-in-visual-studio-database-project/</guid><description>&lt;p>One of the greatest missing of &lt;a href="http://msdn.microsoft.com/en-us/data/tools.aspx">Visual Studio Database Projects&lt;/a>, is the ability to manage data in a Database Project. One widely used technique to overcome this limitation is using PostDeployment scripts and script data inserting. &lt;strong>This technique is used also to insert test data inside the database&lt;/strong>. When used in this way, you need some way to avoid inserting test data in Production Database, so you need to find a technique that permits you to run the inserting test data only when needed.&lt;/p></description></item><item><title>TF Service deploy on Azure Web Site with Database Project</title><link>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</link><pubDate>Fri, 15 Mar 2013 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/03/tf-service-deploy-on-azure-web-site-with-database-project/</guid><description>&lt;p>The ability to automatically deploy a site on Azure Web Site from TFService is really interesting, but sadly enough there is no out-of-the-box solution to &lt;strong>update the structure of an Azure Database with a VS2012 Database Project&lt;/strong>. In this post I’ll show &lt;strong>how to modify the standard build template to deploy a Database Project during Azure Web Site Deployment&lt;/strong>. I’ve blogged in the past to explain how to &lt;a href="http://www.codewrecks.com/blog/index.php/2010/01/04/deploy-a-database-project-with-tfs-build-2010/">Deploy a Database Project with TFS Build&lt;/a>, but that post refers to the old type of Database Project (VS2010) and now I want to explain how to customize the AzureContinuousDeployment build to deploy on azure a database project of VS2012.&lt;/p></description></item><item><title>Migrate MsTest of database edition to VS2010</title><link>https://www.codewrecks.com/post/old/2011/02/migrate-mstest-of-database-edition-to-vs2010/</link><pubDate>Tue, 22 Feb 2011 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/migrate-mstest-of-database-edition-to-vs2010/</guid><description>&lt;p>I have a VS2008 project that is being converted to VS2010. This solution has a MsTest test project used to run database test against a Database project. After conversion you need to target the 4.0 framework for the test project, you run the test and you get&lt;/p>
&lt;blockquote>
&lt;p>Microsoft.Build.BuildEngine.InvalidProjectFileException: Microsoft.Build.BuildEngine.InvalidProjectFileException: The expression &amp;ldquo;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\VSTSDB@VSTSDBDirectory&amp;rdquo; cannot be evaluated.. Aborting test execution&lt;/p>&lt;/blockquote>
&lt;p>This is due to the fact that the test project probably references old version of the Microsoft.Data.Schema and Microsoft.Data.Schema.UnitTesting dll, just verify that you are using the correct version, simply remove the above two dll from references and add them again using the right version.&lt;/p></description></item><item><title>Pay attention to file length in database project after a synchronization</title><link>https://www.codewrecks.com/post/old/2010/03/pay-attention-to-file-length-in-database-project-after-a-synchronization/</link><pubDate>Mon, 29 Mar 2010 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/03/pay-attention-to-file-length-in-database-project-after-a-synchronization/</guid><description>&lt;p>One of the coolest feature of Database Projects in VS2008 is the ability to synchronize the database project with a physical instance of SQL server.&lt;/p>
&lt;p>This is useful if not all people from the team have the ability to run a database project (this is solved in vs2010 where database project are available even in the professional edition), or if some DBA makes modification to a database with management studio.&lt;/p></description></item><item><title>Deploy a database project with tfs build 2010</title><link>https://www.codewrecks.com/post/old/2010/01/deploy-a-database-project-with-tfs-build-2010/</link><pubDate>Mon, 04 Jan 2010 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/01/deploy-a-database-project-with-tfs-build-2010/</guid><description>&lt;p>If you want to deploy a database project into a target sql server instance during a tfs 2010 build, you can use with success the basic MsBuildTask, &lt;a href="http://www.codewrecks.com/blog/index.php/2009/10/23/automatic-deployment-of-a-web-application-with-tfs-build/">similar to tfs2008&lt;/a>.&lt;/p>
&lt;p>I decided to deploy the database, only if the tests are ok and the build is ok, so I place a condition activity under the test phase and I set the condition to pass only if the test and build status are different from Failed&lt;/p></description></item><item><title>Create a SqlRule for database project in vs2010 beta2</title><link>https://www.codewrecks.com/post/old/2009/12/create-a-sqlrule-for-database-project-in-vs2010-beta2/</link><pubDate>Wed, 30 Dec 2009 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/12/create-a-sqlrule-for-database-project-in-vs2010-beta2/</guid><description>&lt;p>Custom Rule for database projects is one of my favorite extension point of Visual Studio 2008, and I blogged about &lt;a href="http://www.codewrecks.com/blog/index.php/2009/11/28/database-edition-custom-rule/">it some time ago&lt;/a>. Yesterday I tried to convert my sample rule for visual studio 2010 beta2, and there are a lot of things that are changed. The result will be a simple rule that force column name to be in form xxxx_xxxxxxxx as in the past example&lt;/p>
&lt;p>First of all the extension needs to specify its details with attributes. The DatabaseSchemaProviderCompatibility permits you to specify the version of the database the rule applies to, in my example a standard sqlDatabase, then the DataRuleAttirbute is used to specify name, id, description, and other attributes of the rule. Finally you need to specify a series of SupportedElementTypeAttribute to declare the kind of database objects you want to validate, for this example you simply need to specify ISqlColumn because I want only to validate column names.&lt;/p></description></item></channel></rss>