<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Codewrecks</title><link>https://www.codewrecks.com/tags/docker/</link><description>Recent content in Docker on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 25 Jan 2020 11:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows Docker Container for Azure Devops Build agent</title><link>https://www.codewrecks.com/post/old/2020/01/windows-docker-container-for-azure-devops-build-agent/</link><pubDate>Sat, 25 Jan 2020 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/windows-docker-container-for-azure-devops-build-agent/</guid><description>&lt;p>Thanks to Docker Compose, &lt;a href="http://www.codewrecks.com/blog/index.php/2019/12/27/azure-devops-agent-with-docker-compose/">I can spin off an agent for Azure Devops in mere seconds&lt;/a> (once you have all the images). Everything I need is just insert the address of my account a valid token and an agent is ready.&lt;/p>
&lt;p>&lt;strong>With.NET core everything is simple, because we have a nice build task that automatically install.NET Core SDK in the agent,&lt;/strong> the very same for node.js. This approach is really nice, because it does not require to preinstall too much stuff in your agent, everything is downloaded and installed on the fly when a build needs that specific tooling.&lt;/p></description></item><item><title>Azure DevOps agent with Docker Compose</title><link>https://www.codewrecks.com/post/old/2019/12/azure-devops-agent-with-docker-compose/</link><pubDate>Fri, 27 Dec 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/12/azure-devops-agent-with-docker-compose/</guid><description>&lt;p>I’ve dealt in the past on using Docker for your Azure DevOps Linux Build Agent in a post called &lt;a href="http://www.codewrecks.com/blog/index.php/2017/10/14/configure-a-vsts-linux-agent-with-docker-in-minutes/">Configure a VSTS Linux agent with docker in minutes&lt;/a> and also I’ve blogged on how you can &lt;a href="http://www.codewrecks.com/blog/index.php/2019/06/10/hosted-agents-plus-docker-perfect-match-for-azure-devops-and-open-source-project/">use Docker inside a build definition to have some prerequisite for testing&lt;/a> (like MongoDb and Sql Server), now it is time to move a little step further and leverage Docker compose.&lt;/p>
&lt;p>&lt;strong>Using Docker commands in pipeline definition is nice, but has some drawbacks:&lt;/strong> First of all this approach suffers in speed of execution, because the container must start each time you run a build (and should be stopped at the end of the build). Is indeed true that if the docker image is already present in the agent machine startup time is not so high, but some images, like MsSql, are not immediately operative, so you need to wait for them to be ready for Every Build. The alternative is leave them running even if the build is finished, but this could lead to resource exaustion.&lt;/p></description></item></channel></rss>