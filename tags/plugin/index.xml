<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Plugin on Codewrecks</title><link>https://www.codewrecks.com/tags/plugin/</link><description>Recent content in Plugin on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 29 Jul 2013 16:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/plugin/index.xml" rel="self" type="application/rss+xml"/><item><title>Converting a Visual Studio plugin from 2012 to 2013</title><link>https://www.codewrecks.com/post/old/2013/07/converting-a-visual-studio-plugin-from-2012-to-2013/</link><pubDate>Mon, 29 Jul 2013 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2013/07/converting-a-visual-studio-plugin-from-2012-to-2013/</guid><description>I’ve some little utilities for Visual Studio, born as a Macro and then converted to Plugin. Now that VS 2013 preview is out, I want to convert that addin to support the new version of Visual Studio , so I can use my utilities even in VS 2013.
The whole conversion process is really straightforward, first of all I create a branch of the original VS2012 version of the plugin, just to be able to compile again with VS 2012.</description></item><item><title>Visual Studio Plugin stop build at first error</title><link>https://www.codewrecks.com/post/old/2012/08/visual-studio-plugin-stop-build-at-first-error/</link><pubDate>Wed, 29 Aug 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/visual-studio-plugin-stop-build-at-first-error/</guid><description>When it is time to work with big solutions composed by many projects, it is useful to have the ability to stop the build at the very first build error. There are several reason to do this, first of all probably many of the subsequent error can be caused by the fact that a base project does not compile, or simply the build process takes a long time that it is not useful to continue the build when a project does not build , (quite often we are interested only in build the whole solution, so there is no point in waiting for all the other project to compile, because at the end everything we want to do is fixing the project that does not compile and try again to rebuild).</description></item><item><title>Converting Visual Studio Macro to Visual Studio plugin</title><link>https://www.codewrecks.com/post/old/2012/08/converting-visual-studio-macro-to-visual-studio-plugin/</link><pubDate>Fri, 24 Aug 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/converting-visual-studio-macro-to-visual-studio-plugin/</guid><description>Visual Studio 2012 is really faster than 2010, this is due to an excellent work of the team to maximize performance and because in this release some of the older and less used part of the IDE were removed. One of this part is the Macro editor that is not anymore available in Visual Studio. This is one of the feature I missed most because I’ve used it in the past to automate some basic task, like attach to IIS automatically with a keyboard shortcut.</description></item><item><title>Location of your vsix files in experimental hive during plugin development</title><link>https://www.codewrecks.com/post/old/2012/08/location-of-your-vsix-files-in-experimental-hive-during-plugin-development/</link><pubDate>Thu, 23 Aug 2012 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/08/location-of-your-vsix-files-in-experimental-hive-during-plugin-development/</guid><description>When you are developing Visual Studio plugin, your project is usually configured to launch a special instance of Visual Studio under the Visual Studio debugger (excellent example of dogfooding), this special instance is called experimental HIVE.
Figure 1: Configuration of a standard VSIX project to test your addin
As you can see the project is configured to start Visual Studio as external program to be debugged and it is started with the option /rootsuffix Exp to start in Experimental Hive.</description></item><item><title>Customize output windows in Visual Studio</title><link>https://www.codewrecks.com/post/old/2012/01/customize-output-windows-in-visual-studio/</link><pubDate>Mon, 09 Jan 2012 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2012/01/customize-output-windows-in-visual-studio/</guid><description>I really like WPF for showing directly in the Visual Studio Output folder all binding errors, but one annoying stuff is that the output windows is usually crowded with all sort of stuff, so you have an hard life identifying the binding errors from all the other output contained in there. Since Visual Studio 2010 use WPF to render the output windows and use MEF for extension, modifying the aspect of the content of VS2010 is really simple.</description></item></channel></rss>