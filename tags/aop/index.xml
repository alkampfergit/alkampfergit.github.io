<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aop on Codewrecks</title><link>https://www.codewrecks.com/tags/aop/</link><description>Recent content in Aop on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Feb 2011 09:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/aop/index.xml" rel="self" type="application/rss+xml"/><item><title>AoP with castle part 4-Adding AoP to service oriented App</title><link>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</link><pubDate>Sat, 19 Feb 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</guid><description>Previous Parts of the series
Part 1 – The basic of interception
Part 2 – Selecting Methods to intercept
Part 3 – The first interceptor
AOP works great if you have clear interfaces where you want to put some standard and shared logic, and a Service Oriented Application falls in this category. A service is just a bunch of methods that will share some common behavior like: Validation, logging, Security etc etc, so it is a good strategy to create interceptors for each one of this behavior and associate them to service classes.</description></item><item><title>AOP With castle-Part 3-The first interceptor</title><link>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</link><pubDate>Mon, 09 Aug 2010 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</guid><description>Previous Parts of the series
Part 1 – The basic of interception
Part 2 – Selecting Methods to intercept
Usually the very first interceptor you can build with an AOP framework is the logger Interceptor, because it is simple and useful, especially when you expose some services with WPF. Consider this scenario: you expose some services with WPF, sometimes people tell you that your services have bugs or they encountered an exception, or they get wrong result, etc.</description></item><item><title>Cache layer</title><link>https://www.codewrecks.com/post/old/2010/07/cache-layer/</link><pubDate>Wed, 07 Jul 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/cache-layer/</guid><description>Thanks to AOP concept, creating a cache layer that is transparent to the caller is not a big deal. I have a piece of code that in a loop calls this method
1 2 3 ClientCompetitor competitor = Repository.ClientCompetitor.GetByCriteria( Query.CreateEq(&amp;#34;AssociatedClient&amp;#34;, clieid)) .SingleOrDefault(); This is based on a standard implementation of repository and a Specification Pattern as a query model. With nhibernate profiler I see that during the execution of this task, a lot of identical query are issued, because it gets called around 1000 times always with the same clieid.</description></item><item><title>Aop With castle Part 1</title><link>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</link><pubDate>Tue, 01 Jun 2010 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</guid><description>I made a session about Aop with castle in a Italian workshop oranized by our association DotNetMarche, and some of the attendee asked me to publish the material in my blog. So I decided to start to publish all material in english language.
Introduction If you look at canonical terms of aop you can recognize standard ones such as Aspect, JointPoint, PointCut , but if you look at castle infrastructure you could not find any of these.</description></item></channel></rss>