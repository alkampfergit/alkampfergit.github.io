<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aop on Codewrecks</title><link>https://www.codewrecks.com/tags/aop/</link><description>Recent content in Aop on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 19 Feb 2011 09:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/aop/index.xml" rel="self" type="application/rss+xml"/><item><title>AoP with castle part 4-Adding AoP to service oriented App</title><link>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</link><pubDate>Sat, 19 Feb 2011 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/02/aop-with-castle-part-4adding-aop-to-service-oriented-app/</guid><description>&lt;p>Previous Parts of the series&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/01/aop-with-castle-part-1/">Part 1 – The basic of interception&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/08/aop-with-castle-part-2-selecting-methods-to-intercept/">Part 2 – Selecting Methods to intercept&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/08/09/aop-with-castlepart-3-the-first-interceptor/">Part 3 – The first interceptor&lt;/a>&lt;/p>
&lt;p>AOP works great if you have clear interfaces where you want to put some standard and shared logic, and a Service Oriented Application falls in this category. A service is just a bunch of methods that will share some common behavior like: Validation, logging, Security etc etc, so it is a good strategy to create interceptors for each one of this behavior and associate them to service classes. The good point is that Castle has a dedicated facility to integrate with WCF, that basically is able to resolve WCF server classes with castle. Setting up such a facility is really simple, and you can follow the instruction f&lt;a href="http://stw.castleproject.org/Windsor.WCF-Integration-Facility.ashx">ound on castle&amp;rsquo;s site&lt;/a>.&lt;/p></description></item><item><title>AOP With castle-Part 3-The first interceptor</title><link>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</link><pubDate>Mon, 09 Aug 2010 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/aop-with-castlepart-3-the-first-interceptor/</guid><description>&lt;p>Previous Parts of the series&lt;/p>
&lt;p>&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/01/aop-with-castle-part-1/">Part 1 – The basic of interception&lt;/a>&lt;br>
&lt;a href="http://www.codewrecks.com/blog/index.php/2010/06/08/aop-with-castle-part-2-selecting-methods-to-intercept/">Part 2 – Selecting Methods to intercept&lt;/a>&lt;/p>
&lt;p>Usually the very first interceptor you can build with an AOP framework is the &lt;em>logger Interceptor&lt;/em>, because it is simple and useful, especially when you expose some services with WPF. &lt;em>Consider this scenario&lt;/em>: you expose some services with WPF, sometimes people tell you that your services have bugs or they encountered an exception, or they get wrong result, etc. In this situation you receive information like:&lt;/p></description></item><item><title>Cache layer</title><link>https://www.codewrecks.com/post/old/2010/07/cache-layer/</link><pubDate>Wed, 07 Jul 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/07/cache-layer/</guid><description>&lt;p>Thanks to AOP concept, creating a cache layer that is transparent to the caller is not a big deal. I have a piece of code that in a loop calls this method&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>ClientCompetitor competitor = Repository.ClientCompetitor.GetByCriteria(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Query.CreateEq(&lt;span style="color:#e6db74">&amp;#34;AssociatedClient&amp;#34;&lt;/span>, clieid))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.SingleOrDefault();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This is based on a standard implementation of repository and a &lt;a href="http://en.wikipedia.org/wiki/Specification_pattern">Specification Pattern&lt;/a> as a query model. With &lt;a href="http://nhprof.com/">nhibernate profiler&lt;/a> I see that during the execution of this task, a lot of identical query are issued, because it gets called around 1000 times always with the same clieid.&lt;/p></description></item><item><title>Aop With castle Part 1</title><link>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</link><pubDate>Tue, 01 Jun 2010 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/06/aop-with-castle-part-1/</guid><description>&lt;p>I made a session about Aop with castle in a Italian workshop oranized by our association DotNetMarche, and some of the attendee asked me to publish the material in my blog. So I decided to start to publish all material in english language.&lt;/p>
&lt;h4 id="introduction">&lt;font color="#004080">&lt;strong>Introduction&lt;/strong>&lt;/font>&lt;/h4>
&lt;p>If you look at canonical terms of &lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">aop&lt;/a> you can recognize standard ones such as Aspect, JointPoint, PointCut , but if you look at castle infrastructure you could not find any of these. This does not means that castle does not supports AOP, but is a clue that Castle handles AOP with different point of view respect to other frameworks.&lt;/p></description></item></channel></rss>