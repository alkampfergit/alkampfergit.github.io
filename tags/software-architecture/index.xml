<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Architecture on Codewrecks</title><link>https://www.codewrecks.com/tags/software-architecture/</link><description>Recent content in Software Architecture on Codewrecks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Dec 2011 19:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/software-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Getters are an antipattern</title><link>https://www.codewrecks.com/post/old/2011/12/getters-are-an-antipattern/</link><pubDate>Fri, 16 Dec 2011 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/12/getters-are-an-antipattern/</guid><description>When you realize that property setters is an antipattern, because you want to protect the status of your entity from direct external manipulation, the next step is starting to believe that even Getters can be considered an Antipattern.
This is some sort of extreme object oriented thinking, because getters does not modify the status of an object, so there is nothing evil in themâ€¦ or not? If you look for the definition of Encapsulation from Wikipedia you can find this:</description></item><item><title>Again on TimeGrowingResource</title><link>https://www.codewrecks.com/post/old/2011/09/again-on-timegrowingresource/</link><pubDate>Fri, 09 Sep 2011 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/09/again-on-timegrowingresource/</guid><description>In the last post I explained how I resolved the problem of Time Growing Resources in my hypothetical role playing game. The advantage of using an OOP approach is that you can think without data in mind and you can identify * entities *that represents a single concept in a given * BOUNDED CONTEXT *an approach that leads to simpler code and models.
Suppose that we want to add other logic to the TimeGrowingResource class, first of all we want to be able to change the rate of growing, so we write this simple test.</description></item><item><title>Persistent cache management with Managed Esent</title><link>https://www.codewrecks.com/post/old/2011/05/persistent-cache-management-with-managed-esent/</link><pubDate>Mon, 02 May 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/05/persistent-cache-management-with-managed-esent/</guid><description>I have a program where components could depend from cache, implemented by ICache interface.
I have really different types of cache, for data that needs to be temporary stored in memory I use a cache component based on enterprise library, but there are components that logically needs a cache that will survive after the process will exit.
The first and obvious solution was to create a very simple component that stores cache data on application database, this is especially useful because program running from different computer could share the same cache with no problem.</description></item><item><title>Dto generator and repository integration</title><link>https://www.codewrecks.com/post/old/2009/07/dto-generator-and-repository-integration/</link><pubDate>Fri, 31 Jul 2009 02:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/dto-generator-and-repository-integration/</guid><description>I have a project where I use repository pattern, interface code access domain object through a service, and the service return Dto. One of the bad side of the dto is that they are boring to write and to maintain. The main risk is that developers does this error
Mmmm I had to show a combo with all the typologies of the current customer, let me seee, I have already a service that return Typlogy object given the customer Id, ok I&amp;rsquo;ll use it.</description></item><item><title>A better version of dtofactory</title><link>https://www.codewrecks.com/post/old/2009/07/a-better-version-of-dtofactory/</link><pubDate>Tue, 07 Jul 2009 00:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/a-better-version-of-dtofactory/</guid><description>In this post I dealt with a primitive version of a T4 template to generate dto starting from domain objects. In these days I had little time to improve it a little bit, and I created a simple test project to verify some of the basic functionality.
Usage of the T4 template is really simple, I&amp;rsquo;ve created in the test project an Entity Factory model to the ubiquitous northwind database, then I added a OrderDto.</description></item><item><title>Design UI First</title><link>https://www.codewrecks.com/post/old/2009/07/design-ui-first/</link><pubDate>Mon, 06 Jul 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/07/design-ui-first/</guid><description>Some days ago we have a question on the possibility to have a Design UI first approach to a project. (the forum post is in Italian). If you asked me this question some years ago, I surely have answered Probably not. I must admit that I always thought that some people gave too many importance to the UI. Quite often Project managers are the kind of people that always ask for impressive interface to show to final customers, while we, as programmers, tend to spent more attention to the code part of the project, and usually do not care about UI.</description></item><item><title>Team foundation Build - Share Builds among multiple servers</title><link>https://www.codewrecks.com/post/old/2009/06/team-foundation-build-share-builds-among-multiple-servers/</link><pubDate>Thu, 25 Jun 2009 12:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/team-foundation-build-share-builds-among-multiple-servers/</guid><description>When you begin to use Team Foundation Server, you will create different builds for all of your company&amp;rsquo;s projects. Since building complex products can be resource intensive, it is likely that your Team Foundation Server machine starts to perform slowly. This is a typical issue of Continuous integration servers, since they compile projects at each check-in you will end with a lot of builds and a lot of work to do.</description></item><item><title>A dto factory code generator with visual studio T4</title><link>https://www.codewrecks.com/post/old/2009/06/a-dto-factory-code-generator-with-visual-studio-t4/</link><pubDate>Wed, 24 Jun 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/a-dto-factory-code-generator-with-visual-studio-t4/</guid><description>Data Transfer Objects, best known as Dto, are an essential part of projects that uses services or Domain Model. Dto are great, but the disadvantage is that maintaining Dto objects is a pain, because they are composed by repetitive code, and you have no fun in writing them.
Since building a Dto is a mechanical process it is better to use a code generation tool to generate them with little effort.</description></item><item><title>Plan for change</title><link>https://www.codewrecks.com/post/old/2009/06/plan-for-change/</link><pubDate>Mon, 15 Jun 2009 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/06/plan-for-change/</guid><description>Here is a possible dialog between Customer/PM/Analyst and a programmer
Developers usually end with one or more of those thought
Analyst is a moron, he did a bad job not finding the real requirement of the customer Customer are stupid because they does not know what they want, they are constantly changing requirements. We lack requirement gathering phase, now we must loose time following desires of Analyst/Customer Finally the programmer complains a lot about too much code to change, and how is painful working in an environment where noone is able to catch the real requirement of the customer.</description></item><item><title>Maintain integrity in NHibernate bidirectional association</title><link>https://www.codewrecks.com/post/old/2009/05/maintain-integrity-in-nhibernate-bidirectional-association/</link><pubDate>Tue, 05 May 2009 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/05/maintain-integrity-in-nhibernate-bidirectional-association/</guid><description>Using Bidirectional Associations in nhibernate can be tricky, the problem is that you need to manage associations for both ends. This is really important: suppose you have a class called Parent with a collection of childs called Childs, and a child class with a property called Parent; if you expose these two property to the user, you can write this
1 2 3 4 5 6 Parent John = new Parent(); Parent Mark = new Parent(); Child Bart = new Child(); John.</description></item><item><title>Adapting a model to make binding simpler</title><link>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</link><pubDate>Tue, 17 Mar 2009 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/03/adapting-a-model-to-make-binding-simpler/</guid><description>I have a domain model composed by Clients, each client has a series of associated Typology objects and each Typology object has a certain number of associated Target. Now I need to bind this model to a series of three combo in WPF, but I have this little problem
The model is not directly accessible, I have already a service that has functions like GetAllCustomer, GetTyplogyForCustomer(Int32 customerId) and GetTargetForTyplogy(Int32 typologyId). Each method returns a list of the corresponding object, but they are DTO and not real object, so the Customer, Typology and Target returned from the service have no relation between them.</description></item><item><title>Setting up the trunk of a project</title><link>https://www.codewrecks.com/post/old/2009/02/setting-up-the-trunk-of-a-project/</link><pubDate>Mon, 16 Feb 2009 03:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/02/setting-up-the-trunk-of-a-project/</guid><description>In this very interesting link brendan spoke about how to organize the trunk of a project. I think that this is a very important subject, especially for medium sized or big project. If you fail to organize your source code including everything you will end with trouble. In the past it happened to me to work on project where you need to spend a lot of time just to have the first run ok.</description></item><item><title>Extend BindingList with filter functionality</title><link>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</link><pubDate>Sat, 22 Nov 2008 05:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/extend-bindinglist-with-filter-functionality/</guid><description>If you still work with windows forms and cannot move all of your projects to WPF, you probably gets annoyed by the limitation of the standard BindingList&amp;lt;T&amp;gt; included in the framework. In an old post I showed how can you create a specialized BindingList&amp;lt;T&amp;gt; to support generic Find() thanks to reflection, but this is not enough.
Another annoying limitation is that BindingList does not support IBindingListView. For those that does not knows this interface, it is the one used by the windows forms binding engine to support filtering and advanced sorting.</description></item><item><title>Impedence between domain objects and Ui Layer</title><link>https://www.codewrecks.com/post/old/2008/11/impedence-between-domain-objects-and-ui-layer/</link><pubDate>Thu, 20 Nov 2008 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/11/impedence-between-domain-objects-and-ui-layer/</guid><description>When you work with domain model your domain objects become more complex than a simple containers for table values. This makes somewhat problematic using these object directly with the UI, especially when you use native binding. Let&amp;rsquo;s make an example, I have this object called Domain
As you can see the Domain class has a property called ContentBlackList that is a List of String. The setter is private and in the getter the list is created lazily, then I have a User Type to map this property into a single field of a table in a list of string separated by the charachter #.</description></item><item><title>The eternal conflict between customers and programmers</title><link>https://www.codewrecks.com/post/old/2008/09/the-eternal-conflicts/</link><pubDate>Thu, 11 Sep 2008 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/the-eternal-conflicts/</guid><description>In my experience it is not a good idea to put in direct communication stakeholders (customers) and programmers, here is the typical result
Lets analyze this typical situation from the perspective of the stakeholder; he have all the reason to ask for new features, he does not possess strong technical skills, and since he is the one who actually pay to build the software, he does not understand why he cannot ask for a simple modification.</description></item><item><title>I love fluent interfaces</title><link>https://www.codewrecks.com/post/old/2008/09/i-love-fluent-interfaces/</link><pubDate>Thu, 04 Sep 2008 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/09/i-love-fluent-interfaces/</guid><description>Iâ€™m developing a little library that basically does these steps
open a docx file Find a particular bookmark in the file
3)Add some content at bookmark position Save the updated file. This is a typical call
I like very much this kind of syntax, since we chain every method we always have intellisense that suggest us what to call, if you read the code you can easily check that we add two simple cell with text, then we add a cell with complex text, then another paragraph and finally another table, here is the result on the final document.</description></item><item><title>Relations are really so useful</title><link>https://www.codewrecks.com/post/old/2008/07/relations-are-really-so-useful/</link><pubDate>Tue, 22 Jul 2008 23:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2008/07/relations-are-really-so-useful/</guid><description>Today I was reading this post from my friend Marco, where he points out one of the most frequent problem in the design of domain Model: too much use of relations. The problem arises from the fact that an ORM like NHibernate, seems to solve all the problems because it handles all the complexities, but there are a lot of considerations to be done before establish a relation between entities. Let&amp;rsquo;s have a brief look at the classical example of Customer-Orders</description></item></channel></rss>