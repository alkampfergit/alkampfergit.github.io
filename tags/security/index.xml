<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Codewrecks</title><link>https://www.codewrecks.com/tags/security/</link><description>Recent content in Security on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 16 Mar 2025 08:00:00 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Pin GitHub action SHA to avoid security risk</title><link>https://www.codewrecks.com/post/github/github-sha-pinning/</link><pubDate>Sun, 16 Mar 2025 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/github-sha-pinning/</guid><description>&lt;h1 id="the-problem">The problem&lt;/h1>
&lt;p>When you author GitHub action pipelines, you usually use third party actions, that can be easily referenced in your workflow with simple syntax.&lt;/p>
&lt;p>Usually you refer to a github action in your workflow with the following syntax&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.128.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">extended&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>This is the &lt;strong>standard way to use a third party action inside your workflow&lt;/strong>, you specify the name of the repository in the uses part of the step, and then specify parameters.&lt;/p></description></item><item><title>Pill: Create an environment in an AzDo pipeline</title><link>https://www.codewrecks.com/post/azdo/pills/create-environment-on-pipeline/</link><pubDate>Tue, 19 Mar 2024 08:10:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/pills/create-environment-on-pipeline/</guid><description>&lt;p>Scenario: We have to create a new environment for a new customer, and an environment consists of some resources on Azure, plus &lt;strong>an environment in azure DevOps to use with deploy pipeline&lt;/strong>. Since we are deploying with Azure DevOps pipeline, it makes sense to create everything for new customer environment with another pipeline.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">stages&lt;/span>: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">stage&lt;/span>: &lt;span style="color:#ae81ff">create_environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">job&lt;/span>: &lt;span style="color:#ae81ff">create_environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">displayName&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Create environment if not present&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pool&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">vmImage&lt;/span>: &lt;span style="color:#ae81ff">windows-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">powershell&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> write-Host &amp;#34;We are about to create the environment with api if not present&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # Need to create the token in basic auth
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $AuthHeaders = @{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;Authorization&amp;#34; = &amp;#39;Basic &amp;#39; + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(&amp;#34;:$(AccessToken)&amp;#34;)) 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;Content-Type&amp;#34; = &amp;#34;application/json&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $listEnvironment = Invoke-RestMethod -uri &amp;#34;https://dev.azure.com/org/teamproject/_apis/distributedtask/environments?api-version=7.1-preview.1&amp;#34; -Headers $AuthHeaders
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # Now check if some of the environment already was present in the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> $envExisting = $listEnvironment.value | Where-Object { $_.name -eq &amp;#34;$(customer_fullname)&amp;#34; }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> if ($envExisting) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> Write-Host &amp;#34;The environment already exists&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> exit 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> } 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span>&lt;span style="color:#e6db74"> # Create an environment because it does not exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $createEnvPayload = @{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name = &amp;#34;$(customer_fullname)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> description = &amp;#34;Created by pipeline&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> } | ConvertTo-Json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> $createUri = &amp;#34;https://dev.azure.com/org/teamproject/_apis/distributedtask/environments?api-version=7.1-preview.1&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Invoke-RestMethod -uri $createUri -method POST -Headers $AuthHeaders -Body $createEnvPayload&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see the stage contains a job that is used to create an environment. This is based on a secret contained in the pipeline called &lt;code>AccessToken&lt;/code> that is &lt;strong>used to authenticate to Azure DevOps REST API&lt;/strong>. The script is quite simple, it first retrieves the list of environments and then checks if the environment is already present. If it is not present, it creates a new environment with a simple POST request to the REST API of Azure DevOps.&lt;/p></description></item><item><title>More secure Azure DevOps Pipelines API connection thanks to OAuth Tokens</title><link>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-use-oauth2-tokens/</link><pubDate>Sun, 19 Mar 2023 07:12:42 +0200</pubDate><guid>https://www.codewrecks.com/post/azdo/api/reschedule-pr-check-use-oauth2-tokens/</guid><description>&lt;p>In a previous blog post, I discussed how to reschedule the check of a pull request using a simple PowerShell script within an Azure DevOps pipeline. This time, &lt;strong>I&amp;rsquo;ll explain how to avoid using Personal Access Tokens for authentication&lt;/strong> and switch to a more secure alternative.&lt;/p>
&lt;p>The issue with Personal Access Tokens is that they are bearer token, which means &lt;strong>if they&amp;rsquo;re lost or accidentally leaked in logs, anyone with access to the token can use it to access your services&lt;/strong>. To address this problem, it&amp;rsquo;s better to use a specific Personal Access Token with the minimum required scopes. For instance, if you only need to reschedule Pull Requests checks, grant the token only pull request and build access. This limits the potential damage if the token falls into the wrong hands.&lt;/p></description></item><item><title>Quickly create a test instance of KeyCloak in Azure Services</title><link>https://www.codewrecks.com/post/security/start-keycloak-test-instance-in-azure-services/</link><pubDate>Mon, 07 Nov 2022 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/start-keycloak-test-instance-in-azure-services/</guid><description>&lt;p>&lt;a href="https://www.keycloak.org/">Keycloak&lt;/a> is a leader in the landscape of Identity Provider and if you need a quick instance &lt;strong>for dev testing, you can spin an instance in Azure App Services in less than a minute&lt;/strong>.&lt;/p>
&lt;p>First of all creates a new Azure App Services and choose to use Docker&lt;/p>
&lt;p>&lt;a target="_blank" href="../images/keycloak-app-services.png"> &lt;img src="../images/keycloak-app-services.png" alt="Create a docker based app service" />&lt;/a>
&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Create a docker based app service.&lt;/em>&lt;/p>
&lt;p>Now you can simply choose &lt;strong>the image you want to run, jboss/keycloak&lt;/strong> is perfectly ok for my scenario.&lt;/p></description></item><item><title>Configure Data Protection API in .NET Core</title><link>https://www.codewrecks.com/post/security/asp-net-core-data-protection-api/</link><pubDate>Thu, 03 Nov 2022 16:00:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/asp-net-core-data-protection-api/</guid><description>&lt;p>Asp.NET core and .NET core comes with a nice interface to handle encryption, as &lt;a href="https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/using-data-protection">documented here&lt;/a>. Now my goal is configuring data protection api for multiple instance of a software, so we need to &lt;strong>share keys in a shared location and at the same time keep them secret&lt;/strong>. Luckily enough .NET core already has everything we need.&lt;/p>
&lt;p>The overall solution will need two parameter to our program, &lt;strong>Folder where to store keys and a certificate thumbprint to protect the keys&lt;/strong>. In my scenario I want to use Self Signed Certificate, because I&amp;rsquo;m not using TLS or other form of server side encryption, I only need an extra layer of protection &lt;strong>to allow reading keys only from machines that have my certificate installed&lt;/strong>. First of all I need some code to generate a Self Sign Certificate, to simplify installation I simply want IT guy to use swagger interface to generate a self signed certificate and then install in all the machine he/she needs.&lt;/p></description></item><item><title>Accessing Office 365 with IMAP and OAuth2</title><link>https://www.codewrecks.com/post/security/accessing-office-365-imap-with-oauth2/</link><pubDate>Mon, 01 Aug 2022 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/accessing-office-365-imap-with-oauth2/</guid><description>&lt;h1 id="the-situation">The situation&lt;/h1>
&lt;p>I&amp;rsquo;ve had the need to upgrade some code that uses IMAP folder to download email, and it uses sometimes Office365 accounts, but Microsoft &lt;strong>will remove in the future basic auth &lt;a href="https://docs.microsoft.com/en-us/exchange/clients-and-mobile-in-exchange-online/deprecation-of-basic-authentication-exchange-online">as described here&lt;/a> in favor of OAuth2 based authentication.&lt;/strong> This is a good move because Basic Auth is not really secure, and with modern authentication and OAuth2 you can &lt;strong>force two factor auth and other more secure login alternative&lt;/strong>.&lt;/p></description></item><item><title>Developers and TLS what could possibly go wrong</title><link>https://www.codewrecks.com/post/security/developers-and-tls/</link><pubDate>Sat, 30 Apr 2022 08:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/developers-and-tls/</guid><description>&lt;h1 id="the-problem-of-not-using-tls-in-developer-machines">The problem of not using TLS in developer machines&lt;/h1>
&lt;p>Lots of time ago, at the time Windows Communication Foundation was a thing, there were good &lt;strong>automatic protections by Microsoft that prevent passing credentials in clear text over an unencrypted (non TLS) channel&lt;/strong>. I was amazed by the number of solution you can find in the internet that to solve the problem suggests to developer to create an &lt;strong>unsecure channel that does not perform this check, allowing for clear text credential to be sent in a standard HTTP channel&lt;/strong>.&lt;/p></description></item><item><title>How to handle certificate error in dotnet WebClient object</title><link>https://www.codewrecks.com/post/security/handle-certificate-errors-in-dotnet-webclient/</link><pubDate>Fri, 18 Mar 2022 08:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/handle-certificate-errors-in-dotnet-webclient/</guid><description>&lt;h2 id="the-situation">The situation&lt;/h2>
&lt;p>This is a simple scenario: I use a WebClient object in .NET to perform some web request to a target web site, everything went good except when the code runs in Xamarin Android, &lt;strong>where it throws an exception in https connection&lt;/strong>. This is usually a puzzling moment, because I&amp;rsquo;m simply doing an HTTP GET request of a page, everything works outside Xamarin where all I got in response is an error telling me that the certificate is not ok.&lt;/p></description></item><item><title>GitHub Security enforcer action</title><link>https://www.codewrecks.com/post/github/security-enforcer/</link><pubDate>Fri, 10 Dec 2021 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/github/security-enforcer/</guid><description>&lt;p>GitHub takes &lt;a href="https://www.codewrecks.com/post/security/github-security-scanning/">security seriously&lt;/a> and gives you some nice capabilities to &lt;strong>improve security of your code through all its lifecycle&lt;/strong>. GitHub actions can be used to automatically run a security code analysis in your repositories, a task that should be run for &lt;strong>all of your repositories in your organization&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Security scanning should be enabled on all repositories&lt;/p>&lt;/blockquote>
&lt;p>Some days ago in a &lt;a href="https://github.blog/2021-11-22-accelerate-security-adoption-in-your-organization/">GitHub blog post&lt;/a> a new action was announced called &lt;a href="https://github.com/marketplace/actions/advanced-security-enforcer#example-workflow">Advanced-Security-Enforcer&lt;/a> that is aimed &lt;strong>to automate the task of adding GitHub Workflow to perform code analysis&lt;/strong>.&lt;/p></description></item><item><title>TryHackMe Writeup: Daily Bugle</title><link>https://www.codewrecks.com/post/security/writeups/daily-bugle/</link><pubDate>Sat, 20 Nov 2021 08:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/writeups/daily-bugle/</guid><description>&lt;p>Security is one of my side passion on computer engineering, and if you also like security, &lt;a href="https://tryhackme.com/">Try Hack Me&lt;/a> is a nice place to keep under your radar. This morning I had some fun with &lt;a href="https://tryhackme.com/room/dailybugle">Daily Bugle machine&lt;/a> so I decided to publish my raw writeup.&lt;/p>
&lt;h2 id="scan-the-machine">Scan the machine&lt;/h2>
&lt;p>A standard NMap reveals ssh and port 80 opened hosting a nice joomla web site. If you do not want to be especially stealthy, you can let nmap test for vulnerability with standard script, nothing special.&lt;/p></description></item><item><title>GitHub security scan - an example</title><link>https://www.codewrecks.com/post/security/github-security-scanning/</link><pubDate>Sat, 17 Jul 2021 15:10:00 +0200</pubDate><guid>https://www.codewrecks.com/post/security/github-security-scanning/</guid><description>&lt;p>I&amp;rsquo;ve already blogged &lt;a href="https://www.codewrecks.com/post/github/code-scanning-result/">on the security scanning capability offered by GitHub&lt;/a> and in this post I want to give you another example on a possible output. In previous example I&amp;rsquo;ve shown a result that is quite simple &lt;strong>the library identified a usage of ECB in AES encryption and flagged it as a wrong usage of crypto api&lt;/strong>. It is interesting but less impressive, after all it simply spotted the usage of an enum value related to a vulnerable CypherMode, something that it easy to spot.&lt;/p></description></item><item><title>Playing with Cryptography, Part 1</title><link>https://www.codewrecks.com/post/security/playing-with-cryptography-part1/</link><pubDate>Sat, 17 Jul 2021 09:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/playing-with-cryptography-part1/</guid><description>&lt;p>Cryptography is a fascinating subject, surely complex, but as a developer you probably have some &lt;strong>predefined libraries in your language/environment of choice that you can use&lt;/strong>. DotNet is not an exception, so I&amp;rsquo;ve decided to create a sample repository to play a little bit with all cryptography primitives to show how easy is to use them &lt;a href="https://github.com/alkampfergit/DotNetCoreCryptography">https://github.com/alkampfergit/DotNetCoreCryptography&lt;/a>.&lt;/p>
&lt;p>This is not a tutorial, it is more a repository where I played with API to gain more confidence with &lt;strong>.Net Core version of the API&lt;/strong>. The purpose is also to understand if you can &lt;strong>wrap Crypto API to make them simple to use for a developer, avoiding people to use them in different ways across a same software and to make them simpler to use&lt;/strong>.&lt;/p></description></item><item><title>Security Onion 2020 - The hunt</title><link>https://www.codewrecks.com/post/security/security-onion-hunt/</link><pubDate>Sun, 03 Jan 2021 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/security-onion-hunt/</guid><description>&lt;p>I&amp;rsquo;ve done another couple of videos about &lt;a href="https://securityonionsolutions.com/">Security Onion&lt;/a> focusing on how I can use &lt;em>&lt;strong>The hunt to look for anomalies in network traffic&lt;/strong>&lt;/em>. As for the previous video I give a disclaimer: I&amp;rsquo;m not a Security Onion expert, and those video are meant to keep track of my progress and to &lt;strong>help others to familiarize with the tool&lt;/strong>.&lt;/p>
&lt;p>In first video I start from an alert from &lt;a href="https://github.com/target/strelka">Strelka&lt;/a> and then proceed to &lt;strong>identify possible compromised machine in the network as well as finding external malicious IPs&lt;/strong>.&lt;/p></description></item><item><title>Kali Linux in Hyper-V system</title><link>https://www.codewrecks.com/post/security/kali-linux-in-hyper-v/</link><pubDate>Wed, 30 Dec 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/kali-linux-in-hyper-v/</guid><description>&lt;h2 id="kali-linux-on-windows">Kali Linux on Windows&lt;/h2>
&lt;p>Most of the time a &lt;a href="https://www.codewrecks.com/post/security/kali-linux-in-wsl2/">Kali Linux instance running in WSL&lt;/a> is more than enough to have some fun in a Windows box. Using WSL is really simple but &lt;strong>I have a couple of annoying problems that make my experience uncomfortable.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>UI experience is sluggish, and annoying&lt;/li>
&lt;li>I have very little control over networking.&lt;/li>
&lt;/ol>
&lt;p>Point 2 is the major pain point in my situation, I usually buy some inexpensive &lt;a href="https://www.codewrecks.com/post/security/kali-linux-in-wsl2/">Intel i350 T2 cards&lt;/a> on Ebay, to allow me to have &lt;strong>at least three Network Card on my workstation&lt;/strong>. If you wonder why I like three NICs here is my typical usage pattern.&lt;/p></description></item><item><title>Security onion in Hyper-V</title><link>https://www.codewrecks.com/post/security/security-onion-hyper-v/</link><pubDate>Sat, 05 Dec 2020 11:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/security-onion-hyper-v/</guid><description>&lt;p>If you want to setup a real lab to test Network Security Monitor solution, like &lt;a href="https://securityonionsolutions.com/">Security Onion&lt;/a> probably you will start with some &lt;strong>virtual machine where to install everything&lt;/strong>. While we can agree that VmWare is probably the best solution (I have a test ESXi node) Hyper-V can be a viable solution, but you need to be aware of some glitches.&lt;/p>
&lt;blockquote>
&lt;p>Most of the information I&amp;rsquo;ve found in internet are outdated and probably not valid for Windows Server 2019, as you can see in &lt;strong>Figure 2&lt;/strong>. Hope this post can save time to others that have my same problem.&lt;/p></description></item><item><title>Use multiple techniques to protect your data</title><link>https://www.codewrecks.com/post/security/protect-data-with-multiple-technique/</link><pubDate>Sat, 12 Sep 2020 08:00:00 +0200</pubDate><guid>https://www.codewrecks.com/post/security/protect-data-with-multiple-technique/</guid><description>&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>Several years ago I had a friend called me for a problem with MongoDb, it turns out that &lt;strong>someone, from an IP geolocated in China, accessed the instances during the night and wiped out everything&lt;/strong>.&lt;/p>
&lt;p>The problem was due to some misconfiguration or human error or whatever that:&lt;/p>
&lt;ol>
&lt;li>turned off Windows firewall and port 27017 was open to the internet&lt;/li>
&lt;li>MongoDb was installed with no password.&lt;/li>
&lt;li>MongoDb was bound to all ip addresses of the machine&lt;/li>
&lt;/ol>
&lt;p>When it is time to protect your data, you &lt;strong>should add as many layers / techniques of protection as you can&lt;/strong>, this because, if one if them is failing, another one can still offer protection.&lt;/p></description></item><item><title>Double T shaped professional</title><link>https://www.codewrecks.com/post/general/double-t-shaped-professional/</link><pubDate>Mon, 10 Aug 2020 18:40:00 +0200</pubDate><guid>https://www.codewrecks.com/post/general/double-t-shaped-professional/</guid><description>&lt;p>The term T-Shaped Professional or T-Shaped Skills is widely used to identify a person that has a good deep knowledge in a specific area and a broad knowledge on other areas.&lt;/p>
&lt;p>This kind of professional &lt;strong>is perfect to fit into DevOps culture, because it can collaborate better with others in the team&lt;/strong>. As an example, a front-end Developer usually has the leg of his T in web technologies (angular, Typescript, HTML, etc.) but he should also have a little bit of knowledge on backend development, networking and others. The same happens for other roles in the team, a Network Engineer has a deep knowledge of network infrastructure, but he/she should have some knowledge on Database, Development and web framework to communicate better with others.&lt;/p></description></item><item><title>Danger of public IPs</title><link>https://www.codewrecks.com/post/security/danger-of-public-ip/</link><pubDate>Thu, 16 Jul 2020 10:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/danger-of-public-ip/</guid><description>&lt;p>This morning I come across &lt;a href="https://www.comparitech.com/blog/vpn-privacy/ufo-vpn-data-exposure/">this article about another data exposure&lt;/a> and I could not avoid to notice that it is &lt;strong>another Elasticsearch exposed to the public&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>894 GB of data was stored in an unsecured Elasticsearch cluster.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Due to personnel changes caused by COVID-19, we’ve not found bugs in server firewall rules immediately, which will lead to the potential risk of being hacked. And now it has been fixed.&lt;/p></description></item><item><title>Access your azure VM with Azure Bastion</title><link>https://www.codewrecks.com/post/azure/azure-bastion/</link><pubDate>Sat, 11 Jul 2020 10:45:18 +0200</pubDate><guid>https://www.codewrecks.com/post/azure/azure-bastion/</guid><description>&lt;p>There are lots of reasons to use a classic VM in Azure, even if PAAS is the preferred way to approach the cloud, IAAS is still strong especially because not every product is ready to run on cloud providers.&lt;/p>
&lt;p>If you have the need to create a standard VM, both Linux or Windows, you probably want an access with SSH or RDP to configure and manage it and &lt;strong>using a public address is probably the quickest, but less secure way, to do it.&lt;/strong>&lt;/p></description></item><item><title>Principle of least privilege</title><link>https://www.codewrecks.com/post/security/principle-of-least-privilege/</link><pubDate>Sat, 04 Jul 2020 08:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/principle-of-least-privilege/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/post/security/validate-user-input-4/">Validate User Input part 4&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/">Do not disclose errors to the User part 5&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="a-brief-recap">A brief recap&lt;/h2>
&lt;p>Let&amp;rsquo;s return to the beginning, the very first version of the vulnerable function.&lt;/p></description></item><item><title>Do Not Disclose Errors to the User</title><link>https://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/</link><pubDate>Fri, 03 Jul 2020 22:13:30 +0200</pubDate><guid>https://www.codewrecks.com/post/security/do-not-disclose-error-to-the-user/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://localhost:1313/post/security/validate-user-input-4/">Validate User Input part 4&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>In the last post we analyzed how it is not fully possible to limit user input in some functions like search. The user could almost search for every character and it is not easy to impose a maximum length. Nevertheless &lt;strong>imposing a maximum length of the string to 50 characters seems to break Sql Injection.&lt;/strong>&lt;/p></description></item><item><title>Use Kali linux in Windows Subsystem for Linux</title><link>https://www.codewrecks.com/post/security/kali-linux-in-wsl2/</link><pubDate>Fri, 26 Jun 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/kali-linux-in-wsl2/</guid><description>&lt;h2 id="kali-linux-on-windows">Kali Linux on Windows&lt;/h2>
&lt;p>Thanks to the new Windows Subsystem for Linux version 2, shortly called WSL2, we have now &lt;strong>a real Linux kernel running in a real VM as the core of WSL&lt;/strong>. This allows finally to use Kali Linux in WSL environment; if you tried in WSL you probably encountered some errors with network tools like NMap. With WSL2 everything seems to run just fine giving you a &lt;em>quick way to have a Kali Linux running in your Windows system&lt;/em> while having full integration between file systems.&lt;/p></description></item><item><title>Play security in a secure environment</title><link>https://www.codewrecks.com/post/security/play-security-in-a-secure-environment/</link><pubDate>Sat, 23 May 2020 10:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/play-security-in-a-secure-environment/</guid><description>&lt;p>&lt;strong>Security is one of my long passions&lt;/strong>, I’ve spent lots of time on C++ and Assembly (both x86 and other architectures) and in that environment I&amp;rsquo;ve started exploring buffer overflow and other vulnerabilities. Over the course of years security remained only a passion and not my primary skill, but I spent constantly a little amount of time on it through the years.&lt;/p>
&lt;p>When it is time to study offensive security, it is quite common to &lt;strong>download and install test vulnerable Virtual Machines to test some offensive strategies&lt;/strong> and I’m quite surprised that most of the online tutorial simply tells you to use Virtual Box (sometimes VmWare workstation), in a very basic way and completely avoid exploring more advanced scenarios.&lt;/p></description></item><item><title>Validate User Input Step 4</title><link>https://www.codewrecks.com/post/security/validate-user-input-4/</link><pubDate>Sun, 26 Apr 2020 20:14:37 +0200</pubDate><guid>https://www.codewrecks.com/post/security/validate-user-input-4/</guid><description>&lt;p>This is the fourth article in a series of post dealing on why it is important to strictly validate user input.&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">Do not trust user input part 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">Do not trust user input part 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.codewrecks.com/blog/index.php/2020/02/19/do-not-trust-user-input-part-3/">Do not trust user input part 3&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>In this fourth part I will examine another problematic piece of code, obviously vulnerable to sql injection: an API to search in products.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="background-color:#3c3d38">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[SwaggerResponse(typeof(IEnumerable&amp;lt;Product&amp;gt;))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[HttpGet]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[MapToApiVersion(&amp;#34;1.0&amp;#34;)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> IActionResult SearchProducts(String searchString)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#3c3d38">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> query = DataAccess.CreateQuery(&lt;span style="color:#e6db74">$&amp;#34;Select * from dbo.Products where productName like &amp;#39;%{searchString}%&amp;#39;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> products = query.ExecuteBuildEntities&amp;lt;Product&amp;gt;(Product.Builder);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(products);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>As you can see, leaving user input flow unconstrained in your business logic, where it is used to create a SQL query with string concatenation is a bad idea. &lt;strong>You can simply fire SQLMAP to test the API and you can verify that it&amp;rsquo;s indeed vulnerable.&lt;/strong>&lt;/p></description></item><item><title>Strange Error uploading artifacts in Azure DevOps pipeline</title><link>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline-2/</link><pubDate>Sat, 11 Apr 2020 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/04/strange-error-uploading-artifacts-in-azure-devops-pipeline-2/</guid><description>&lt;p>I have a library that is entirely written in.NET core that deal with some self signed X509 certificates used to encrypt and digitally sign some data. Software runs perfectly and is composed by a server and client part.&lt;/p>
&lt;p>&lt;strong>At a certain point we decided that the client should be used not only by software that runs.NET core, but also software with full framework&lt;/strong> , so I’ve changed target framework to target both netstandard 2.0 and full framework 4.6.1, everything compiles perfectly, tests run fine, everything seems to be green. The problem is that unit test project ran tests only with.NET Core, so I was not exercising tests in full framework.&lt;/p></description></item><item><title>Do not trust user input part 3</title><link>https://www.codewrecks.com/post/old/2020/02/do-not-trust-user-input-part-3/</link><pubDate>Wed, 19 Feb 2020 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/02/do-not-trust-user-input-part-3/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/29/do-not-trust-user-input-part-2/">part 2&lt;/a> we continued our journey to prevent malicious users to receive dangerous data, limiting customer id to be a 5 letters string value. We have two aspect to improve because usually I got 2 complains when I show that code.&lt;/p>
&lt;p>First one: &lt;strong>Customer object, has a composite id, serialized value is somewhat clumsy to access from client code&lt;/strong> as you can see in &lt;strong>Figure 1&lt;/strong>. Second: if you forget to create a CustomerId from value passed from the user, you are still victim of SQL Injection.&lt;/p></description></item><item><title>Do not trust user input part 2</title><link>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-part-2/</link><pubDate>Wed, 29 Jan 2020 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-part-2/</guid><description>&lt;p>After we fixed our code in &lt;a href="http://www.codewrecks.com/blog/index.php/2020/01/28/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/">part 1&lt;/a> of this serie, we continue to expand our API adding a method to select  a Customer. Northwind database Customer table has an id of type string, so we could start with this very bad, bad, bad piece of code.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image-11.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image_thumb-11.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2020/01/image_thumb-11.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>Another bad example of API vulnerable with Sql Injection&lt;/em>&lt;/p>
&lt;p>Again the question is: what is the most critical error in that piece of code? If you answer “Query with string concatenation” probably you are wrong. Indeed that is a huge problem, but &lt;strong>in my mind is accepting a string from the user is still the number one problem&lt;/strong>.&lt;/p></description></item><item><title>Do not trust user input</title><link>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/</link><pubDate>Tue, 28 Jan 2020 21:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/do-not-trust-user-input-enforce-whitelists-narrow-allowable-input/</guid><description>&lt;p>It is time to start blogging a little bit about security, because injection is still high in OWASP TOP 10 and this implies that &lt;strong>people still trust their users&lt;/strong>. Remember, you should not trust your users, never, never, never, because for 10.000 good users there could be 1 bad user, and he/she is enough to damage your organization.&lt;/p>
&lt;p>Here you have a really bad, bad, bad, bad, piece of code that is meant to allow product retrieval from northwind database Products table.&lt;/p></description></item><item><title>Why I love DevOps and hate DevSecOps</title><link>https://www.codewrecks.com/post/old/2020/01/why-i-love-devops-and-hate-devsecops/</link><pubDate>Sat, 18 Jan 2020 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2020/01/why-i-love-devops-and-hate-devsecops/</guid><description>&lt;p>DevOps is becoming a buzzword, it makes hype and everyone want to be part of it, even if he/she does not know exactly what DevOps is. &lt;strong>One of the symptoms of this is the “DevOpsEngineer”, a title that does not fit in my head.&lt;/strong> We could debate for days or years on the right definition of DevOps, but essentially is a &lt;em>cultural approach on building software focused on building the right thing with the maximum quality and satisfaction for the customer.&lt;/em>&lt;/p></description></item><item><title>Check for Malware in a Azure DevOps Pipeline</title><link>https://www.codewrecks.com/post/old/2019/12/check-for-malware-in-a-azure-devops-pipeline/</link><pubDate>Sat, 14 Dec 2019 09:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/12/check-for-malware-in-a-azure-devops-pipeline/</guid><description>&lt;p>In a previous post I’ve showed &lt;a href="http://www.codewrecks.com/blog/index.php/2019/11/23/quick-peek-at-microsoft-security-code-analysis-credential-scanner/">Credential Scanner&lt;/a>, a special task part of &lt;a href="https://secdevtools.azurewebsites.net/">Microsoft Security Code Analysis&lt;/a> available in Azure, today &lt;strong>I want to have a quick peek at&lt;/strong> &lt;a href="https://secdevtools.azurewebsites.net/helpantimalware.html">&lt;strong>Anti Malware scanner task.&lt;/strong>&lt;/a>&lt;/p>
&lt;p>First of all a simple consideration: I’ve been asked several times if there is any need to have an AntiVirus or AntiMalware tools in build machines, after all the code that is build is developed by own developer, so there should be no need of such tools, right? In my opinion this is a false assumption, here is some quick consideration on how a malware can be downloaded in your build machine&lt;/p></description></item><item><title>BruteForcing login with Hydra</title><link>https://www.codewrecks.com/post/old/2019/11/bruteforcing-login-with-hydra/</link><pubDate>Fri, 29 Nov 2019 18:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/bruteforcing-login-with-hydra/</guid><description>&lt;p>Without any doubt, Hydra is one of the best tool to bruteforce passwords. It has support for many protocols, but &lt;strong>it can be used with standard web sites as well forcing a standard POST based login&lt;/strong>. The syntax is a little bit different from a normal scan, like SSH and is similar to this cmdline.&lt;/p>
&lt;p>./hydra -l username -P x:\temp\rockyou.txt hostname –s port http-post-form “/loginpage-address:user=^USER^&amp;amp;password=^PASS^:Invalid password!”&lt;/p>
&lt;p>Dissecting the parameters you have&lt;/p></description></item><item><title>Security in 2019 still unprotected ElasticSearch instance exists</title><link>https://www.codewrecks.com/post/old/2019/11/security-in-2019-still-unprotected-elasticsearch-instance-exists/</link><pubDate>Sun, 24 Nov 2019 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/11/security-in-2019-still-unprotected-elasticsearch-instance-exists/</guid><description>&lt;p>I’ve received today a notification from &lt;a href="https://haveibeenpwned.com/" title="https://haveibeenpwned.com/">https://haveibeenpwned.com/&lt;/a> because one of my emails was present in a data breach.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image-23.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image_thumb-23.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/11/image_thumb-23.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>Ok, it happens, but two things disturbed me, the first is that I really never heard of those guys (People Data Labs), this because they are one of the companies that harvest public data from online sources, aggregates them and re-sell as “Data enrichment”. This means that they probably have only public data on me. &lt;strong>If you are interested you can read article by Troy Hunt&lt;/strong> &lt;a href="https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/" title="https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/">&lt;strong>https://www.troyhunt.com/data-enrichment-people-data-labs-and-another-622m-email-addresses/&lt;/strong>&lt;/a> &lt;strong>on details about this breach.&lt;/strong> &lt;strong>But the second, and more disturbing issue is that, in 2019, still people left ElasticSearch open and unprotected in the wild.&lt;/strong> This demonstrates really low attention about security, especially in situation where you have Elasticsearch on server that have a public exposure. It is really sad to see that Security is still a second citizen in software development, if not, such trivial errors would not be done.&lt;/p></description></item><item><title>GitHub security Alerts</title><link>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</link><pubDate>Tue, 22 Oct 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/10/github-security-alerts/</guid><description>&lt;p>I really love everything about security and I’m really intrigued by GitHub security tab that is now present on you repository. In your project usually it is disabled by default.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image-44.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2019/10/image_thumb-44.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Figure 1&lt;/strong>&lt;/em>: &lt;em>GitHub Security tab on your repository&lt;/em>&lt;/p>
&lt;p>&lt;strong>If you enable it you start receiving suggestion based on code that you check in on the repository&lt;/strong> , as an example, GitHub will scan your npm packages source to find dependencies with libraries that are insecure.&lt;/p></description></item><item><title>Exploiting VulnHub Tr0ll2 machine</title><link>https://www.codewrecks.com/post/old/2019/09/exploiting-vulnhub-tr0ll2-machine/</link><pubDate>Wed, 18 Sep 2019 20:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/09/exploiting-vulnhub-tr0ll2-machine/</guid><description>&lt;p>This is an unusual post, it deal on how I exploited &lt;a href="https://www.vulnhub.com/entry/tr0ll-2,107/">Tr0ll2 machine of vulnhub.&lt;/a> Practicing with real machine helps you to put in practice some of the stuff you learn on security. It was a real long time (almost 20 years) that I do not immerse myself in security, doing some exercise on the machine is good to spent some hours :).&lt;/p>
&lt;p>I run all the machine in VMWare esxi servers, in an isolated network, behind a router and a firewall with a DNS on my kali linux machine. I’m pretty cautious when I run some machine in my network so &lt;strong>it is always good for me to have a complete separate network, completely isolated from my real work network&lt;/strong>. Thanks to VmWare I can simply use the console to access the machine even if cannot contact directly through the network.&lt;/p></description></item><item><title>Azure DevOps and SecDevOps</title><link>https://www.codewrecks.com/post/old/2019/05/azure-devops-and-secdevops/</link><pubDate>Sun, 19 May 2019 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2019/05/azure-devops-and-secdevops/</guid><description>&lt;p>One of the cool aspect of Azure DevOps is the extendibility through marketplace api, and for security you can find a nice marketplace addin called Owasp ZAP (&lt;a href="https://marketplace.visualstudio.com/items?itemName=kasunkodagoda.owasp-zap-scan">https://marketplace.visualstudio.com/items?itemName=kasunkodagoda.owasp-zap-scan&lt;/a>) that can be used to automate OWASP test for web application.&lt;/p>
&lt;p>You can also check this nice article in MSDN &lt;a href="https://devblogs.microsoft.com/premier-developer/azure-devops-pipelines-leveraging-owasp-zap-in-the-release-pipeline/">https://devblogs.microsoft.com/premier-developer/azure-devops-pipelines-leveraging-owasp-zap-in-the-release-pipeline/&lt;/a> that explain how you can leverage OWASP ZAP analysis during a deploy with release pipeline.&lt;/p>
&lt;p>REally good stuff to read / use.&lt;/p></description></item><item><title>Using vmWare machine when you have Hyper-V</title><link>https://www.codewrecks.com/post/old/2018/10/using-vmware-machine-when-you-have-hyper-v/</link><pubDate>Wed, 03 Oct 2018 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/10/using-vmware-machine-when-you-have-hyper-v/</guid><description>&lt;p>There are lots of VM containing Demo, Labs etc around the internet and surely Hyper-V is not the primary target as virtualization system. This because it is present on desktop OS only from Windows 8, it is not free (present in windows professional) and bound to windows. If you have to create a VM to share in internet, 99% of the time you want to target vmWare or Virtual Box and a linux guest system (no license needed). Since Virtual Box can run vmWare machine with little problem, vmWare is de-facto the standard in this area.&lt;/p></description></item><item><title>The Dreadful IIS Loopback Check</title><link>https://www.codewrecks.com/post/old/2018/09/the-dreadful-iis-loopback-check/</link><pubDate>Wed, 26 Sep 2018 19:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/09/the-dreadful-iis-loopback-check/</guid><description>&lt;p>This is something that from times to times bites me, both as TFS Consultant and when I’m developing code. The problem is the following: &lt;strong>you have a site hosted with IIS in the computer you are logged in, the site has windows authentication, but you cannot login using a FQDN, but only with localhost.&lt;/strong> This is a Security Feature, because it avoid a &lt;a href="https://en.wikipedia.org/wiki/Reflection_attack">reflection attack&lt;/a> if the machine gets compromised. Sometimes this is annoying when you develop, because you are usually using your IIS machine to host site while you are developing, accessing it with localhost; then it is necessary to verify that everything works with real site names. For this reason I usually modify my hosts file to create alias like &lt;a href="http://www.myproduct.local">www.myproduct.local&lt;/a> that points to 127.0.0.1 and here comes the problems.&lt;/p></description></item><item><title>Load Security Alerts in Azure Application Insight</title><link>https://www.codewrecks.com/post/old/2018/08/load-security-alert-in-azure-application-insight/</link><pubDate>Fri, 24 Aug 2018 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2018/08/load-security-alert-in-azure-application-insight/</guid><description>&lt;p>Security is one of the big problem of the modern web, business moved to web application and security become an important part of application development. One side of the problem is adding standard and proved procedure to avoid risk of basic attacks like SQL or NO SQL injection, but &lt;strong>big part of security was programmed at application level.&lt;/strong> If you are using SPA with some client framework like Angular and have business logic exposed with API, (Ex ASP NET Web API), you cannot trust the client, thus &lt;strong>you need to validate every server call for authorization and authentication.&lt;/strong> &amp;gt; &lt;strong>When API layer is exposed to a web application it is one of the preferred attack surfaces for your application. Never ever trust your UI logic to protect from malicious calls&lt;/strong> One of the most typical attack is forging calls to your API layer, a task that can be automated with tools like BURP Suite or WAPT and it is a major source of problem. As an example, if you have some administrative page where you grant or deny claim to users, it is imperative that every call should be accepted only if the authenticated user is an administrator of the system. &lt;strong>Application logic can become complicated, as an example you can have access to a document because it is linked to an offer made in France and you are the Area Manager for France.&lt;/strong> The more security logic is complex the more you should test it, but you probably cannot cover 100% of the situations.&lt;/p></description></item><item><title>How to security expose my test TFS on the internet</title><link>https://www.codewrecks.com/post/old/2017/09/how-to-security-expose-my-test-tfs-on-the-internet/</link><pubDate>Tue, 19 Sep 2017 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2017/09/how-to-security-expose-my-test-tfs-on-the-internet/</guid><description>&lt;p>I’m not a security expert, but I have a basic knowledge on the argument, so when it is time to expose my test TFS on the outside world I took some precautions. First of all this is a test TFS instance that is running in my test network, it is not a production instance and I need to access it only sometimes when I’m outside my network.&lt;/p>
&lt;p>Instead of mapping 8080 port on my firewall I’ve deployed a Linux machine, enabled SSH and added google two factor authentication, then I expose port 22 on another external port. Thanks to this, the only port that is exposed on my router is a port that remap on port 22 on my linux instance.&lt;/p></description></item><item><title>Using PAT to authenticate your tools</title><link>https://www.codewrecks.com/post/old/2016/10/using-pat-to-authenticate-your-tools/</link><pubDate>Sat, 15 Oct 2016 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2016/10/using-pat-to-authenticate-your-tools/</guid><description>&lt;p>&lt;strong>One of the strength point of VSTS / TFS is the extensibility through API&lt;/strong> , and now that we have a really nice set of REST API, it is quite normal to write little tools that interacts with your VSTS / TFS instances.&lt;/p>
&lt;p>&lt;strong>Whenever you write tools that interact with VSTS / TFS you need to decide how to authenticate to the server.&lt;/strong> While for TFS is quite simple because you can simply run the tool with Active Directory user and use AD integration, in VSTS integrating with your AD requires more work and it is not always a feasible solution.&lt;/p></description></item><item><title>Using certificate for SSH in Azure Linux VM</title><link>https://www.codewrecks.com/post/old/2015/10/using-certificate-for-ssh-in-azure-linux-vm/</link><pubDate>Tue, 13 Oct 2015 17:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/10/using-certificate-for-ssh-in-azure-linux-vm/</guid><description>&lt;p>If you like &lt;a href="http://www.codewrecks.com/blog/index.php/2015/10/10/using-certificate-to-connect-via-ssh-to-your-linux-machine/">to use certificate to connect via SSH to your Linux machine&lt;/a> you will probably use that technique to access all of your VMs, even those one hosted on Azure.&lt;/p>
&lt;p>This operation is really simple, because &lt;strong>Azure Portal allow you to specify the public key during VM creation&lt;/strong> and everything else is managed by VM Creation Scripts. In the same blade where you specify username and password you can opt in to use a certificate instead of a password. You should open the file with.pub extension you’ve created previously (with ssh-keygen) and paste full content in appropriate textbox.&lt;/p></description></item><item><title>How to add a user to Project Collection Service Account in TFS VSO</title><link>https://www.codewrecks.com/post/old/2015/10/how-to-add-a-user-to-project-collection-service-account-in-tfs-vso/</link><pubDate>Wed, 07 Oct 2015 15:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2015/10/how-to-add-a-user-to-project-collection-service-account-in-tfs-vso/</guid><description>&lt;p>VSO and TFS have a special group called: &lt;strong>Project Collection Service Account that has really powerful permission, and usually no user should be part of that group.&lt;/strong> There are specific circumstances, like running TFS Integration platform to move code to TFS, where the account used to access VSO needs to be part of this group to temporary have special permission.&lt;/p>
&lt;p>Sadly enough, &lt;strong>the UI does not allow you to directly add a user to that group&lt;/strong> , because the add button is disabled if you select that group.&lt;/p></description></item><item><title>Make easy storing secure password in TFS Build with DPAPI</title><link>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</link><pubDate>Tue, 22 Jul 2014 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2014/07/make-easy-storing-secure-password-in-tfs-build-with-dpapi/</guid><description>&lt;p>I’ve blogged some days ago on &lt;a href="http://www.codewrecks.com/blog/index.php/2014/07/12/store-secure-password-in-tfs-build-definition/">Securing the password in build definition&lt;/a>. I want to make a disclaimer on this subject. The technique described in that article permits you to use encrypted password in a build definition, but this password cannot be decrypted only if you have no access to the build machine. If you are a malicious user and you can schedule a build, you can simply * &lt;strong>schedule a new build that launch a custom script that decrypts the password and sends clear password by email or dump to the build output.&lt;/strong> *&lt;/p></description></item><item><title>Is there a reason to put restriction on password</title><link>https://www.codewrecks.com/post/old/2011/08/is-there-a-reason-to-put-restriction-on-password/</link><pubDate>Fri, 12 Aug 2011 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/08/is-there-a-reason-to-put-restriction-on-password/</guid><description>&lt;p>I&amp;rsquo;ve stumbled upon &lt;a href="http://xkcd.com/936/">this funny comic&lt;/a>&lt;/p>
&lt;p>&lt;a target="_blank" href="http://imgs.xkcd.com/comics/password_strength.png"> &lt;img src="http://imgs.xkcd.com/comics/password_strength.png" alt="External Image" />&lt;/a>&lt;/p>
&lt;p>I usually use long Random generated password, that I store in &lt;a href="http://keepass.info/">KeePass&lt;/a> for all services that I really care about, (home banking, amazon account that has my credit card, etc), and tend to use easy to remember password for services I do not care very much (stupid online games, or stuff like that).&lt;/p>
&lt;p>This funny comics suggests that choosing some four random common words can be a viable solution (complex to guess, but easy to remember), but sadly enough some online services does not permits you to use long password, or password that use special chars etc. My online banks forced me to choose a 10 digit number as the password o_O, another online service told me to use a password between 6 and 18 chars, but only letters, numbers are allowed, Another one forced me to use at leas one uppersize, and one digit, but limits the length to 20 chars, etc etc. My question is **why in the hell a service should limit my possibilities to choose a password I like?&lt;em>.&lt;/em>&lt;/p></description></item><item><title>How to check if a user belong to a certain role in ASPNet</title><link>https://www.codewrecks.com/post/old/2010/10/how-to-check-if-a-user-belong-to-a-certain-role-in-asp-net/</link><pubDate>Wed, 13 Oct 2010 14:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/10/how-to-check-if-a-user-belong-to-a-certain-role-in-asp-net/</guid><description>&lt;p>This question is really simple to answer&amp;hellip; or no? Suppose you need to verify, in a service, if the user belongs to the xxxx group, and then take a different path of execution if the condition is true.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (Roles.IsUserInRole(&lt;span style="color:#e6db74">&amp;#34;xxxx&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Ok, this seems such a piece of innocent code, but actually it caused me a bad bug. The reason is really simple, the same service is called from a program written in windows forms, (a windows service) and a web site. The programmer that is developing the web site, took the service and add that checks in one function, and I begin to get exception from the code of the service. The reason is clear Asp.Net roles and Membership are not configured in the windows program, nor I want to configure it.&lt;/p></description></item><item><title>Desiging a authentication layer with cryptoagility</title><link>https://www.codewrecks.com/post/old/2010/08/desiging-a-authentication-layer-with-cryptoagility/</link><pubDate>Mon, 30 Aug 2010 07:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/08/desiging-a-authentication-layer-with-cryptoagility/</guid><description>&lt;p>Today I was working a little bit on &lt;a href="http://dexterblogengine.codeplex.com/">Dexter&lt;/a>, and I&amp;rsquo;m trying to update the security system, the actual login system is based on a membership provider quite old, but I&amp;rsquo;d like to update it to be &lt;a href="http://msdn.microsoft.com/en-us/magazine/ee321570.aspx">CryptoAgile&lt;/a>. First of all here is the class UserDto (the name Dto should be changed because it is really a domain class but we are in the middle of a reorganization &lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/08/wlEmoticonsmile.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/08/wlEmoticonsmile.png" alt="Smile" />&lt;/a> so do not mind the name ) that has some methods to manage authentication.&lt;/p></description></item><item><title>Wcf over https authentication with aspnet membership</title><link>https://www.codewrecks.com/post/old/2009/11/wcf-over-https-authentication-with-asp-net-membership/</link><pubDate>Thu, 26 Nov 2009 16:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/wcf-over-https-authentication-with-asp-net-membership/</guid><description>&lt;p>In &lt;a href="http://www.codewrecks.com/blog/index.php/2009/11/25/wcf-over-secure-transport/">last article&lt;/a> I explained how to configure WCF to secure a service with https, with no authentication, now I want to show you the configuration needed to enable role and user membership using a standard asp.net provider.&lt;/p>
&lt;p>Here is the service definition on the server&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;service&lt;/span> &lt;span style="color:#a6e22e">behaviorConfiguration=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;WsHttpWithAuthBehavior&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyProject.DoSomethingService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;endpoint&lt;/span> &lt;span style="color:#a6e22e">address=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://mydomain.it/DoSomethingService.svc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wsHttpBinding&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyService&amp;#34;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bindingConfiguration=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wsHttps&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">contract=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;MyProject.IDoSomethingService&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;identity&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;dns&lt;/span> &lt;span style="color:#a6e22e">value=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mydomain.it&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/identity&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/endpoint&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;endpoint&lt;/span> &lt;span style="color:#a6e22e">address=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mex&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mexHttpsBinding&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">contract=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IMetadataExchange&amp;#34;&lt;/span> &lt;span style="color:#f92672">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/service&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin. http://dunnhq.com -->
&lt;p>the binding is wsHttpBinding, because we need to specify credentials, so we cannot use a basicHttpBinding, also the mex uses mexHttpsBinding because we are in https and not http. The interesting stuff is in the behavior and binding configuration.&lt;/p></description></item><item><title>Wcf over secure transport</title><link>https://www.codewrecks.com/post/old/2009/11/wcf-over-secure-transport/</link><pubDate>Wed, 25 Nov 2009 13:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/11/wcf-over-secure-transport/</guid><description>&lt;p>In some &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">older&lt;/a> &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/">posts&lt;/a>, I dealt with wcf configuration to manage authentication of a service with the asp.net &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">membership provider&lt;/a>.&lt;/p>
&lt;p>Now I need to modify configuration, because in another project, all the site is forced over https, and the configuration I used in the other project cannot be used anymore. In older post in fact, I explained how to send credentials over http with message security, using self issued certificates. Now I have transport security, so I can avoid the need to distribute certificates to people that will use the service.&lt;/p></description></item><item><title>Generate a certificate for Wcf service with windows server 2003</title><link>https://www.codewrecks.com/post/old/2009/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/</link><pubDate>Wed, 09 Sep 2009 06:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2009/09/generate-a-certificate-for-wcf-service-with-windows-server-2003/</guid><description>&lt;p>In the &lt;a href="http://www.codewrecks.com/blog/index.php/2009/09/08/use-aspnet-membership-provider-with-a-wcf-svc-service/">previous post&lt;/a>, I showed how to setup authentication with asp.net membership in wsHttpBinding for a Wcf server, and in that post I showed how to use the utility &lt;strong>makecert.exe&lt;/strong> to generate temporary certificates. In production environment you should generate certificates with a Certification Authority.&lt;/p>
&lt;p>If you search in the internet how to generate a certificate with windows server 2003 CA, you find very little information, here is how I did it.&lt;/p></description></item></channel></rss>