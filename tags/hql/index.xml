<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HQL on Codewrecks</title><link>https://www.codewrecks.com/tags/hql/</link><description>Recent content in HQL on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 23 Jul 2011 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/hql/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Sql Server Query Hints with NHibernate HQL and ICriteria</title><link>https://www.codewrecks.com/post/old/2011/07/use-sql-server-query-hints-with-nhibernate-hql-and-icriteria/</link><pubDate>Sat, 23 Jul 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/use-sql-server-query-hints-with-nhibernate-hql-and-icriteria/</guid><description>&lt;p>When you work with Big databases with many records and &lt;em>not uniform distribution of data into columns used for join or where conditions&lt;/em>, you can have really bad performance problem due to Query Plan caching. I do not want to give a deep explanation of this problem, you can find information &lt;a href="http://legeronline.blogspot.com/2009/03/evils-of-slow-paramaterized-query-plans.html">here&lt;/a>, but I want to outline the general problem to make clear what is happening.&lt;/p>
&lt;p>We can argue a lot why this problem happens in a database engine, but basically I have a really bad situation where the db stores data of multiple customers with really non uniform distribution of data (some of them have ~1000 rows for each table, others have ~100.000 rows in some of the tables).&lt;/p></description></item><item><title>Power of HQL - Condition on a collection</title><link>https://www.codewrecks.com/post/old/2010/03/power-of-hql-condition-on-a-collection/</link><pubDate>Tue, 09 Mar 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/03/power-of-hql-condition-on-a-collection/</guid><description>&lt;p>I have this piece of domain model.&lt;/p>
&lt;p>&lt;a href="https://www.codewrecks.com/blog/wp-content/uploads/2010/03/image.png">&lt;a target="_blank" href="https://www.codewrecks.com/blog/wp-content/uploads/2010/03/image_thumb.png"> &lt;img src="https://www.codewrecks.com/blog/wp-content/uploads/2010/03/image_thumb.png" alt="image" />&lt;/a>&lt;/a>&lt;/p>
&lt;p>The LinkResult class has a property called Link that point to a AnalyzedLink class that in turn has a collection of AnalyzedLinkExtClass called ExtData. All the relation are unidirectional, this means that there is nothing that bring me from AnalyzedLink to a linkResult and nothing that bring me from AnalyzedLinkExtData to the AnalyzedLink. This is the typical situation where doing complex query can be tricky&lt;/p></description></item></channel></rss>