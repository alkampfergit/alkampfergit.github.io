<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HQL on Codewrecks</title><link>https://www.codewrecks.com/tags/hql/</link><description>Recent content in HQL on Codewrecks</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 23 Jul 2011 08:00:37 +0200</lastBuildDate><atom:link href="https://www.codewrecks.com/tags/hql/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Sql Server Query Hints with NHibernate HQL and ICriteria</title><link>https://www.codewrecks.com/post/old/2011/07/use-sql-server-query-hints-with-nhibernate-hql-and-icriteria/</link><pubDate>Sat, 23 Jul 2011 08:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2011/07/use-sql-server-query-hints-with-nhibernate-hql-and-icriteria/</guid><description>When you work with Big databases with many records and not uniform distribution of data into columns used for join or where conditions, you can have really bad performance problem due to Query Plan caching. I do not want to give a deep explanation of this problem, you can find information here, but I want to outline the general problem to make clear what is happening.
We can argue a lot why this problem happens in a database engine, but basically I have a really bad situation where the db stores data of multiple customers with really non uniform distribution of data (some of them have ~1000 rows for each table, others have ~100.</description></item><item><title>Power of HQL - Condition on a collection</title><link>https://www.codewrecks.com/post/old/2010/03/power-of-hql-condition-on-a-collection/</link><pubDate>Tue, 09 Mar 2010 11:00:37 +0200</pubDate><guid>https://www.codewrecks.com/post/old/2010/03/power-of-hql-condition-on-a-collection/</guid><description>I have this piece of domain model.
The LinkResult class has a property called Link that point to a AnalyzedLink class that in turn has a collection of AnalyzedLinkExtClass called ExtData. All the relation are unidirectional, this means that there is nothing that bring me from AnalyzedLink to a linkResult and nothing that bring me from AnalyzedLinkExtData to the AnalyzedLink. This is the typical situation where doing complex query can be tricky</description></item></channel></rss>